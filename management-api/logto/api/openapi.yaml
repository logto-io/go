openapi: 3.0.1
info:
  description: |-
    API references for Logto services.

    Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.
  title: Logto API references
  version: Cloud
servers:
- description: Logto endpoint address.
  url: "https://[tenant_id].logto.app/"
security:
- OAuth2:
  - all
tags:
- description: Customize your account API settings.
  name: Account center
- description: |-
    Application represents your registered software program or service that has been authorized to access user information and perform actions on behalf of users within the system. Currently, Logto supports four types of applications:

    - Traditional web

    - Single-page app
    - Native app
    - Machine-to-machine app.

    Depending on the application type, it may have different authentication flows and access to the system. See [üîó Integrate Logto in your application](https://docs.logto.io/docs/recipes/integrate-logto/) to learn more about how to integrate Logto into your application.

    Role-based access control (RBAC) is supported for machine-to-machine applications. See [üîê Role-based access control (RBAC)](https://docs.logto.io/docs/recipes/rbac/) to get started with role-based access control.
  name: Applications
- description: Audit logs are used to track end-user activities in Logto sign-in experience
    and other flows. It does not include activities in Logto Console.
  name: Audit logs
- description: Authentication endpoints for third-party integrations and identity
    providers.
  name: Authn
- name: Cloud only
- description: |-
    Endpoints for managing Logto global configurations for the tenant, such as admin console config and OIDC signing keys.

    See [üîë Signing keys](https://docs.logto.io/docs/recipes/signing-keys-rotation/) to learn more about signing keys and key rotation.
  name: Configs
- description: Connector factories are used to create connectors. They can be treated
    as preconfigured templates for connectors.
  name: Connector factories
- description: |-
    Connectors are the bridge between Logto and other third-party vendors who provide short message service (SMS), email service, or user information on wildly accepted social media.

    To learn more about connectors, please see [ü™õ Configure connectors](https://docs.logto.io/docs/recipes/configure-connectors/).
  name: Connectors
- description: |-
    Endpoints for managing custom phrases that allow you to customize the phrases displayed in the sign-in experience.

    See [Localized language](https://docs.logto.io/docs/recipes/customize-sie/localized-language/) to learn more about custom phrases for localization.
  name: Custom phrases
- description: "Endpoints for uploading custom UI assets for the sign-in experience.\
    \ Users can upload a zip file containing custom HTML, CSS, and JavaScript files\
    \ to replace and fully customize the sign-in experience."
  name: Custom UI assets
- description: Endpoints that power the dashboard page of Console to show the statistics
    of the current tenant.
  name: Dashboard
- description: "Custom domain lets you present a consistent brand by having your own\
    \ domain name on the sign-in and registration pages. See [üåç Custom domain](https://docs.logto.io/docs/recipes/custom-domain/)\
    \ for more details."
  name: Domains
- description: The Experience endpoints allow end-users to interact with Logto for
    identity verification and profile completion.
  name: Experience
- description: "Hook enables you to effortlessly receive real-time updates regarding\
    \ specific events, such as user registration, sign-in, or password reset. See\
    \ [ü™ù Webhooks] to get started and learn more."
  name: Hooks
- description: "Interaction endpoints are used to manage and process interactions\
    \ for end-users, such as sign-in experience. Interaction endpoints are legacy\
    \ endpoints that are used internally, will be replaced with Experience endpoints\
    \ instead."
  name: Interaction
- description: Account routes provide functionality for managing user profile for
    the end user to interact directly with access tokens.
  name: My account
- description: |-
    Manage organization - application relationships. An application can be associated with one or more organizations in order to get access to the organization resources.

    Currently, only machine-to-machine applications can be associated with organizations.
  name: Organization applications
- description: Organization invitations are used to invite users to join an organization.
    They are sent via email and contain a link that the user can click to accept the
    invitation and join the organization.
  name: Organization invitations
- description: |-
    Organization roles are used to define a set of organization scopes that can be assigned to users. Every organization role is a part of the organization template.

    Organization roles will only be meaningful within an organization context. For example, a user may have an `admin` role for organization A, but not for organization B. See [üè¢ Organizations (Multi-tenancy)](https://docs.logto.io/docs/recipes/organizations/) to get started with organizations and organization template.
  name: Organization roles
- description: |-
    Organization scopes (permissions) are used to define actions that can be performed on a organization. Every organization scope is a part of the organization template.

    Organization scopes will only be meaningful within an organization context. For example, a user may have a `read` scope for organization A, but not for organization B. See [üè¢ Organizations (Multi-tenancy)](https://docs.logto.io/docs/recipes/organizations/) to get started with organizations and organization template.
  name: Organization scopes
- description: |-
    Manage organization - user relationships. A user can be a member of one or more organizations in order to get access to the organization resources.

    Users can be assigned roles in organizations to grant them permissions to perform certain actions in the organization.
  name: Organization users
- description: |-
    Organization is a concept that brings together multiple identities (mostly users). Logto supports multiple organizations, and each organization can have multiple users.

    Every organization shares the same set (organization template) of roles and permissions. Each user can have different roles in different organizations. See [üè¢ Organizations (Multi-tenancy)](https://docs.logto.io/docs/recipes/organizations/) to get started with organizations and organization template.
  name: Organizations
- description: |-
    Resources (API resources) represent the APIs that you want to protect with Logto. Each resource has a unique indicator (URI) and a set of scopes (permissions). The resources will be used in the authorization process which conforms to [RFC 8707: Resource Indicators for OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8707.html).

    See [‚öîÔ∏è Protect your API](https://docs.logto.io/docs/recipes/protect-your-api/) to learn more about how to define API resources and protect your APIs with Logto.
  name: Resources
- description: "Role management for API resource RBAC (role-based access control).\
    \ See [üîê Role-based access control (RBAC)](https://docs.logto.io/docs/recipes/rbac/)\
    \ to get started with role-based access control."
  name: Roles
- description: "Endpoints for customizing Logto sign-in experience. See [üé® Customize\
    \ sign-in experience](https://docs.logto.io/docs/recipes/customize-sie/) to learn\
    \ more about how the configuration works and reflects on the user interface."
  name: Sign-in experience
- description: |-
    Endpoints for SSO (single sign-on) connector providers.

    SSO connector providers provide the metadata and configuration templates for creating SSO connectors.
  name: SSO connector providers
- description: |-
    Endpoints for managing single sign-on (SSO) connectors. Your sign-in experience can use these well-configured SSO connectors to authenticate users and sync user attributes from external identity providers (IdPs).

    SSO connectors are created by SSO connector provider factories.
  name: SSO connectors
- description: Endpoints for health check.
  name: Status
- description: The subject token API provides the ability to create a new subject
    token for the use of impersonating the user.
  name: Subject tokens
- description: Endpoints for the Swagger JSON document.
  name: Swagger.json
- description: Endpoints for system constants and information.
  name: Systems
- description: Endpoints for managing user uploaded assets.
  name: User assets
- description: "Endpoints for user management. Including creating, updating, deleting,\
    \ and querying users with flexible filters. In addition to the endpoints, see\
    \ [üßë‚ÄçüöÄ Manage users](https://docs.logto.io/docs/recipes/manage-users/) for more\
    \ insights."
  name: Users
- description: |-
    Endpoints for handling verification codes. It is helpful when building a custom profile page in your app. See [üë§ User profile](https://docs.logto.io/docs/recipes/user-profile/#optional-validate-verification-code) for more details.

    Note: Before you call the endpoints, you need to setup your email/SMS connector first.
  name: Verification codes
- description: "Endpoints for creating and validating verification records, which\
    \ can be used in Profile routes."
  name: Verifications
- description: Well-Known routes provide information and resources that can be discovered
    by clients without the need for authentication.
  name: Well-known
paths:
  /api/applications:
    get:
      description: Get applications that match the given query with pagination.
      operationId: ListApplications
      parameters:
      - description: An array of application types to filter applications.
        explode: true
        in: query
        name: types
        required: false
        schema:
          $ref: '#/components/schemas/ListApplications_types_parameter'
        style: form
      - explode: true
        in: query
        name: excludeRoleId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: excludeOrganizationId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: isThirdParty
        required: false
        schema:
          $ref: '#/components/schemas/ListApplications_isThirdParty_parameter'
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListApplications_200_response_inner'
                type: array
          description: A list of applications.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get applications
      tags:
      - Applications
    post:
      description: Create a new application with the given data.
      operationId: CreateApplication
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplication_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplications_200_response_inner'
          description: The application was created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Validation error. Please check the request body.
        "500":
          description: Internal Server Error
      summary: Create an application
      tags:
      - Applications
  /api/applications/{id}:
    delete:
      description: Delete application by ID.
      operationId: DeleteApplication
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The application was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application with the specified ID was not found.
        "422":
          description: Unprocessable Content
      summary: Delete application
      tags:
      - Applications
    get:
      description: Get application details by ID.
      operationId: GetApplication
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplication_200_response'
          description: Details of the application.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application with the specified ID was not found.
      summary: Get application
      tags:
      - Applications
    patch:
      description: Update application details by ID with the given data.
      operationId: UpdateApplication
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplication_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplications_200_response_inner'
          description: The application was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application with the specified ID was not found.
        "422":
          description: Validation error. Please check the request body.
        "500":
          description: Internal server error.
      summary: Update application
      tags:
      - Applications
  /api/applications/{applicationId}/custom-data:
    patch:
      description: Update the custom data of an application.
      operationId: UpdateApplicationCustomData
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: An arbitrary JSON object.
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: arbitrary
                type: object
          description: The updated custom data in JSON.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Update application custom data
      tags:
      - Applications
  /api/applications/{applicationId}/roles:
    get:
      description: Get API resource roles assigned to the specified application with
        pagination.
      operationId: ListApplicationRoles
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListApplicationRoles_200_response_inner'
                type: array
          description: An array of API resource roles assigned to the application.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Get application API resource roles
      tags:
      - Applications
    post:
      description: Assign API resource roles to the specified application. The API
        resource roles will be added to the existing API resource roles.
      operationId: AssignApplicationRoles
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignApplicationRoles_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The API resource roles have been assigned to the application
            successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Assign API resource roles to application
      tags:
      - Applications
    put:
      description: Update API resource roles assigned to the specified application.
        This will replace the existing API resource roles.
      operationId: ReplaceApplicationRoles
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceApplicationRoles_request'
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: The API resource roles have been updated for the application
            successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Update API resource roles for application
      tags:
      - Applications
  /api/applications/{applicationId}/roles/{roleId}:
    delete:
      description: Remove a API resource role from the specified application.
      operationId: DeleteApplicationRole
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The API resource role has been removed from the application
            successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Remove a API resource role from application
      tags:
      - Applications
  /api/applications/{id}/protected-app-metadata/custom-domains:
    get:
      description: "Get custom domains of the specified application, the application\
        \ type should be protected app."
      operationId: ListApplicationProtectedAppMetadataCustomDomains
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner'
                type: array
          description: An array of the application custom domains.
        "400":
          description: Faild to sync the domain info from remote provider.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "501":
          description: Not Implemented
      summary: Get application custom domains.
      tags:
      - Applications
    post:
      description: Add a custom domain to the application. You'll need to setup DNS
        record later.
      operationId: CreateApplicationProtectedAppMetadataCustomDomain
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationProtectedAppMetadataCustomDomain_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The domain has been added to the application.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "409":
          description: The domain already exists.
        "422":
          description: Exeeded the maximum number of domains allowed or the domain
            is invalid.
        "501":
          description: Not Implemented
      summary: Add a custom domain to the application.
      tags:
      - Applications
  /api/applications/{id}/protected-app-metadata/custom-domains/{domain}:
    delete:
      description: Remove custom domain from the specified application.
      operationId: DeleteApplicationProtectedAppMetadataCustomDomain
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The domain has been removed.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Can not find the domain.
        "501":
          description: Not Implemented
      summary: Remove custom domain.
      tags:
      - Applications
  /api/applications/{id}/organizations:
    get:
      description: Get the list of organizations that an application is associated
        with.
      operationId: ListApplicationOrganizations
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner'
                type: array
          description: An array of organizations that the application is associated
            with.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get application organizations
      tags:
      - Applications
  /api/applications/{id}/legacy-secret:
    delete:
      description: |-
        Delete the legacy secret for the application and replace it with a new internal secret.

        Note: This operation does not "really" delete the legacy secret because it is still needed for internal validation. We may remove the display of the legacy secret (the `secret` field in the application response) in the future.
      operationId: DeleteApplicationLegacySecret
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApplicationLegacySecret_200_response'
          description: OK
        "204":
          description: The legacy secret was deleted successfully.
        "400":
          description: The application does not have a legacy secret.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete application legacy secret
      tags:
      - Applications
  /api/applications/{id}/secrets:
    get:
      description: Get all the secrets for the application.
      operationId: ListApplicationSecrets
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListApplicationSecrets_200_response_inner'
                type: array
          description: A list of secrets.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get application secrets
      tags:
      - Applications
    post:
      description: Add a new secret for the application.
      operationId: CreateApplicationSecret
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationSecret_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationSecrets_200_response_inner'
          description: The secret was added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The secret name is already in use.
      summary: Add application secret
      tags:
      - Applications
  /api/applications/{id}/secrets/{name}:
    delete:
      description: Delete a secret for the application by name.
      operationId: DeleteApplicationSecret
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the secret.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The secret was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete application secret
      tags:
      - Applications
    patch:
      description: Update a secret for the application by name.
      operationId: UpdateApplicationSecret
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the secret.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationSecret_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationSecrets_200_response_inner'
          description: OK
        "204":
          description: The secret was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update application secret
      tags:
      - Applications
  /api/applications/{applicationId}/user-consent-scopes:
    get:
      description: List all the user consent scopes of an application by application
        id
      operationId: ListApplicationUserConsentScopes
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response'
          description: All the user consent scopes of the application are listed successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application is not found
      summary: List all the user consent scopes of an application.
      tags:
      - Applications
    post:
      description: Assign the user consent scopes to an application by application
        id
      operationId: CreateApplicationUserConsentScope
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationUserConsentScope_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: All the user consent scopes are assigned to the application
            successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application is not found
        "422":
          description: "Any of the given organization scope, resource scope or user\
            \ scope is not found"
      summary: Assign user consent scopes to application.
      tags:
      - Applications
  /api/applications/{applicationId}/user-consent-scopes/{scopeType}/{scopeId}:
    delete:
      description: "Remove the user consent scope from an application by application\
        \ id, scope type and scope id"
      operationId: DeleteApplicationUserConsentScope
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: scopeType
        required: true
        schema:
          enum:
          - organization-scopes
          - resource-scopes
          - organization-resource-scopes
          - user-scopes
          type: string
        style: simple
      - description: The unique identifier of the scope.
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user consent scope is removed from the application successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application or scope is not found
      summary: Remove user consent scope from application.
      tags:
      - Applications
  /api/applications/{applicationId}/sign-in-experience:
    get:
      description: "Get application level sign-in experience for a given application.\
        \ \n - Only branding properties and terms links customization is supported\
        \ for now. \n\n - Only third-party applications can have the sign-in experience\
        \ customization for now."
      operationId: GetApplicationSignInExperience
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationSignInExperience_200_response'
          description: Returns the application's application level sign-in experience.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application does not exist or the application level sign-in
            experience does not exist.
      summary: Get the application level sign-in experience
      tags:
      - Applications
    put:
      description: "Update application level sign-in experience for the specified\
        \ application. Create a new sign-in experience if it does not exist. \n -\
        \ Only branding properties and terms links customization is supported for\
        \ now. \n\n - Only third-party applications can be customized for now. \n\n\
        \ - Application level sign-in experience customization is optional, if provided,\
        \ it will override the default branding and terms links."
      operationId: ReplaceApplicationSignInExperience
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceApplicationSignInExperience_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationSignInExperience_200_response'
          description: The application's sign-in experience was successfully updated.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApplicationSignInExperience_200_response'
          description: A new application level sign-in experience settings was successfully
            created.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application does not exist.
        "422":
          description: Unprocessable Content
      summary: Update application level sign-in experience
      tags:
      - Applications
  /api/applications/{id}/users/{userId}/consent-organizations:
    get:
      description: List all the user consented organizations for a application by
        application id and user id.
      operationId: ListApplicationUserConsentOrganizations
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationUserConsentOrganizations_200_response'
          description: List of organization entities granted by the user for the application.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: List all the user consented organizations of a application.
      tags:
      - Applications
    post:
      description: "Grant a list of organization access of a user for a application\
        \ by application id and user id. <br/> The user must be a member of all the\
        \ organizations. <br/> Only third-party application needs to be granted access\
        \ to organizations, all the other applications can request for all the organizations'\
        \ access by default."
      operationId: CreateApplicationUserConsentOrganization
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationUserConsentOrganization_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: All the request organizations's access are granted to the user
            for the application.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application or user is not found.
        "422":
          description: "The user is not a member of one of the organizations, or the\
            \ application is not a third-party application."
      summary: Grant a list of organization access of a user for a application.
      tags:
      - Applications
    put:
      description: "Grant a list of organization access of a user for a application\
        \ by application id and user id. <br/> The user must be a member of all the\
        \ organizations. <br/> Only third-party application needs to be granted access\
        \ to organizations, all the other applications can request for all the organizations'\
        \ access by default."
      operationId: ReplaceApplicationUserConsentOrganizations
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceApplicationUserConsentOrganizations_request'
        required: true
      responses:
        "204":
          description: 'All the request organizations''s access are granted to the
            user for the application. '
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The application or user is not found.
        "422":
          description: "The user is not a member of one of the organizations, or the\
            \ application is not a third-party application."
      summary: Grant a list of organization access of a user for a application.
      tags:
      - Applications
  /api/applications/{id}/users/{userId}/consent-organizations/{organizationId}:
    delete:
      description: "Revoke a user's access to an organization for a application by\
        \ application id, user id and organization id."
      operationId: DeleteApplicationUserConsentOrganization
      parameters:
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user's access to the organization is revoked for the application.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: "The application, user or organization is not found."
        "422":
          description: Unprocessable Content
      summary: Revoke a user's access to an organization for a application.
      tags:
      - Applications
  /api/configs/admin-console:
    get:
      description: Get the global configuration object for Logto Console.
      operationId: GetAdminConsoleConfig
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAdminConsoleConfig_200_response'
          description: The configuration object.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Configuration not found.
      summary: Get admin console config
      tags:
      - Configs
    patch:
      description: Update the global configuration object for Logto Console. This
        method performs a partial update.
      operationId: UpdateAdminConsoleConfig
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdminConsoleConfig_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAdminConsoleConfig_200_response'
          description: The updated configuration object.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Configuration not found.
      summary: Update admin console config
      tags:
      - Configs
  /api/configs/oidc/{keyType}:
    get:
      description: Get OIDC signing keys by key type. The actual key will be redacted
        from the result.
      operationId: GetOidcKeys
      parameters:
      - description: "Private keys are used to sign OIDC JWTs. Cookie keys are used\
          \ to sign OIDC cookies. For clients, they do not need to know private keys\
          \ to verify OIDC JWTs; they can use public keys from the JWKS endpoint instead."
        explode: false
        in: path
        name: keyType
        required: true
        schema:
          enum:
          - private-keys
          - cookie-keys
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GetOidcKeys_200_response_inner'
                type: array
          description: An array of OIDC signing keys for the given key type.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get OIDC keys
      tags:
      - Configs
  /api/configs/oidc/{keyType}/{keyId}:
    delete:
      description: Delete an OIDC signing key by key type and key ID.
      operationId: DeleteOidcKey
      parameters:
      - description: "Private keys are used to sign OIDC JWTs. Cookie keys are used\
          \ to sign OIDC cookies. For clients, they do not need to know private keys\
          \ to verify OIDC JWTs; they can use public keys from the JWKS endpoint instead."
        explode: false
        in: path
        name: keyType
        required: true
        schema:
          enum:
          - private-keys
          - cookie-keys
          type: string
        style: simple
      - description: The unique identifier of the key.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The key was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The key was not found.
        "422":
          description: At least one key must be kept.
      summary: Delete OIDC key
      tags:
      - Configs
  /api/configs/oidc/{keyType}/rotate:
    post:
      description: |-
        A new key will be generated and prepend to the list of keys.

        Only two recent keys will be kept. The oldest key will be automatically removed if there are more than two keys.
      operationId: RotateOidcKeys
      parameters:
      - description: "Private keys are used to sign OIDC JWTs. Cookie keys are used\
          \ to sign OIDC cookies. For clients, they do not need to know private keys\
          \ to verify OIDC JWTs; they can use public keys from the JWKS endpoint instead."
        explode: false
        in: path
        name: keyType
        required: true
        schema:
          enum:
          - private-keys
          - cookie-keys
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RotateOidcKeys_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GetOidcKeys_200_response_inner'
                type: array
          description: An array of OIDC signing keys after rotation.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      summary: Rotate OIDC keys
      tags:
      - Configs
  /api/configs/jwt-customizer/{tokenTypePath}:
    delete:
      description: Delete the JWT customizer for the given token type.
      operationId: DeleteJwtCustomizer
      parameters:
      - description: The token type path to delete the JWT customizer for.
        explode: false
        in: path
        name: tokenTypePath
        required: true
        schema:
          enum:
          - access-token
          - client-credentials
          type: string
        style: simple
      responses:
        "204":
          description: The JWT customizer was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The JWT customizer does not exist.
      summary: Delete JWT customizer
      tags:
      - Configs
    get:
      description: Get the JWT customizer for the given token type.
      operationId: GetJwtCustomizer
      parameters:
      - description: The token type to get the JWT customizer for.
        explode: false
        in: path
        name: tokenTypePath
        required: true
        schema:
          enum:
          - access-token
          - client-credentials
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response'
          description: The JWT customizer.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The JWT customizer does not exist.
      summary: Get JWT customizer
      tags:
      - Configs
    patch:
      description: Update the JWT customizer for the given token type.
      operationId: UpdateJwtCustomizer
      parameters:
      - description: The token type to update a JWT customizer for.
        explode: false
        in: path
        name: tokenTypePath
        required: true
        schema:
          enum:
          - access-token
          - client-credentials
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertJwtCustomizer_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response'
          description: The updated JWT customizer.
        "400":
          description: The request body is invalid.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update JWT customizer
      tags:
      - Configs
    put:
      description: Create or update a JWT customizer for the given token type.
      operationId: UpsertJwtCustomizer
      parameters:
      - description: The token type to create a JWT customizer for.
        explode: false
        in: path
        name: tokenTypePath
        required: true
        schema:
          enum:
          - access-token
          - client-credentials
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertJwtCustomizer_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response'
          description: The updated JWT customizer.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response'
          description: The created JWT customizer.
        "400":
          description: The request body is invalid.
        "401":
          description: Unauthorized
        "403":
          description: Permission denied.
      summary: Create or update JWT customizer
      tags:
      - Configs
  /api/configs/jwt-customizer:
    get:
      description: Get all JWT customizers for the tenant.
      operationId: ListJwtCustomizers
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListJwtCustomizers_200_response_inner'
                type: array
          description: The JWT customizers.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get all JWT customizers
      tags:
      - Configs
  /api/configs/jwt-customizer/test:
    post:
      description: Test the JWT customizer script with the given sample context and
        sample token payload.
      operationId: TestJwtCustomizer
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestJwtCustomizer_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: arbitrary
                type: object
          description: The result of the JWT customizer script testing.
        "400":
          description: "Zod errors in cloud service (data type does not match expectation,\
            \ can be either request body or response body)."
        "401":
          description: Unauthorized
        "403":
          description: Cloud connection does not have enough permission to perform
            the action.
        "422":
          description: Syntax errors in cloud service.
      summary: Test JWT customizer
      tags:
      - Configs
  /api/connectors:
    get:
      description: Get all connectors in the current tenant.
      operationId: ListConnectors
      parameters:
      - description: Filter connectors by target.
        explode: true
        in: query
        name: target
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListConnectors_200_response_inner'
                type: array
          description: An array of connectors.
        "400":
          description: "The target only allows one connector to exist, but there are\
            \ multiple connectors with this target."
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get connectors
      tags:
      - Connectors
    post:
      description: Create a connector with the given data.
      operationId: CreateConnector
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnector_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectors_200_response_inner'
          description: The created connector.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: The tenant has reached the maximum number of connectors.
        "422":
          description: Invalid request body.
      summary: Create connector
      tags:
      - Connectors
  /api/connectors/{id}:
    delete:
      description: Delete connector by ID.
      operationId: DeleteConnector
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The connector has been successfully deleted.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Connector not found.
      summary: Delete connector
      tags:
      - Connectors
    get:
      description: Get connector data by ID
      operationId: GetConnector
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectors_200_response_inner'
          description: The connector data.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Connector not found.
      summary: Get connector
      tags:
      - Connectors
    patch:
      description: Update connector by ID with the given data. This methods performs
        a partial update.
      operationId: UpdateConnector
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnector_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectors_200_response_inner'
          description: The updated connector.
        "400":
          description: Invalid request body.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Connector not found.
        "422":
          description: Patch operation triggered a connector conflict.
      summary: Update connector
      tags:
      - Connectors
  /api/connectors/{factoryId}/test:
    post:
      description: Test a passwordless (email or SMS) connector by sending a test
        message to the given phone number or email address.
      operationId: CreateConnectorTest
      parameters:
      - description: The unique identifier of the factory.
        explode: false
        in: path
        name: factoryId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorTest_request'
        required: true
      responses:
        "204":
          description: Test message was sent successfully.
        "400":
          description: "Invalid request body (e.g. wrong phone number, email or config)."
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Connector not found.
      summary: Test passwordless connector
      tags:
      - Connectors
  /api/connectors/{connectorId}/authorization-uri:
    post:
      description: Get authorization URI for specified connector by providing redirect
        URI and randomly generated state.
      operationId: CreateConnectorAuthorizationUri
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnectorAuthorizationUri_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConnectorAuthorizationUri_200_response'
          description: Successfully built authorization URI.
        "400":
          description: Unable to build authorization URI.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The connector with the specified ID does not exist.
      summary: Get connector's authorization URI
      tags:
      - Connectors
  /api/connector-factories:
    get:
      description: Get all connector factories data available in Logto.
      operationId: ListConnectorFactories
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListConnectorFactories_200_response_inner'
                type: array
          description: An array of connector factories.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get connector factories
      tags:
      - Connector factories
  /api/connector-factories/{id}:
    get:
      description: Get connector factory by the given ID.
      operationId: GetConnectorFactory
      parameters:
      - description: The unique identifier of the connector factory.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorFactories_200_response_inner'
          description: Connector factory data.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Connector factory not found.
      summary: Get connector factory
      tags:
      - Connector factories
  /api/resources:
    get:
      description: Get API resources in the current tenant with pagination.
      operationId: ListResources
      parameters:
      - description: "If it's provided with a truthy value (`true`, `1`, `yes`), the\
          \ scopes of each resource will be included in the response."
        explode: true
        in: query
        name: includeScopes
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListResources_200_response_inner'
                type: array
          description: An array of resources.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get API resources
      tags:
      - Resources
    post:
      description: Create an API resource in the current tenant.
      operationId: CreateResource
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResource_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResources_200_response_inner'
          description: The created resource.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      summary: Create an API resource
      tags:
      - Resources
  /api/resources/{id}:
    delete:
      description: Delete an API resource by ID.
      operationId: DeleteResource
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The resource was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete API resource
      tags:
      - Resources
    get:
      description: Get an API resource details by ID.
      operationId: GetResource
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner_resource'
          description: The requested resource.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get API resource
      tags:
      - Resources
    patch:
      description: Update an API resource details by ID with the given data. This
        method performs a partial update.
      operationId: UpdateResource
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner_resource'
          description: The updated resource.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update API resource
      tags:
      - Resources
  /api/resources/{id}/is-default:
    patch:
      description: |-
        Set an API resource as the default resource for the current tenant.

        Each tenant can have only one default API resource. If an API resource is set as default, the previously set default API resource will be set as non-default. See [this section](https://docs.logto.io/docs/references/resources/#default-api) for more information.
      operationId: UpdateResourceIsDefault
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceIsDefault_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner_resource'
          description: The updated resource.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Set API resource as default
      tags:
      - Resources
  /api/resources/{resourceId}/scopes:
    get:
      description: Get scopes (permissions) defined for an API resource.
      operationId: ListResourceScopes
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListResources_200_response_inner_scopes_inner'
                type: array
          description: An array of scopes for the requested resource.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get API resource scopes
      tags:
      - Resources
    post:
      description: Create a new scope (permission) for an API resource.
      operationId: CreateResourceScope
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceScope_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResources_200_response_inner_scopes_inner'
          description: The created scope.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Create API resource scope
      tags:
      - Resources
  /api/resources/{resourceId}/scopes/{scopeId}:
    delete:
      description: Delete an API resource scope (permission) from the given resource.
      operationId: DeleteResourceScope
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the scope.
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The scope was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete API resource scope
      tags:
      - Resources
    patch:
      description: Update an API resource scope (permission) for the given resource.
        This method performs a partial update.
      operationId: UpdateResourceScope
      parameters:
      - description: The unique identifier of the resource.
        explode: false
        in: path
        name: resourceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the scope.
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceScope_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResources_200_response_inner_scopes_inner'
          description: The updated scope.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Update API resource scope
      tags:
      - Resources
  /api/sign-in-exp:
    get:
      description: Get the default sign-in experience settings.
      operationId: GetSignInExp
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSignInExp_200_response'
          description: Default sign-in experience settings.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Default sign-in experience settings not found.
      summary: Get default sign-in experience settings
      tags:
      - Sign-in experience
    patch:
      description: Update the default sign-in experience settings with the provided
        data.
      operationId: UpdateSignInExp
      parameters:
      - description: Whether to remove unused demo social connectors. (These demo
          social connectors are only used during cloud user onboarding)
        explode: true
        in: query
        name: removeUnusedDemoSocialConnector
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSignInExp_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSignInExp_200_response'
          description: Updated default sign-in experience settings.
        "400":
          description: Bad request. Invalid data provided.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Default sign-in experience settings not found.
        "422":
          description: Unprocessable Entity. Invalid data provided.
      summary: Update default sign-in experience settings
      tags:
      - Sign-in experience
  /api/sign-in-exp/default/check-password:
    post:
      description: Check if a password meets the password policy in the sign-in experience
        settings.
      operationId: CheckPasswordWithDefaultSignInExperience
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckPasswordWithDefaultSignInExperience_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckPasswordWithDefaultSignInExperience_200_response'
          description: The password meets the password policy.
        "400":
          description: The password does not meet the password policy or no user ID
            provided.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Check if a password meets the password policy
      tags:
      - Sign-in experience
  /api/sign-in-exp/default/custom-ui-assets:
    post:
      description: "Upload a zip file containing custom web assets such as HTML, CSS,\
        \ and JavaScript files, then replace the default sign-in experience with the\
        \ custom UI assets."
      operationId: UploadCustomUiAssets
      parameters: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadCustomUiAssets_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadCustomUiAssets_200_response'
          description: An JSON object containing the custom UI assets ID.
        "400":
          description: Bad request. The request body is invalid.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Failed to unzip or upload the custom UI assets to storage provider.
      summary: Upload custom UI assets
      tags:
      - Sign-in experience
  /api/users/{userId}:
    delete:
      description: Delete user with the given ID. Note all associated data will be
        deleted cascadingly.
      operationId: DeleteUser
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: User deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete user
      tags:
      - Users
    get:
      description: Get user data for the given ID.
      operationId: GetUser
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: "If it's provided with a truthy value (`true`, `1`, `yes`), each\
          \ user in the response will include a `ssoIdentities` property containing\
          \ a list of SSO identities associated with the user."
        explode: true
        in: query
        name: includeSsoIdentities
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUser_200_response'
          description: User data for the given ID.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get user
      tags:
      - Users
    patch:
      description: Update user data for the given ID. This method performs a partial
        update.
      operationId: UpdateUser
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser_200_response'
          description: Updated user data for the given ID.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Update user
      tags:
      - Users
  /api/users/{userId}/custom-data:
    get:
      description: Get custom data for the given user ID.
      operationId: ListUserCustomData
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                description: arbitrary
                type: object
          description: Custom data in JSON for the given user ID.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get user custom data
      tags:
      - Users
    patch:
      description: Update custom data for the given user ID. This method performs
        a partial update of the custom data object.
      operationId: UpdateUserCustomData
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCustomData_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: arbitrary
                type: object
          description: Updated custom data in JSON for the given user ID.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update user custom data
      tags:
      - Users
  /api/users/{userId}/profile:
    patch:
      description: Update profile for the given user ID. This method performs a partial
        update of the profile object.
      operationId: UpdateUserProfile
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
          description: Updated profile in JSON for the given user ID.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update user profile
      tags:
      - Users
  /api/users:
    get:
      description: |-
        Get users with filters and pagination.

        Logto provides a very flexible way to query users. You can filter users by almost any fields with multiple modes. To learn more about the query syntax, please refer to [Advanced user search](https://docs.logto.io/docs/recipes/manage-users/advanced-user-search/).
      operationId: ListUsers
      parameters:
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UpdateUser_200_response'
                type: array
          description: An array of users that match the given criteria.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get users
      tags:
      - Users
    post:
      description: Create a new user with the given data.
      operationId: CreateUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser_200_response'
          description: User data for the newly created user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Create user
      tags:
      - Users
  /api/users/{userId}/password:
    patch:
      description: Update user password for the given ID.
      operationId: UpdateUserPassword
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPassword_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser_200_response'
          description: User password updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      summary: Update user password
      tags:
      - Users
  /api/users/{userId}/password/verify:
    post:
      description: Test if the given password matches the user's password.
      operationId: VerifyUserPassword
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyUserPassword_request'
        required: true
      responses:
        "204":
          description: User password matches.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: User password does not match.
      summary: Verify user password
      tags:
      - Users
  /api/users/{userId}/has-password:
    get:
      description: Check if the user with the given ID has a password set.
      operationId: GetUserHasPassword
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserHasPassword_200_response'
          description: The result of the check.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Check if user has password
      tags:
      - Users
  /api/users/{userId}/is-suspended:
    patch:
      description: Update user suspension status for the given ID.
      operationId: UpdateUserIsSuspended
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserIsSuspended_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser_200_response'
          description: User suspension status updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update user suspension status
      tags:
      - Users
  /api/users/{userId}/roles:
    get:
      description: Get API resource roles assigned to the user with pagination.
      operationId: ListUserRoles
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListApplicationRoles_200_response_inner'
                type: array
          description: An array of API resource roles assigned to the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get roles for user
      tags:
      - Users
    post:
      description: Assign API resource roles to the user. The roles will be added
        to the existing roles.
      operationId: AssignUserRoles
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignApplicationRoles_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The API resource roles has been assigned to the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Assign roles to user
      tags:
      - Users
    put:
      description: Update API resource roles assigned to the user. This will replace
        the existing roles.
      operationId: ReplaceUserRoles
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignApplicationRoles_request'
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: The API resource roles has been updated for the user successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Update roles for user
      tags:
      - Users
  /api/users/{userId}/roles/{roleId}:
    delete:
      description: Remove an API resource role from the user.
      operationId: DeleteUserRole
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: roleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The API resource role has been removed from the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Remove role from user
      tags:
      - Users
  /api/users/{userId}/identities/{target}:
    delete:
      description: Delete a social identity from the user.
      operationId: DeleteUserIdentity
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: target
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUser_200_response'
          description: The identity is deleted from the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete social identity from user
      tags:
      - Users
    put:
      description: Directly update a social identity of the user.
      operationId: ReplaceUserIdentity
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: target
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceUserIdentity_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
                type: object
          description: The identity is updated.
        "201":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
                type: object
          description: The identity is created.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Update social identity of user
      tags:
      - Users
  /api/users/{userId}/identities:
    post:
      description: |-
        Link authenticated user identity from a social platform to a Logto user.

        The usage of this API is usually coupled with `POST /connectors/:connectorId/authorization-uri`. With the help of these pair of APIs, you can implement a user profile page with the link social account feature in your application.

        Note: Currently due to technical limitations, this API does not support the following connectors that rely on Logto interaction session: `@logto/connector-apple`, `@logto/connector-saml`, `@logto/connector-oidc` and `@logto/connector-oauth`.
      operationId: CreateUserIdentity
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserIdentity_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
                type: object
          description: A new identity is linked to the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Link social identity to user
      tags:
      - Users
  /api/users/{userId}/organizations:
    get:
      description: "Get all organizations that the user is a member of. In each organization\
        \ object, the user's roles in that organization are included in the `organizationRoles`\
        \ array."
      operationId: ListUserOrganizations
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner'
                type: array
          description: An array of organizations that the user is a member of.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organizations for a user
      tags:
      - Users
  /api/users/{userId}/mfa-verifications:
    get:
      description: Get a user's existing MFA verifications for a given user ID.
      operationId: ListUserMfaVerifications
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListUserMfaVerifications_200_response_inner'
                type: array
          description: An array of MFA verifications for the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get user's MFA verifications
      tags:
      - Users
    post:
      description: Create a new MFA verification for a given user ID.
      operationId: CreateUserMfaVerification
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserMfaVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserMfaVerification_200_response'
          description: The MFA verification that was created.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Create an MFA verification for a user
      tags:
      - Users
  /api/users/{userId}/mfa-verifications/{verificationId}:
    delete:
      description: Delete an MFA verification for the user with the given verification
        ID. The verification ID must be associated with the given user ID.
      operationId: DeleteUserMfaVerification
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the verification.
        explode: false
        in: path
        name: verificationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The MFA verification was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete an MFA verification for a user
      tags:
      - Users
  /api/users/{userId}/personal-access-tokens:
    get:
      description: Get all personal access tokens for the user.
      operationId: ListUserPersonalAccessTokens
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListUserPersonalAccessTokens_200_response_inner'
                type: array
          description: A list of personal access tokens.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get personal access tokens
      tags:
      - Users
    post:
      description: Add a new personal access token for the user.
      operationId: CreateUserPersonalAccessToken
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPersonalAccessToken_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserPersonalAccessTokens_200_response_inner'
          description: The personal access token was added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The personal access token name is already in use.
      summary: Add personal access token
      tags:
      - Users
  /api/users/{userId}/personal-access-tokens/{name}:
    delete:
      description: Delete a token for the user by name.
      operationId: DeleteUserPersonalAccessToken
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the token.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The token was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete personal access token
      tags:
      - Users
    patch:
      description: Update a token for the user by name.
      operationId: UpdateUserPersonalAccessToken
      parameters:
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the token.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPersonalAccessToken_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserPersonalAccessTokens_200_response_inner'
          description: OK
        "204":
          description: The token was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update personal access token
      tags:
      - Users
  /api/logs:
    get:
      description: Get logs that match the given query with pagination.
      operationId: ListLogs
      parameters:
      - description: Filter logs by user ID.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - description: Filter logs by application ID.
        explode: true
        in: query
        name: applicationId
        required: false
        schema:
          type: string
        style: form
      - description: Filter logs by log key.
        explode: true
        in: query
        name: logKey
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListLogs_200_response_inner'
                type: array
          description: An array of logs that match the given query.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get logs
      tags:
      - Audit logs
  /api/logs/{id}:
    get:
      description: Get log details by ID.
      operationId: GetLog
      parameters:
      - description: The unique identifier of the log.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLogs_200_response_inner'
          description: Log details.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Log not found.
      summary: Get log
      tags:
      - Audit logs
  /api/roles:
    get:
      description: Get roles with filters and pagination.
      operationId: ListRoles
      parameters:
      - description: Exclude roles assigned to a user.
        explode: true
        in: query
        name: excludeUserId
        required: false
        schema:
          type: string
        style: form
      - description: Exclude roles assigned to an application.
        explode: true
        in: query
        name: excludeApplicationId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by role type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - User
          - MachineToMachine
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListRoles_200_response_inner'
                type: array
          description: An array of roles matching the filters.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get roles
      tags:
      - Roles
    post:
      description: Create a new role with the given data.
      operationId: CreateRole
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRole_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationRoles_200_response_inner'
          description: The created role.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Create a role
      tags:
      - Roles
  /api/roles/{id}:
    delete:
      description: Delete a role with the given ID.
      operationId: DeleteRole
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The role was deleted.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete role
      tags:
      - Roles
    get:
      description: Get role details by ID.
      operationId: GetRole
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationRoles_200_response_inner'
          description: Details of the role.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get role
      tags:
      - Roles
    patch:
      description: Update role details. This method performs a partial update.
      operationId: UpdateRole
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRole_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationRoles_200_response_inner'
          description: The updated role.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Update role
      tags:
      - Roles
  /api/roles/{id}/users:
    get:
      description: Get users who have the role assigned with pagination.
      operationId: ListRoleUsers
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UpdateUser_200_response'
                type: array
          description: An array of users who have the role assigned.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get role users
      tags:
      - Roles
    post:
      description: Assign a role to a list of users. The role must have the type `User`.
      operationId: CreateRoleUser
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleUser_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The role was assigned to the users successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Assign role to users
      tags:
      - Roles
  /api/roles/{id}/users/{userId}:
    delete:
      description: Remove a role from a user with the given ID.
      operationId: DeleteRoleUser
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The role was removed from the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Remove role from user
      tags:
      - Roles
  /api/roles/{id}/applications:
    get:
      description: Get applications that have the role assigned with pagination.
      operationId: ListRoleApplications
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeleteApplicationLegacySecret_200_response'
                type: array
          description: An array of applications that have the role assigned.
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get role applications
      tags:
      - Roles
    post:
      description: Assign a role to a list of applications. The role must have the
        type `Application`.
      operationId: CreateRoleApplication
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleApplication_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The role was assigned to the applications successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Assign role to applications
      tags:
      - Roles
  /api/roles/{id}/applications/{applicationId}:
    delete:
      description: Remove the role from an application with the given ID.
      operationId: DeleteRoleApplication
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The role was removed from the application.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Remove role from application
      tags:
      - Roles
  /api/roles/{id}/scopes:
    get:
      description: Get API resource scopes (permissions) linked with a role.
      operationId: ListRoleScopes
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      - description: Search query parameters.
        explode: true
        in: query
        name: search_params
        required: false
        schema:
          additionalProperties:
            type: string
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListRoleScopes_200_response_inner'
                type: array
          description: An array of API resource scopes linked with the role.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get role scopes
      tags:
      - Roles
    post:
      description: Link a list of API resource scopes (permissions) to a role. The
        original linked scopes will be kept.
      operationId: CreateRoleScope
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleScope_request'
        required: true
      responses:
        "200":
          description: The role was linked to the scopes successfully.
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListResources_200_response_inner_scopes_inner'
                type: array
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Link scopes to role
      tags:
      - Roles
  /api/roles/{id}/scopes/{scopeId}:
    delete:
      description: Unlink an API resource scope (permission) from a role with the
        given ID.
      operationId: DeleteRoleScope
      parameters:
      - description: The unique identifier of the role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the scope.
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The API resource scope was unlinked from the role.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Unlink scope from role
      tags:
      - Roles
  /api/dashboard/users/total:
    get:
      description: Get total user count in the current tenant.
      operationId: GetTotalUserCount
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTotalUserCount_200_response'
          description: Total user count.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get total user count
      tags:
      - Dashboard
  /api/dashboard/users/new:
    get:
      description: Get new user count in the past 7 days.
      operationId: GetNewUserCounts
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNewUserCounts_200_response'
          description: New user count.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get new user count
      tags:
      - Dashboard
  /api/dashboard/users/active:
    get:
      description: "Get active user data, including daily active user (DAU), weekly\
        \ active user (WAU) and monthly active user (MAU). It also includes an array\
        \ of DAU in the past 30 days."
      operationId: GetActiveUserCounts
      parameters:
      - description: The date to get active user data.
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: regex
          pattern: "/^\\d{4}(-\\d{2}){2}/"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActiveUserCounts_200_response'
          description: Active user data object.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get active user data
      tags:
      - Dashboard
  /api/custom-phrases:
    get:
      description: Get all custom phrases for all languages.
      operationId: ListCustomPhrases
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListCustomPhrases_200_response_inner'
                type: array
          description: An array of custom phrases.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get all custom phrases
      tags:
      - Custom phrases
  /api/custom-phrases/{languageTag}:
    delete:
      description: Delete custom phrases for the specified language tag.
      operationId: DeleteCustomPhrase
      parameters:
      - explode: false
        in: path
        name: languageTag
        required: true
        schema:
          enum:
          - af-ZA
          - am-ET
          - ar
          - ar-AR
          - as-IN
          - az-AZ
          - be-BY
          - bg-BG
          - bn-IN
          - br-FR
          - bs-BA
          - ca-ES
          - cb-IQ
          - co-FR
          - cs-CZ
          - cx-PH
          - cy-GB
          - da-DK
          - de
          - de-DE
          - el-GR
          - en
          - en-GB
          - en-US
          - eo-EO
          - es
          - es-ES
          - es-419
          - et-EE
          - eu-ES
          - fa-IR
          - ff-NG
          - fi-FI
          - fo-FO
          - fr
          - fr-CA
          - fr-FR
          - fy-NL
          - ga-IE
          - gl-ES
          - gn-PY
          - gu-IN
          - ha-NG
          - he-IL
          - hi-IN
          - hr-HR
          - ht-HT
          - hu-HU
          - hy-AM
          - id-ID
          - ik-US
          - is-IS
          - it
          - it-IT
          - iu-CA
          - ja
          - ja-JP
          - ja-KS
          - jv-ID
          - ka-GE
          - kk-KZ
          - km-KH
          - kn-IN
          - ko
          - ko-KR
          - ku-TR
          - ky-KG
          - lo-LA
          - lt-LT
          - lv-LV
          - mg-MG
          - mk-MK
          - ml-IN
          - mn-MN
          - mr-IN
          - ms-MY
          - mt-MT
          - my-MM
          - nb-NO
          - ne-NP
          - nl-BE
          - nl-NL
          - nn-NO
          - or-IN
          - pa-IN
          - pl-PL
          - ps-AF
          - pt
          - pt-BR
          - pt-PT
          - ro-RO
          - ru
          - ru-RU
          - rw-RW
          - sc-IT
          - si-LK
          - sk-SK
          - sl-SI
          - sn-ZW
          - sq-AL
          - sr-RS
          - sv-SE
          - sw-KE
          - sy-SY
          - sz-PL
          - ta-IN
          - te-IN
          - tg-TJ
          - th-TH
          - tl-PH
          - tr
          - tr-TR
          - tt-RU
          - tz-MA
          - uk-UA
          - ur-PK
          - uz-UZ
          - vi-VN
          - zh
          - zh-CN
          - zh-HK
          - zh-MO
          - zh-TW
          - zz-TR
          type: string
        style: simple
      responses:
        "204":
          description: Custom phrases deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Custom phrases not found.
        "409":
          description: Cannot delete the default language.
      summary: Delete custom phrase
      tags:
      - Custom phrases
    get:
      description: Get custom phrases for the specified language tag.
      operationId: GetCustomPhrase
      parameters:
      - explode: false
        in: path
        name: languageTag
        required: true
        schema:
          enum:
          - af-ZA
          - am-ET
          - ar
          - ar-AR
          - as-IN
          - az-AZ
          - be-BY
          - bg-BG
          - bn-IN
          - br-FR
          - bs-BA
          - ca-ES
          - cb-IQ
          - co-FR
          - cs-CZ
          - cx-PH
          - cy-GB
          - da-DK
          - de
          - de-DE
          - el-GR
          - en
          - en-GB
          - en-US
          - eo-EO
          - es
          - es-ES
          - es-419
          - et-EE
          - eu-ES
          - fa-IR
          - ff-NG
          - fi-FI
          - fo-FO
          - fr
          - fr-CA
          - fr-FR
          - fy-NL
          - ga-IE
          - gl-ES
          - gn-PY
          - gu-IN
          - ha-NG
          - he-IL
          - hi-IN
          - hr-HR
          - ht-HT
          - hu-HU
          - hy-AM
          - id-ID
          - ik-US
          - is-IS
          - it
          - it-IT
          - iu-CA
          - ja
          - ja-JP
          - ja-KS
          - jv-ID
          - ka-GE
          - kk-KZ
          - km-KH
          - kn-IN
          - ko
          - ko-KR
          - ku-TR
          - ky-KG
          - lo-LA
          - lt-LT
          - lv-LV
          - mg-MG
          - mk-MK
          - ml-IN
          - mn-MN
          - mr-IN
          - ms-MY
          - mt-MT
          - my-MM
          - nb-NO
          - ne-NP
          - nl-BE
          - nl-NL
          - nn-NO
          - or-IN
          - pa-IN
          - pl-PL
          - ps-AF
          - pt
          - pt-BR
          - pt-PT
          - ro-RO
          - ru
          - ru-RU
          - rw-RW
          - sc-IT
          - si-LK
          - sk-SK
          - sl-SI
          - sn-ZW
          - sq-AL
          - sr-RS
          - sv-SE
          - sw-KE
          - sy-SY
          - sz-PL
          - ta-IN
          - te-IN
          - tg-TJ
          - th-TH
          - tl-PH
          - tr
          - tr-TR
          - tt-RU
          - tz-MA
          - uk-UA
          - ur-PK
          - uz-UZ
          - vi-VN
          - zh
          - zh-CN
          - zh-HK
          - zh-MO
          - zh-TW
          - zz-TR
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCustomPhrases_200_response_inner'
          description: Custom phrases for the specified language tag.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Custom phrases not found.
      summary: Get custom phrases
      tags:
      - Custom phrases
    put:
      description: "Upsert custom phrases for the specified language tag. Upsert means\
        \ that if the custom phrases already exist, they will be updated. Otherwise,\
        \ they will be created."
      operationId: ReplaceCustomPhrase
      parameters:
      - explode: false
        in: path
        name: languageTag
        required: true
        schema:
          enum:
          - af-ZA
          - am-ET
          - ar
          - ar-AR
          - as-IN
          - az-AZ
          - be-BY
          - bg-BG
          - bn-IN
          - br-FR
          - bs-BA
          - ca-ES
          - cb-IQ
          - co-FR
          - cs-CZ
          - cx-PH
          - cy-GB
          - da-DK
          - de
          - de-DE
          - el-GR
          - en
          - en-GB
          - en-US
          - eo-EO
          - es
          - es-ES
          - es-419
          - et-EE
          - eu-ES
          - fa-IR
          - ff-NG
          - fi-FI
          - fo-FO
          - fr
          - fr-CA
          - fr-FR
          - fy-NL
          - ga-IE
          - gl-ES
          - gn-PY
          - gu-IN
          - ha-NG
          - he-IL
          - hi-IN
          - hr-HR
          - ht-HT
          - hu-HU
          - hy-AM
          - id-ID
          - ik-US
          - is-IS
          - it
          - it-IT
          - iu-CA
          - ja
          - ja-JP
          - ja-KS
          - jv-ID
          - ka-GE
          - kk-KZ
          - km-KH
          - kn-IN
          - ko
          - ko-KR
          - ku-TR
          - ky-KG
          - lo-LA
          - lt-LT
          - lv-LV
          - mg-MG
          - mk-MK
          - ml-IN
          - mn-MN
          - mr-IN
          - ms-MY
          - mt-MT
          - my-MM
          - nb-NO
          - ne-NP
          - nl-BE
          - nl-NL
          - nn-NO
          - or-IN
          - pa-IN
          - pl-PL
          - ps-AF
          - pt
          - pt-BR
          - pt-PT
          - ro-RO
          - ru
          - ru-RU
          - rw-RW
          - sc-IT
          - si-LK
          - sk-SK
          - sl-SI
          - sn-ZW
          - sq-AL
          - sr-RS
          - sv-SE
          - sw-KE
          - sy-SY
          - sz-PL
          - ta-IN
          - te-IN
          - tg-TJ
          - th-TH
          - tl-PH
          - tr
          - tr-TR
          - tt-RU
          - tz-MA
          - uk-UA
          - ur-PK
          - uz-UZ
          - vi-VN
          - zh
          - zh-CN
          - zh-HK
          - zh-MO
          - zh-TW
          - zz-TR
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              phraseKey1: new value1
              phraseKey2: new value2
            schema:
              $ref: '#/components/schemas/TranslationObject'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCustomPhrases_200_response_inner'
          description: Custom phrases created or updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Invalid translation structure.
      summary: Upsert custom phrases
      tags:
      - Custom phrases
  /api/hooks:
    get:
      description: Get a list of hooks with optional pagination.
      operationId: ListHooks
      parameters:
      - description: Whether to include execution stats in the response.
        explode: true
        in: query
        name: includeExecutionStats
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListHooks_200_response_inner'
                type: array
          description: A list of hooks.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get hooks
      tags:
      - Hooks
    post:
      description: Create a new hook with the given data.
      operationId: CreateHook
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHook_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHook_201_response'
          description: The hook was created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Create a hook
      tags:
      - Hooks
  /api/hooks/{id}:
    delete:
      description: Delete hook by ID.
      operationId: DeleteHook
      parameters:
      - description: The unique identifier of the hook.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The hook was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete hook
      tags:
      - Hooks
    get:
      description: Get hook details by ID.
      operationId: GetHook
      parameters:
      - description: The unique identifier of the hook.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to include execution stats in the response.
        explode: true
        in: query
        name: includeExecutionStats
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListHooks_200_response_inner'
          description: Details of the hook.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get hook
      tags:
      - Hooks
    patch:
      description: Update hook details by ID with the given data.
      operationId: UpdateHook
      parameters:
      - description: The unique identifier of the hook.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHook_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHook_201_response'
          description: The hook was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update hook
      tags:
      - Hooks
  /api/hooks/{id}/recent-logs:
    get:
      description: Get recent logs that match the given query for the specified hook
        with pagination.
      operationId: ListHookRecentLogs
      parameters:
      - description: The unique identifier of the hook.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The log key to filter logs.
        explode: true
        in: query
        name: logKey
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListHookRecentLogs_200_response_inner'
                type: array
          description: A list of recent logs for the hook.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get recent logs for a hook
      tags:
      - Hooks
  /api/hooks/{id}/test:
    post:
      description: Test the specified hook with the given events and config.
      operationId: CreateHookTest
      parameters:
      - description: The unique identifier of the hook.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHookTest_request'
        required: true
      responses:
        "204":
          description: The hook test was successful.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Test hook
      tags:
      - Hooks
  /api/hooks/{id}/signing-key:
    patch:
      description: Update the signing key for the specified hook.
      operationId: UpdateHookSigningKey
      parameters:
      - description: The unique identifier of the hook.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateHook_201_response'
          description: The signing key for the hook was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update signing key for a hook
      tags:
      - Hooks
  /api/verification-codes:
    post:
      description: |-
        Request a verification code for the provided identifier (email/phone).
        if you're using email as the identifier, you need to setup your email connector first.
        if you're using phone as the identifier, you need to setup your SMS connector first.
      operationId: CreateVerificationCode
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationCode_request'
        required: true
      responses:
        "204":
          description: Verification code requested and sent successfully.
        "400":
          description: Bad request. The payload may be invalid.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "501":
          description: Not Implemented
      summary: Request and send a verification code
      tags:
      - Verification codes
  /api/verification-codes/verify:
    post:
      description: |-
        Verify a verification code for a specified identifier.
        if you're using email as the identifier, you need to setup your email connector first.
        if you're using phone as the identifier, you need to setup your SMS connector first.
      operationId: VerifyVerificationCode
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyVerificationCode_request'
        required: true
      responses:
        "204":
          description: Verification code verified successfully.
        "400":
          description: Bad request. The payload may be invalid.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Verify a verification code
      tags:
      - Verification codes
  /api/user-assets/service-status:
    get:
      description: Get user assets service status.
      operationId: GetUserAssetServiceStatus
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserAssetServiceStatus_200_response'
          description: An object containing the service status and metadata.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get service status
      tags:
      - User assets
  /api/user-assets:
    post:
      description: Upload a user asset.
      operationId: CreateUserAsset
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserAsset_200_response'
          description: An object containing the uploaded asset metadata.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Upload asset
      tags:
      - User assets
  /api/domains:
    get:
      description: Get all of your custom domains.
      operationId: ListDomains
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListDomains_200_response_inner'
                type: array
          description: A list of domains.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get domains
      tags:
      - Domains
    post:
      description: "Create a new domain with the given data. The maximum domain number\
        \ is 1, once created, can not be modified, you'll have to delete and recreate\
        \ one."
      operationId: CreateDomain
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomain_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDomains_200_response_inner'
          description: The domain was created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Validation error. Please check the request body.
      summary: Create domain
      tags:
      - Domains
  /api/domains/{id}:
    delete:
      description: Delete domain by ID.
      operationId: DeleteDomain
      parameters:
      - description: The unique identifier of the domain.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The domain was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The domain with the specified ID was not found.
      summary: Delete domain
      tags:
      - Domains
    get:
      description: "Get domain details by ID, by calling this API, the domain status\
        \ will be synced from remote provider."
      operationId: GetDomain
      parameters:
      - description: The unique identifier of the domain.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDomains_200_response_inner'
          description: Details of the domain.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The domain with the specified ID was not found.
      summary: Get domain
      tags:
      - Domains
  /api/organization-roles/{id}:
    delete:
      description: Delete organization role by ID.
      operationId: DeleteOrganizationRole
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The organization role was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete organization role
      tags:
      - Organization roles
    get:
      description: Get organization role details by ID.
      operationId: GetOrganizationRole
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationRole_200_response'
          description: Details of the organization role.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization role
      tags:
      - Organization roles
    patch:
      description: Update organization role details by ID with the given data.
      operationId: UpdateOrganizationRole
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRole_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationRole_200_response'
          description: The organization role was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: The organization role name is already in use.
      summary: Update organization role
      tags:
      - Organization roles
  /api/organization-roles:
    get:
      description: Get organization roles with pagination.
      operationId: ListOrganizationRoles
      parameters:
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationRoles_200_response_inner'
                type: array
          description: A list of organization roles.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get organization roles
      tags:
      - Organization roles
    post:
      description: Create a new organization role with the given data.
      operationId: CreateOrganizationRole
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRole_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationRole_200_response'
          description: The organization role was created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The organization role name is already in use.
      summary: Create an organization role
      tags:
      - Organization roles
  /api/organization-roles/{id}/scopes:
    get:
      description: Get all organization scopes that are assigned to the specified
        organization role.
      operationId: ListOrganizationRoleScopes
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationRoleScopes_200_response_inner'
                type: array
          description: A list of organization scopes.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization role scopes
      tags:
      - Organization roles
    post:
      description: Assign organization scopes to the specified organization role
      operationId: CreateOrganizationRoleScope
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRoleScope_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: Organization scopes were assigned successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is invalid. For example,\
            \ the organization scope ID does not exist;"
      summary: Assign organization scopes to organization role
      tags:
      - Organization roles
    put:
      description: Replace all organization scopes that are assigned to the specified
        organization role with the given organization scopes. This effectively removes
        all existing organization scope assignments and replaces them with the new
        ones.
      operationId: ReplaceOrganizationRoleScopes
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationRoleScopes_request'
        required: true
      responses:
        "204":
          description: Organization scopes were replaced successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is invalid. For example,\
            \ the organization scope ID does not exist."
      summary: Replace organization scopes for organization role
      tags:
      - Organization roles
  /api/organization-roles/{id}/scopes/{organizationScopeId}:
    delete:
      description: Remove a organization scope assignment from the specified organization
        role.
      operationId: DeleteOrganizationRoleScope
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the organization scope.
        explode: false
        in: path
        name: organizationScopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Organization scope assignment was removed successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      summary: Remove organization scope
      tags:
      - Organization roles
  /api/organization-roles/{id}/resource-scopes:
    get:
      description: Get all resource scopes that are assigned to the specified organization
        role.
      operationId: ListOrganizationRoleResourceScopes
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListResources_200_response_inner_scopes_inner'
                type: array
          description: A list of resource scopes.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization role resource scopes
      tags:
      - Organization roles
    post:
      description: Assign resource scopes to the specified organization role
      operationId: CreateOrganizationRoleResourceScope
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRoleResourceScope_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: Resource scopes were assigned successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is invalid. For example,\
            \ the resource scope ID does not exist;"
      summary: Assign resource scopes to organization role
      tags:
      - Organization roles
    put:
      description: Replace all resource scopes that are assigned to the specified
        organization role with the given resource scopes. This effectively removes
        all existing organization scope assignments and replaces them with the new
        ones.
      operationId: ReplaceOrganizationRoleResourceScopes
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationRoleResourceScopes_request'
        required: true
      responses:
        "204":
          description: Resource scopes were replaced successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is invalid. For example,\
            \ the resource scope ID does not exist."
      summary: Replace resource scopes for organization role
      tags:
      - Organization roles
  /api/organization-roles/{id}/resource-scopes/{scopeId}:
    delete:
      description: Remove a resource scope assignment from the specified organization
        role.
      operationId: DeleteOrganizationRoleResourceScope
      parameters:
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the scope.
        explode: false
        in: path
        name: scopeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Resource scope assignment was removed successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      summary: Remove resource scope
      tags:
      - Organization roles
  /api/organization-scopes:
    get:
      description: Get organization scopes that match with pagination.
      operationId: ListOrganizationScopes
      parameters:
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationRoleScopes_200_response_inner'
                type: array
          description: A list of organization scopes.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get organization scopes
      tags:
      - Organization scopes
    post:
      description: Create a new organization scope with the given data.
      operationId: CreateOrganizationScope
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationScope_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationRoleScopes_200_response_inner'
          description: The organization scope was created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The organization scope name is already in use.
      summary: Create an organization scope
      tags:
      - Organization scopes
  /api/organization-scopes/{id}:
    delete:
      description: Delete organization scope by ID.
      operationId: DeleteOrganizationScope
      parameters:
      - description: The unique identifier of the organization scope.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The organization scope was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete organization scope
      tags:
      - Organization scopes
    get:
      description: Get organization scope details by ID.
      operationId: GetOrganizationScope
      parameters:
      - description: The unique identifier of the organization scope.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationRoleScopes_200_response_inner'
          description: The organization scope data for the given ID.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization scope
      tags:
      - Organization scopes
    patch:
      description: Update organization scope details by ID with the given data.
      operationId: UpdateOrganizationScope
      parameters:
      - description: The unique identifier of the organization scope.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationScope_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationRoleScopes_200_response_inner'
          description: The organization scope was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: The organization scope name is already in use.
      summary: Update organization scope
      tags:
      - Organization scopes
  /api/organization-invitations/{id}:
    delete:
      description: Delete an organization invitation by ID.
      operationId: DeleteOrganizationInvitation
      parameters:
      - description: The unique identifier of the organization invitation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The organization invitation was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete organization invitation
      tags:
      - Organization invitations
    get:
      description: Get an organization invitation by ID.
      operationId: GetOrganizationInvitation
      parameters:
      - description: The unique identifier of the organization invitation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationInvitation_200_response'
          description: "The organization invitation, also contains the organization\
            \ roles to be assigned to the user when they accept the invitation."
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization invitation
      tags:
      - Organization invitations
  /api/organization-invitations:
    get:
      description: Get organization invitations.
      operationId: ListOrganizationInvitations
      parameters:
      - explode: true
        in: query
        name: organizationId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: inviterId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: invitee
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GetOrganizationInvitation_200_response'
                type: array
          description: "A list of organization invitations, each item also contains\
            \ the organization roles to be assigned to the user when they accept the\
            \ invitation."
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get organization invitations
      tags:
      - Organization invitations
    post:
      description: Create an organization invitation and optionally send it via email.
        The tenant should have an email connector configured if you want to send the
        invitation via email at this point.
      operationId: CreateOrganizationInvitation
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationInvitation_request'
        description: The organization invitation to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationInvitation_200_response'
          description: The organization invitation was created successfully.
        "400":
          description: The organization invitation could not be created. This can
            happen if the input is invalid or if the expiration date is in the past.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
        "501":
          description: No email connector is configured for the tenant.
      summary: Create organization invitation
      tags:
      - Organization invitations
  /api/organization-invitations/{id}/message:
    post:
      description: Resend the invitation message to the invitee.
      operationId: CreateOrganizationInvitationMessage
      parameters:
      - description: The unique identifier of the organization invitation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationInvitation_request_messagePayload_oneOf'
        description: The message payload for the "OrganizationInvitation" template
          to use when sending the invitation via email.
        required: true
      responses:
        "204":
          description: The invitation message was resent successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Resend invitation message
      tags:
      - Organization invitations
  /api/organization-invitations/{id}/status:
    put:
      description: Update the status of an organization invitation by ID.
      operationId: ReplaceOrganizationInvitationStatus
      parameters:
      - description: The unique identifier of the organization invitation.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationInvitationStatus_request'
        description: The organization invitation status to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationInvitation_200_response'
          description: The organization invitation status was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The organization invitation status could not be updated. This
            can happen if the current status is not "Pending" or if the status is
            "Accepted" and the accepted user ID is not provided.
      summary: Update organization invitation status
      tags:
      - Organization invitations
  /api/organizations:
    get:
      description: Get organizations that match the given query with pagination.
      operationId: ListOrganizations
      parameters:
      - description: |-
          The query to filter organizations. It can be a partial ID or name.

          If not provided, all organizations will be returned.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Whether to show featured users in the organization. Featured users are randomly selected from the organization members.

          If not provided, `featuredUsers` will not be included in the response.
        explode: true
        in: query
        name: showFeatured
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizations_200_response_inner'
                type: array
          description: A list of organizations.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get organizations
      tags:
      - Organizations
    post:
      description: Create a new organization with the given data.
      operationId: CreateOrganization
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganization_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationUserConsentOrganizations_200_response_organizations_inner'
          description: The organization was created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Create an organization
      tags:
      - Organizations
  /api/organizations/{id}:
    delete:
      description: Delete organization by ID.
      operationId: DeleteOrganization
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The organization was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Delete organization
      tags:
      - Organizations
    get:
      description: Get organization details by ID.
      operationId: GetOrganization
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationUserConsentOrganizations_200_response_organizations_inner'
          description: Details of the organization.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization
      tags:
      - Organizations
    patch:
      description: Update organization details by ID with the given data.
      operationId: UpdateOrganization
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganization_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApplicationUserConsentOrganizations_200_response_organizations_inner'
          description: The organization was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Update organization
      tags:
      - Organizations
  /api/organizations/{id}/users:
    get:
      description: Get users that are members of the specified organization for the
        given query with pagination.
      operationId: ListOrganizationUsers
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The query to filter users. It will match multiple fields of users, including ID, name, username, email, and phone number.

          If not provided, all users will be returned.
        explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationUsers_200_response_inner'
                type: array
          description: A list of users that are members of the organization.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization user members
      tags:
      - Organizations
    post:
      description: Add users as members to the specified organization with the given
        user IDs.
      operationId: AddOrganizationUsers
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOrganizationUsers_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: Users were added to the organization successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is not valid. For example,\
            \ the organization ID or user ID does not exist."
      summary: Add user members to organization
      tags:
      - Organizations
    put:
      description: Replace all user members for the specified organization with the
        given users. This effectively removing all existing user memberships in the
        organization and adding the new users as members.
      operationId: ReplaceOrganizationUsers
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationUsers_request'
        required: true
      responses:
        "204":
          description: Successfully replaced all users for the organization.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is not valid. For example,\
            \ the organization ID or user ID does not exist."
      summary: Replace organization user members
      tags:
      - Organizations
  /api/organizations/{id}/users/{userId}:
    delete:
      description: Remove a user's membership from the specified organization.
      operationId: DeleteOrganizationUser
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user was removed from the organization members successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The user is not a member of the organization.
        "422":
          description: Unprocessable Content
      summary: Remove user member from organization
      tags:
      - Organizations
  /api/organizations/{id}/users/roles:
    post:
      description: Assign roles to user members of the specified organization.
      operationId: AssignOrganizationRolesToUsers
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignOrganizationRolesToUsers_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: Roles were assigned to organization users successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is not valid. For example,\
            \ the organization ID, user ID, or organization role ID does not exist;\
            \ the user is not a member of the organization; or the role type is not\
            \ assignable to the user."
      summary: Assign roles to organization user members
      tags:
      - Organizations
  /api/organizations/{id}/users/{userId}/roles:
    get:
      description: Get roles assigned to a user in the specified organization with
        pagination.
      operationId: ListOrganizationUserRoles
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GetOrganizationRole_200_response'
                type: array
          description: A list of roles assigned to the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The user is not a member of the organization.
      summary: Get roles for a user in an organization
      tags:
      - Organizations
    post:
      description: Assign roles to a user in the specified organization with the provided
        data.
      operationId: AssignOrganizationRolesToUser
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignOrganizationRolesToUser_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: Roles were assigned to the user successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "The user is not a member of the organization; or at least\
            \ one of the IDs provided is not valid. For example, the organization\
            \ ID or organization role ID does not exist."
      summary: Assign roles to a user in an organization
      tags:
      - Organizations
    put:
      description: Update roles assigned to a user in the specified organization with
        the provided data.
      operationId: ReplaceOrganizationUserRoles
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationUserRoles_request'
        required: true
      responses:
        "204":
          description: Roles were updated for the user successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "The user is not a member of the organization; or at least\
            \ one of the IDs provided is not valid. For example, the organization\
            \ ID or organization role ID does not exist."
      summary: Update roles for a user in an organization
      tags:
      - Organizations
  /api/organizations/{id}/users/{userId}/roles/{organizationRoleId}:
    delete:
      description: Remove a role assignment from a user in the specified organization.
      operationId: DeleteOrganizationUserRole
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: organizationRoleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The role was removed from the user successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Cannot find the record to delete.
        "422":
          description: The user is not a member of the organization.
      summary: Remove a role from a user in an organization
      tags:
      - Organizations
  /api/organizations/{id}/users/{userId}/scopes:
    get:
      description: Get scopes assigned to a user in the specified organization tailored
        by the organization roles. The scopes are derived from the organization roles
        assigned to the user.
      operationId: ListOrganizationUserScopes
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the user.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationRoleScopes_200_response_inner'
                type: array
          description: A list of scopes assigned to the user.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The user is not a member of the organization.
      summary: Get scopes for a user in an organization tailored by the organization
        roles
      tags:
      - Organizations
  /api/organizations/{id}/applications:
    get:
      description: Get applications associated with the organization.
      operationId: ListOrganizationApplications
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationApplications_200_response_inner'
                type: array
          description: A list of applications.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization applications
      tags:
      - Organizations
    post:
      description: Add an application to the organization.
      operationId: AddOrganizationApplications
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOrganizationApplications_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The application was added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The application could not be added. Some of the applications
            may not exist.
      summary: Add organization application
      tags:
      - Organizations
    put:
      description: Replace all applications associated with the organization with
        the given data.
      operationId: ReplaceOrganizationApplications
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationApplications_request'
        required: true
      responses:
        "204":
          description: The applications were replaced successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The applications could not be replaced. Some of the applications
            may not exist.
      summary: Replace organization applications
      tags:
      - Organizations
  /api/organizations/{id}/applications/{applicationId}:
    delete:
      description: Remove an application from the organization.
      operationId: DeleteOrganizationApplication
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The application was removed from the organization successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      summary: Remove organization application
      tags:
      - Organizations
  /api/organizations/{id}/applications/roles:
    post:
      description: Assign roles to applications in the specified organization.
      operationId: AssignOrganizationRolesToApplications
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignOrganizationRolesToApplications_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: Roles were assigned to the applications successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: "At least one of the IDs provided is not valid. For example,\
            \ the organization ID, application ID, or organization role ID does not\
            \ exist; the application is not a member of the organization; or the role\
            \ type is not assignable to the application."
      summary: Assign roles to applications in an organization
      tags:
      - Organizations
  /api/organizations/{id}/applications/{applicationId}/roles:
    get:
      description: Get roles associated with the application in the organization.
      operationId: ListOrganizationApplicationRoles
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GetOrganizationRole_200_response'
                type: array
          description: A list of roles.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      summary: Get organization application roles
      tags:
      - Organizations
    post:
      description: Add a role to the application in the organization.
      operationId: AssignOrganizationRolesToApplication
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignOrganizationRolesToApplication_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The role was added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The role could not be added. Some of the roles may not exist.
      summary: Add organization application role
      tags:
      - Organizations
    put:
      description: Replace all roles associated with the application in the organization
        with the given data.
      operationId: ReplaceOrganizationApplicationRoles
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationApplicationRoles_request'
        required: true
      responses:
        "204":
          description: The roles were replaced successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The roles could not be replaced. Some of the roles may not
            exist.
      summary: Replace organization application roles
      tags:
      - Organizations
  /api/organizations/{id}/applications/{applicationId}/roles/{organizationRoleId}:
    delete:
      description: Remove a role from the application in the organization.
      operationId: DeleteOrganizationApplicationRole
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the application.
        explode: false
        in: path
        name: applicationId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: organizationRoleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The role was removed from the application in the organization
            successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Cannot find the record to delete.
        "422":
          description: The application is not associated with the organization.
      summary: Remove organization application role
      tags:
      - Organizations
  /api/organizations/{id}/jit/email-domains:
    get:
      description: Get email domains for just-in-time provisioning of users in the
        organization.
      operationId: ListOrganizationJitEmailDomains
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationJitEmailDomains_200_response_inner'
                type: array
          description: A list of email domains.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get organization JIT email domains
      tags:
      - Organizations
    post:
      description: Add a new email domain for just-in-time provisioning of users in
        the organization.
      operationId: CreateOrganizationJitEmailDomain
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationJitEmailDomain_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationJitEmailDomains_200_response_inner'
          description: The email domain was added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The email domain is already in use.
      summary: Add organization JIT email domain
      tags:
      - Organizations
    put:
      description: Replace all just-in-time provisioning email domains for the organization
        with the given data.
      operationId: ReplaceOrganizationJitEmailDomains
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationJitEmailDomains_request'
        required: true
      responses:
        "204":
          description: The email domains were replaced successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Replace organization JIT email domains
      tags:
      - Organizations
  /api/organizations/{id}/jit/email-domains/{emailDomain}:
    delete:
      description: Remove an email domain for just-in-time provisioning of users in
        the organization.
      operationId: DeleteOrganizationJitEmailDomain
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The email domain to remove.
        explode: false
        in: path
        name: emailDomain
        required: true
        schema:
          minLength: 1
          type: string
        style: simple
      responses:
        "204":
          description: The email domain was removed successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The email domain was not found.
      summary: Remove organization JIT email domain
      tags:
      - Organizations
  /api/organizations/{id}/jit/roles:
    get:
      description: Get organization roles that will be assigned to users during just-in-time
        provisioning.
      operationId: ListOrganizationJitRoles
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GetOrganizationRole_200_response'
                type: array
          description: A list of organization roles.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization JIT default roles
      tags:
      - Organizations
    post:
      description: Add new organization roles that will be assigned to users during
        just-in-time provisioning.
      operationId: CreateOrganizationJitRole
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationJitRole_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The organization roles were added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The organization roles could not be added. Some of the organization
            roles may not exist.
      summary: Add organization JIT default roles
      tags:
      - Organizations
    put:
      description: Replace all organization roles that will be assigned to users during
        just-in-time provisioning with the given data.
      operationId: ReplaceOrganizationJitRoles
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationJitRoles_request'
        required: true
      responses:
        "204":
          description: The organization roles were replaced successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The organization roles could not be replaced. Some of the organization
            roles may not exist.
      summary: Replace organization JIT default roles
      tags:
      - Organizations
  /api/organizations/{id}/jit/roles/{organizationRoleId}:
    delete:
      description: Remove an organization role that will be assigned to users during
        just-in-time provisioning.
      operationId: DeleteOrganizationJitRole
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the organization role.
        explode: false
        in: path
        name: organizationRoleId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The organization role was removed successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The organization role could not be removed. The organization
            role may not exist.
      summary: Remove organization JIT default role
      tags:
      - Organizations
  /api/organizations/{id}/jit/sso-connectors:
    get:
      description: Get enterprise SSO connectors for just-in-time provisioning of
        users in the organization.
      operationId: ListOrganizationJitSsoConnectors
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListOrganizationJitSsoConnectors_200_response_inner'
                type: array
          description: A list of SSO connectors.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
      summary: Get organization JIT SSO connectors
      tags:
      - Organizations
    post:
      description: Add new enterprise SSO connectors for just-in-time provisioning
        of users in the organization.
      operationId: CreateOrganizationJitSsoConnector
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationJitSsoConnector_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: The SSO connectors were added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The SSO connectors could not be added. Some of the SSO connectors
            may not exist.
      summary: Add organization JIT SSO connectors
      tags:
      - Organizations
    put:
      description: Replace all enterprise SSO connectors for just-in-time provisioning
        of users in the organization with the given data.
      operationId: ReplaceOrganizationJitSsoConnectors
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceOrganizationJitSsoConnectors_request'
        required: true
      responses:
        "204":
          description: The SSO connectors were replaced successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The SSO connectors could not be replaced. Some of the SSO connectors
            may not exist.
      summary: Replace organization JIT SSO connectors
      tags:
      - Organizations
  /api/organizations/{id}/jit/sso-connectors/{ssoConnectorId}:
    delete:
      description: Remove an enterprise SSO connector for just-in-time provisioning
        of users in the organization.
      operationId: DeleteOrganizationJitSsoConnector
      parameters:
      - description: The unique identifier of the organization.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the sso connector.
        explode: false
        in: path
        name: ssoConnectorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The SSO connector was removed successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The SSO connector could not be removed. The SSO connector may
            not exist.
      summary: Remove organization JIT SSO connector
      tags:
      - Organizations
  /api/sso-connector-providers:
    get:
      description: Get a complete list of supported SSO connector providers.
      operationId: ListSsoConnectorProviders
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListSsoConnectorProviders_200_response_inner'
                type: array
          description: A list of SSO provider data.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: List all the supported SSO connector provider details
      tags:
      - SSO connector providers
  /api/sso-connectors:
    get:
      description: "Get SSO connectors with pagination. In addition to the raw SSO\
        \ connector data, a copy of fetched or parsed IdP configs and a copy of connector\
        \ provider's data will be attached."
      operationId: ListSsoConnectors
      parameters:
      - description: Page number (starts from 1).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: Entries per page.
        explode: true
        in: query
        name: page_size
        required: false
        schema:
          default: 20
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ListSsoConnectors_200_response_inner'
                type: array
          description: A list of SSO connectors.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: List SSO connectors
      tags:
      - SSO connectors
    post:
      description: Create an new SSO connector instance for a given provider.
      operationId: CreateSsoConnector
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSsoConnector_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationJitSsoConnectors_200_response_inner'
          description: The created SSO connector.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "409":
          description: Conflict
        "422":
          description: At lease one of the given input fields is invalid or IdP connection
            cannot be verified with the given config.
      summary: Create SSO connector
      tags:
      - SSO connectors
  /api/sso-connectors/{id}:
    delete:
      description: Delete an SSO connector by ID.
      operationId: DeleteSsoConnector
      parameters:
      - description: The unique identifier of the sso connector.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: SSO connector deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: SSO connector not found.
      summary: Delete SSO connector
      tags:
      - SSO connectors
    get:
      description: "Get SSO connector data by ID. In addition to the raw SSO connector\
        \ data, a copy of fetched or parsed IdP configs and a copy of connector provider's\
        \ data will be attached."
      operationId: GetSsoConnector
      parameters:
      - description: The unique identifier of the sso connector.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSsoConnectors_200_response_inner'
          description: The SSO connector data with the given ID.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: SSO connector not found.
      summary: Get SSO connector
      tags:
      - SSO connectors
    patch:
      description: Update an SSO connector by ID. This method performs a partial update.
      operationId: UpdateSsoConnector
      parameters:
      - description: The unique identifier of the sso connector.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSsoConnector_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSsoConnectors_200_response_inner'
          description: The updated SSO connector.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: SSO connector not found.
        "409":
          description: Conflict
        "422":
          description: At lease one of the update fields is invalid or IdP connection
            can not be verified with the given connection config.
      summary: Update SSO connector
      tags:
      - SSO connectors
  /api/systems/application:
    get:
      description: Get the application constants.
      operationId: GetSystemApplicationConfig
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSystemApplicationConfig_200_response'
          description: The application constants.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "501":
          description: Not Implemented
      summary: Get the application constants.
      tags:
      - Systems
  /api/subject-tokens:
    post:
      description: Create a new subject token for the use of impersonating the user.
      operationId: CreateSubjectToken
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubjectToken_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubjectToken_201_response'
          description: The subject token has been created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The user does not exist.
      summary: Create a new subject token.
      tags:
      - Subject tokens
  /api/account-center:
    get:
      description: Get the account center settings.
      operationId: GetAccountCenterSettings
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountCenterSettings_200_response'
          description: Account center settings.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get account center settings
      tags:
      - Account center
    patch:
      description: Update the account center settings with the provided settings.
      operationId: UpdateAccountCenterSettings
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountCenterSettings_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountCenterSettings_200_response'
          description: Updated account center settings.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Update account center settings
      tags:
      - Account center
  /api/.well-known/sign-in-exp:
    get:
      deprecated: true
      description: Get the full sign-in experience configuration.
      operationId: GetSignInExperienceConfig
      parameters:
      - explode: true
        in: query
        name: organizationId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: appId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSignInExperienceConfig_200_response'
          description: The full sign-in experience configuration.
        "400":
          description: Bad Request
      security: []
      summary: Get full sign-in experience
      tags:
      - Well-known
  /api/.well-known/phrases:
    get:
      description: Get localized phrases based on the specified language.
      operationId: GetSignInExperiencePhrases
      parameters:
      - description: The language tag for localization.
        explode: true
        in: query
        name: lng
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/GetSignInExperiencePhrases_200_response_value'
                type: object
          description: Localized phrases for the specified language.
        "400":
          description: Bad Request
      security: []
      summary: Get localized phrases
      tags:
      - Well-known
  /api/.well-known/experience:
    get:
      description: Get the full sign-in experience configuration.
      operationId: GetWellKnownExperience
      parameters:
      - explode: true
        in: query
        name: organizationId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: appId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSignInExperienceConfig_200_response'
          description: The full sign-in experience configuration.
        "400":
          description: Bad Request
      security: []
      summary: Get full sign-in experience
      tags:
      - Well-known
  /api/status:
    get:
      description: |-
        The traditional health check API. No authentication needed.

        > **Note**
        > Even if 204 is returned, it does not guarantee all the APIs are working properly since they may depend on additional resources or external services.
      operationId: GetStatus
      parameters: []
      responses:
        "204":
          description: The Logto core service is healthy.
      security: []
      summary: Health check
      tags:
      - Status
  /api/authn/hasura:
    get:
      description: "The `HASURA_GRAPHQL_AUTH_HOOK` endpoint for Hasura auth. Use this\
        \ endpoint to integrate Hasura's [webhook authentication flow](https://hasura.io/docs/latest/auth/authentication/webhook/)."
      operationId: GetHasuraAuth
      parameters:
      - explode: true
        in: query
        name: resource
        required: true
        schema:
          minLength: 1
          type: string
        style: form
      - explode: true
        in: query
        name: unauthorizedRole
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHasuraAuth_200_response'
          description: "The authenticated user claims in Hasura format. See [Hasura\
            \ docs](https://hasura.io/docs/latest/auth/authentication/webhook/#webhook-response)\
            \ for more information."
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security: []
      summary: Hasura auth hook endpoint
      tags:
      - Authn
  /api/authn/saml/{connectorId}:
    post:
      deprecated: true
      description: |-
        The Assertion Consumer Service (ACS) endpoint for Simple Assertion Markup Language (SAML) social connectors.

        SAML social connectors are deprecated. Use the SSO SAML connector instead.
      operationId: AssertSaml
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: arbitrary
              type: object
        required: true
      responses:
        "302":
          description: Redirect to the endpoint to complete the authentication flow.
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security: []
      summary: SAML ACS endpoint (social)
      tags:
      - Authn
  /api/authn/single-sign-on/saml/{connectorId}:
    post:
      description: |-
        The Assertion Consumer Service (ACS) endpoint for Simple Assertion Markup Language (SAML) single sign-on (SSO) connectors.

        This endpoint is used to complete the SAML SSO authentication flow. It receives the SAML assertion response from the identity provider (IdP) and redirects the user to complete the authentication flow.
      operationId: AssertSingleSignOnSaml
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssertSingleSignOnSaml_request'
        required: true
      responses:
        "302":
          description: Redirect to the endpoint to complete the authentication flow.
        "400":
          description: Invalid SAML assertion response.
        "404":
          description: Invalid SSO connector ID or SSO connector authentication session
            not found.
      security: []
      summary: SAML ACS endpoint (SSO)
      tags:
      - Authn
  /api/.well-known/management.openapi.json:
    get:
      description: "The endpoint for the Management API JSON document. The JSON conforms\
        \ to the [OpenAPI v3.0.1](https://spec.openapis.org/oas/v3.0.1) (a.k.a. Swagger)\
        \ specification."
      operationId: GetWellKnownManagementOpenapiJson
      parameters: []
      responses:
        "200":
          content:
            application/json: {}
          description: The JSON document.
      security: []
      summary: Get Management API swagger JSON
      tags:
      - Well-known
  /api/.well-known/experience.openapi.json:
    get:
      description: "The endpoint for the Experience API JSON document. The JSON conforms\
        \ to the [OpenAPI v3.0.1](https://spec.openapis.org/oas/v3.0.1) (a.k.a. Swagger)\
        \ specification."
      operationId: GetWellKnownExperienceOpenapiJson
      parameters: []
      responses:
        "200":
          content:
            application/json: {}
          description: The JSON document.
      security: []
      summary: Get Experience API swagger JSON
      tags:
      - Well-known
  /api/.well-known/user.openapi.json:
    get:
      description: "The endpoint for the User API JSON document. The JSON conforms\
        \ to the [OpenAPI v3.0.1](https://spec.openapis.org/oas/v3.0.1) (a.k.a. Swagger)\
        \ specification."
      operationId: GetWellKnownUserOpenapiJson
      parameters: []
      responses:
        "200":
          content:
            application/json: {}
          description: The JSON document.
      security: []
      summary: Get User API swagger JSON
      tags:
      - Well-known
  /api/swagger.json:
    get:
      description: "The endpoint for the current JSON document. The JSON conforms\
        \ to the [OpenAPI v3.0.1](https://spec.openapis.org/oas/v3.0.1) (a.k.a. Swagger)\
        \ specification."
      operationId: GetSwaggerJson
      parameters: []
      responses:
        "200":
          content:
            application/json: {}
          description: The JSON document.
      security: []
      summary: Get Swagger JSON
      tags:
      - Swagger.json
  /api/experience:
    put:
      description: Init a new experience interaction with the given interaction type.
        Any existing interaction data will be cleared.
      operationId: InitInteraction
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitInteraction_request'
        required: true
      responses:
        "204":
          description: A new experience interaction has been successfully initiated.
        "400":
          description: Bad Request
      security: []
      summary: Init new interaction
      tags:
      - Experience
  /api/experience/interaction-event:
    put:
      description: "Update the current experience interaction event to the given event\
        \ type. This API is used to switch the interaction event between `SignIn`\
        \ and `Register`, while keeping all the verification records data."
      operationId: UpdateInteractionEvent
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInteractionEvent_request'
        required: true
      responses:
        "204":
          description: The interaction event has been successfully updated.
        "400":
          description: "The interaction event is invalid or cannot be updated.  Only\
            \ `SignIn` and `Register` are interchangeable. If the current interaction\
            \ event is `ForgotPassword`, it cannot be updated."
        "403":
          description: The given interaction event is not enabled in the sign-in experience
            settings.
      security: []
      summary: Update interaction event
      tags:
      - Experience
  /api/experience/identification:
    post:
      description: "This API identifies the user based on the verificationId within\
        \ the current experience interaction: <br/>- `SignIn` and `ForgotPassword`\
        \ interactions: Verifies the user's identity using the provided `verificationId`.\
        \ <br/>- `Register` interaction: Creates a new user account using the profile\
        \ data from the current interaction. If a verificationId is provided, the\
        \ profile data will first be updated with the verification record before creating\
        \ the account. If not, the account is created directly from the stored profile\
        \ data."
      operationId: IdentifyUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentifyUser_request'
        required: true
      responses:
        "201":
          content:
            application/json: {}
          description: "`Register` interaction: The user account has been successfully\
            \ created and identified."
        "204":
          description: "`SignIn` and `ForgotPassword` interactions: The user has been\
            \ successfully identified."
        "400":
          description: "The provided verificationId is invalid, not verified, or cannot\
            \ be used to identify the user. <br/>- `session.verification_failed:`\
            \ The verification is not verified or can not be used to identify the\
            \ user. <br/>- `guard.invalid_target:` The `verificationId` is missing,\
            \ but required for the `SignIn` and `ForgotPassword` interactions."
        "401":
          description: The user is suspended or banned from the service. (SignIn and
            ForgotPassword only)
        "403":
          description: The `SignIn` or `Register` interaction is disabled in the experience
            settings.
        "404":
          description: 'Entity not found. <br/>- `session.verification_session_not_found:`
            The verification record is not found.  <br/>- `user.user_not_exist:` The
            user account is not found (SignIn and ForgotPassword only).  '
        "409":
          description: The interaction has already been identified with a different
            user account.
        "422":
          description: "The user account cannot be created due to validation errors,\
            \ check error message for more details (Register only). <br/>- `user.<identifier>_already_in_use:`\
            \ The given identifier is already in use by another user account. <br/>-\
            \ `user.missing_profile:` Sign-in experience required user identifier\
            \ or profile data is missing. (Register only)"
      security: []
      summary: Identify user for the current interaction
      tags:
      - Experience
  /api/experience/submit:
    post:
      description: Submit the current interaction. <br/>- Submit the verified user
        identity to the OIDC provider for further authentication (SignIn and Register).
        <br/>- Update the user's profile data if any (SignIn and Register). <br/>-
        Reset the password and clear all the interaction records (ForgotPassword).
      operationId: SubmitInteraction
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitInteraction_200_response'
          description: The interaction has been successfully submitted.
        "400":
          description: Bad Request
        "403":
          description: Multi-Factor Authentication (MFA) is enabled for the user but
            has not been verified.
        "404":
          description: 'The user has not been identified. '
        "422":
          description: "The user profile can not been processed, check error message\
            \ for more details. <br/>- The profile data is invalid or conflicts with\
            \ existing user data. <br/>- Required profile data is missing. <br/>-\
            \ The profile data is already in use by another user account."
      security: []
      summary: Submit interaction
      tags:
      - Experience
  /api/experience/verification/password:
    post:
      description: Create and verify a new Password verification record. The verification
        record can only be created if the provided user credentials are correct.
      operationId: CreatePasswordVerification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePasswordVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePasswordVerification_200_response'
          description: The Password verification record has been successfully created
            and verified.
        "400":
          description: The verification attempts have exceeded the maximum limit.
        "401":
          description: The user is suspended or banned from the service.
        "422":
          description: '`session.invalid_credentials:` Either the user is not found
            or the provided password is incorrect.'
      security: []
      summary: Create password verification record
      tags:
      - Experience
  /api/experience/verification/verification-code:
    post:
      description: Create a new `CodeVerification` record and sends the code to the
        specified identifier. The code verification can be used to verify the given
        identifier.
      operationId: CreateAndSendVerificationCode
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndSendVerificationCode_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAndSendVerificationCode_200_response'
          description: The verification code has been successfully sent.
        "400":
          description: An invalid identifier was provided.
        "404":
          description: Not Found
        "501":
          description: The connector for sending the verification code is not configured.
      security: []
      summary: Create and send verification code
      tags:
      - Experience
  /api/experience/verification/verification-code/verify:
    post:
      description: "Verify the provided verification code against the user's identifier.\
        \ If successful, the verification record will be marked as verified."
      operationId: VerifyVerificationCodeVerification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyVerificationCodeVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyVerificationCodeVerification_200_response'
          description: The verification code was successfully verified.
        "400":
          description: The verification code is invalid or the maximum number of attempts
            has been exceeded. Check the error message for details.
        "404":
          description: Verification record not found.
        "501":
          description: The connector for sending the verification code is not configured.
      security: []
      summary: Verify verification code
      tags:
      - Experience
  /api/experience/verification/social/{connectorId}/authorization-uri:
    post:
      description: Create a new SocialVerification record and return the provider's
        authorization URI for the given connector.
      operationId: CreateSocialVerification
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSocialVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSocialVerification_200_response'
          description: The social authorization URI has been successfully generated.
        "400":
          description: Bad Request
        "404":
          description: The social connector is not found.
        "500":
          description: Connector error. Failed to generate the social authorization
            URI.
      security: []
      summary: Create social verification
      tags:
      - Experience
  /api/experience/verification/social/{connectorId}/verify:
    post:
      description: Verify the social authorization response data and get the user's
        identity data from the social provider.
      operationId: VerifySocialVerification
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySocialVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifySocialVerification_200_response'
          description: The social authorization response has been successfully verified.
        "400":
          description: The social authorization response is invalid or cannot be verified.
        "404":
          description: The social connector is not found.
        "500":
          description: Connector error. Failed to verify the social authorization
            response or fetch the user info from the social provider.
      security: []
      summary: Verify social verification
      tags:
      - Experience
  /api/experience/verification/sso/{connectorId}/authorization-uri:
    post:
      description: Create a new EnterpriseSSO verification record and return the provider's
        authorization URI for the given connector.
      operationId: CreateEnterpriseSsoVerification
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEnterpriseSsoVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEnterpriseSsoVerification_200_response'
          description: The SSO authorization URI has been successfully generated.
        "400":
          description: Bad Request
        "404":
          description: The SSO connector is not found.
        "500":
          description: Connector error. Failed to generate the SSO authorization URI.
      security: []
      summary: Create enterprise SSO verification
      tags:
      - Experience
  /api/experience/verification/sso/{connectorId}/verify:
    post:
      description: Verify the SSO authorization response data and get the user's identity
        from the SSO provider.
      operationId: VerifyEnterpriseSsoVerification
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEnterpriseSsoVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEnterpriseSsoVerification_200_response'
          description: The SSO authorization response has been successfully verified.
        "400":
          description: The SSO authorization response is invalid or cannot be verified.
        "404":
          description: The verification record or the SSO connector is not found.
        "500":
          description: Connector error. Failed to verify the SSO authorization response
            or fetch the user info from the SSO provider.
      security: []
      summary: Verify enterprise SSO verification
      tags:
      - Experience
  /api/experience/verification/totp/secret:
    post:
      description: Create a new TOTP verification record and generate a new TOTP secret
        for the user. This secret can be used to bind a new TOTP verification to the
        user's profile. The verification record must be verified before the secret
        can be used to bind a new TOTP verification to the user's profile.
      operationId: CreateTotpSecret
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTotpSecret_200_response'
          description: TOTP secret successfully generated.
        "400":
          description: Bad Request
        "404":
          description: Entity not found. <br/> - `session.identifier_not_found:` The
            current interaction is not identified yet. All MFA verification records
            must be associated with a identified user.
      security: []
      summary: Create TOTP secret
      tags:
      - Experience
  /api/experience/verification/totp/verify:
    post:
      description: "Verifies the provided TOTP code against the new created TOTP secret\
        \ or the existing TOTP secret. If a verificationId is provided, this API will\
        \ verify the code against the TOTP secret that is associated with the verification\
        \ record. Otherwise, a new TOTP verification record will be created and verified\
        \ against the user's existing TOTP secret."
      operationId: VerifyTotpVerification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyTotpVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyTotpVerification_200_response'
          description: The TOTP code has been successfully verified.
        "400":
          description: Invalid TOTP code.
        "404":
          description: Verification record not found.
      security: []
      summary: Verify TOTP verification
      tags:
      - Experience
  /api/experience/verification/web-authn/registration:
    post:
      description: Create a new WebAuthn registration verification record. The verification
        record can be used to bind a new WebAuthn credential to the user's profile.
      operationId: CreateWebAuthnRegistrationVerification
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response'
          description: WebAuthn registration successfully created.
        "400":
          description: Bad Request
        "404":
          description: Entity not found. <br/> - `session.identifier_not_found:` The
            current interaction is not identified yet. All MFA verification records
            must be associated with a identified user.
      security: []
      summary: Create WebAuthn registration verification
      tags:
      - Experience
  /api/experience/verification/web-authn/registration/verify:
    post:
      description: "Verify the WebAuthn registration response against the user's WebAuthn\
        \ registration challenge. If the response is valid, the WebAuthn registration\
        \ record will be marked as verified."
      operationId: VerifyWebAuthnRegistrationVerification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_200_response'
          description: The WebAuthn registration has been successfully verified.
        "400":
          description: Invalid request. <br/>  - `session.mfa.pending_info_not_found:`
            The WebAuthn registration challenge is missing from the current verification
            record. <br/>- `session.mfa.webauthn_verification_failed:` The WebAuthn
            attestation response is invalid or cannot be verified.
        "404":
          description: Verification record not found.
      security: []
      summary: Verify WebAuthn registration verification
      tags:
      - Experience
  /api/experience/verification/web-authn/authentication:
    post:
      description: Create a new WebAuthn authentication verification record based
        on the user's existing WebAuthn credential. This verification record can be
        used to verify the user's WebAuthn credential.
      operationId: CreateWebAuthnAuthenticationVerification
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWebAuthnAuthenticationVerification_200_response'
          description: WebAuthn authentication successfully initiated.
        "400":
          description: The user does not have a verified WebAuthn credential.
        "404":
          description: The current interaction is not yet identified. All MFA verification
            records must be associated with an identified user.
      security: []
      summary: Create WebAuthn authentication verification
      tags:
      - Experience
  /api/experience/verification/web-authn/authentication/verify:
    post:
      description: "Verifies the WebAuthn authentication response against the user's\
        \ authentication challenge. Upon successful verification, the verification\
        \ record will be marked as verified."
      operationId: VerifyWebAuthnAuthenticationVerification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyWebAuthnAuthenticationVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyWebAuthnAuthenticationVerification_200_response'
          description: The WebAuthn authentication has been successfully verified.
        "400":
          description: Invalid request. <br/> - `session.mfa.pending_info_not_found:`
            The WebAuthn authentication challenge is missing in the current verification
            record. <br/>- `session.mfa.webauthn_verification_failed:` The WebAuthn
            assertion response is invalid or cannot be verified.
        "404":
          description: Verification record not found.
      security: []
      summary: Verify WebAuthn authentication verification
      tags:
      - Experience
  /api/experience/verification/backup-code/generate:
    post:
      description: Create a new BackupCode verification record with new backup codes
        generated. This verification record will be used to bind the backup codes
        to the user's profile.
      operationId: GenerateBackupCodes
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateBackupCodes_200_response'
          description: Backup codes have been successfully generated.
        "400":
          description: Bad Request
        "404":
          description: The current interaction is not identified yet. All MFA verification
            records must be associated with a identified user.
      security: []
      summary: Generate backup codes
      tags:
      - Experience
  /api/experience/verification/backup-code/verify:
    post:
      description: Create a new BackupCode verification record and verify the provided
        backup code against the user's backup codes. The verification record will
        be marked as verified if the code is correct.
      operationId: VerifyBackupCode
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyBackupCode_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyBackupCode_200_response'
          description: The backup code has been successfully verified.
        "400":
          description: The provided backup code is invalid.
        "404":
          description: Entity not found. <br/> - `session.identifier_not_found:` The
            current interaction is not identified yet. All MFA verification records
            must be associated with a identified user.
      security: []
      summary: Verify backup code
      tags:
      - Experience
  /api/experience/verification/new-password-identity:
    post:
      description: Create a NewPasswordIdentity verification record for the new user
        registration use. The verification record includes a unique user identifier
        and a password that can be used to create a new user account.
      operationId: CreateNewPasswordIdentityVerification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewPasswordIdentityVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNewPasswordIdentityVerification_200_response'
          description: The NewPasswordIdentity verification record has been successfully
            created.
        "400":
          description: Bad Request
        "422":
          description: Unable to process the request. <br/>- `user.username_already_in_use:`
            The provided username is already in use. <br/>- `password.rejected:` The
            provided password is rejected by the password policy. Detailed password
            violation information is included in the response.
      security: []
      summary: Create new password identity verification
      tags:
      - Experience
  /api/experience/profile:
    post:
      description: "Adds user profile data to the current experience interaction.\
        \ <br/>- For `Register`: The profile data provided before the identification\
        \ request will be used to create a new user account. <br/>- For `SignIn` and\
        \ `Register`: The profile data provided after the user is identified will\
        \ be used to update the user's profile when the interaction is submitted.\
        \ <br/>- `ForgotPassword`: Not supported."
      operationId: AddUserProfile
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserProfile_request'
        required: true
      responses:
        "204":
          description: The profile data has been successfully added to the current
            experience interaction.
        "400":
          description: 'Invalid request. <br/> - `session.not_supported_for_forgot_password:`
            This API can not be used in the `ForgotPassword` interaction. <br/>- `session.verification_failed:`
            The verification record is not verified. '
        "403":
          description: "`SignIn` interaction only: MFA is enabled for the user but\
            \ has not been verified. The user must verify the MFA before updating\
            \ the profile data."
        "404":
          description: Entity not found. <br/> - `session.identifier_not_found:` (`SignIn`
            interaction only) The current interaction is not identified yet. All profile
            data must be associated with a identified user. <br/>- `session.verification_session_not_found:`
            The verification record is not found.
        "422":
          description: "The user profile can not been processed, check error message\
            \ for more details. <br/>- The profile data is invalid or conflicts with\
            \ existing user data. <br/>- The profile data is already in use by another\
            \ user account. <br/>- The email address is enterprise SSO enabled, can\
            \ only be linked through the SSO connector."
      security: []
      summary: Add user profile
      tags:
      - Experience
  /api/experience/profile/password:
    put:
      description: Reset the user's password. (`ForgotPassword` interaction only)
      operationId: ResetUserPassword
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetUserPassword_request'
        required: true
      responses:
        "204":
          description: The password has been successfully updated.
        "400":
          description: The current interaction event is not `ForgotPassword`. The
            password can only be updated through the `ForgotPassword` interaction.
        "404":
          description: The user has not been identified yet. The user must be identified
            before updating the password.
        "422":
          description: "The password can not be updated due to validation errors,\
            \ check error message for more details. <br/>- `user.password_policy_violation:`\
            \ The password does not meet the password policy requirements. <br/>-\
            \ `user.same_password:` The new password is the same as the current password."
      security: []
      summary: Reset user password
      tags:
      - Experience
  /api/experience/profile/mfa/mfa-skipped:
    post:
      description: "Skip MFA verification binding flow. If the MFA is enabled in the\
        \ sign-in experience settings and marked as `UserControlled`, the user can\
        \ skip the MFA verification binding flow by calling this API."
      operationId: SkipMfaBindingFlow
      parameters: []
      responses:
        "204":
          description: The MFA verification has been successfully skipped.
        "400":
          description: Not supported for the current interaction event. The MFA profile
            API can only be used in the `SignIn` or `Register` interaction.
        "403":
          description: Some MFA factors has already been enabled for the user. The
            user must verify the MFA before updating the MFA settings.
        "404":
          description: The user has not been identified yet. The `mfa-skipped` configuration
            must be associated with a identified user.
        "422":
          description: "The MFA verification binding is `Mandatory`, user can not\
            \ skip the MFA verification binding flow."
      security: []
      summary: Skip MFA binding flow
      tags:
      - Experience
  /api/experience/profile/mfa:
    post:
      description: Bind new MFA verification to the user profile using the verificationId.
      operationId: BindMfaVerification
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindMfaVerification_request'
        required: true
      responses:
        "204":
          description: The MFA verification has been successfully added to the user
            profile.
        "400":
          description: Invalid request. <br/>- `session.verification_failed:` The
            MFA verification record is invalid or not verified. <br/>- `session.mfa.mfa_factor_not_enabled:`
            The MFA factor is not enabled in the sign-in experience settings. <br/>-
            `session.mfa.pending_info_not_found:` The MFA verification record does
            not have the required information to bind the MFA verification.
        "403":
          description: Forbidden
        "404":
          description: Entity not found. <br/> - `session.identifier_not_found:` The
            user has not been identified yet. The MFA verification can only be added
            to a identified user. <br/>- `session.verification_session_not_found:`
            The MFA verification record is not found.
        "422":
          description: "The MFA verification can not been processed, check error message\
            \ for more details. <br/>- `user.totp_already_in_use`: A TOTP MFA secret\
            \ is already in use in the current user profile. <br/>- `session.mfa.backup_code_can_not_be_alone`:\
            \ The backup code can not be the only MFA factor in the user profile."
      security: []
      summary: Bind MFA verification by verificationId
      tags:
      - Experience
  /api/experience/sso-connectors:
    get:
      description: Extract the email domain from the provided email address. Returns
        all the enabled SSO connectors that match the email domain.
      operationId: GetEnabledSsoConnectors
      parameters:
      - description: The email address to find the enabled SSO connectors.
        explode: true
        in: query
        name: email
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEnabledSsoConnectors_200_response'
          description: The enabled SSO connectors have been successfully retrieved.
        "400":
          description: "The email address is invalid, can not extract a valid domain\
            \ from it."
      security: []
      summary: Get enabled SSO connectors by the given email's domain
      tags:
      - Experience
  /api/my-account:
    get:
      description: Get profile for the user.
      operationId: GetProfile
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfile_200_response'
          description: The profile was retrieved successfully.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Get profile
      tags:
      - My account
    patch:
      description: "Update profile for the user, only the fields that are passed in\
        \ will be updated."
      operationId: UpdateProfile
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfile_200_response'
          description: The profile was updated successfully.
        "400":
          description: The request body is invalid.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The username is already in use.
      summary: Update profile
      tags:
      - My account
  /api/my-account/profile:
    patch:
      description: "Update other profile for the user, only the fields that are passed\
        \ in will be updated, to update the address, the user must have the address\
        \ scope."
      operationId: UpdateOtherProfile
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOtherProfile_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
          description: The profile was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Update other profile
      tags:
      - My account
  /api/my-account/password:
    post:
      description: "Update password for the user, a logto-verification-id in header\
        \ is required for checking sensitive permissions."
      operationId: UpdatePassword
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword_request'
        required: true
      responses:
        "204":
          description: The password was updated successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: "Permission denied, the verification record is invalid."
        "422":
          description: Unprocessable Content
      summary: Update password
      tags:
      - My account
  /api/my-account/primary-email:
    delete:
      description: "Delete primary email for the user, a verification-record-id in\
        \ header is required for checking sensitive permissions."
      operationId: DeletePrimaryEmail
      parameters: []
      responses:
        "204":
          description: The primary email was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Delete primary email
      tags:
      - My account
    post:
      description: "Update primary email for the user, a logto-verification-id in\
        \ header is required for checking sensitive permissions, and a new identifier\
        \ verification record is required for the new email ownership verification."
      operationId: UpdatePrimaryEmail
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePrimaryEmail_request'
        required: true
      responses:
        "204":
          description: The primary email was updated successfully.
        "400":
          description: The new verification record is invalid.
        "401":
          description: Unauthorized
        "403":
          description: "Permission denied, the verification record is invalid."
      summary: Update primary email
      tags:
      - My account
  /api/my-account/primary-phone:
    delete:
      description: "Delete primary phone for the user, a verification-record-id in\
        \ header is required for checking sensitive permissions."
      operationId: DeletePrimaryPhone
      parameters: []
      responses:
        "204":
          description: The primary phone was deleted successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Delete primary phone
      tags:
      - My account
    post:
      description: "Update primary phone for the user, a logto-verification-id in\
        \ header is required for checking sensitive permissions, and a new identifier\
        \ verification record is required for the new phone ownership verification."
      operationId: UpdatePrimaryPhone
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePrimaryPhone_request'
        required: true
      responses:
        "204":
          description: The primary phone was updated successfully.
        "400":
          description: The new verification record is invalid.
        "401":
          description: Unauthorized
        "403":
          description: "Permission denied, the verification record is invalid."
      summary: Update primary phone
      tags:
      - My account
  /api/my-account/identities:
    post:
      description: "Add an identity (social identity) to the user, a logto-verification-id\
        \ in header is required for checking sensitive permissions, and a verification\
        \ record for the social identity is required."
      operationId: AddUserIdentities
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserIdentities_request'
        required: true
      responses:
        "204":
          description: The identity was added successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      summary: Add a user identity
      tags:
      - My account
  /api/my-account/identities/{target}:
    delete:
      description: "Delete an identity (social identity) from the user, a logto-verification-id\
        \ in header is required for checking sensitive permissions."
      operationId: DeleteIdentity
      parameters:
      - explode: false
        in: path
        name: target
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The identity was deleted successfully.
        "400":
          description: The verification record is invalid.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The identity does not exist.
      summary: Delete a user identity
      tags:
      - My account
  /api/verifications/password:
    post:
      description: Create a verification record by verifying the password.
      operationId: CreateVerificationByPassword
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationByPassword_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVerificationByPassword_201_response'
          description: The verification record was created successfully.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: The password is invalid.
      summary: Create a record by password
      tags:
      - Verifications
  /api/verifications/verification-code:
    post:
      description: Create a verification record and send the code to the specified
        identifier. The code verification can be used to verify the given identifier.
      operationId: CreateVerificationByVerificationCode
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationByVerificationCode_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVerificationByPassword_201_response'
          description: The verification code has been successfully sent.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "501":
          description: The connector for sending the verification code is not configured.
      summary: Create a record by verification code
      tags:
      - Verifications
  /api/verifications/verification-code/verify:
    post:
      description: "Verify the provided verification code against the identifier.\
        \ If successful, the verification record will be marked as verified."
      operationId: VerifyVerificationByVerificationCode
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyVerificationCodeVerification_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyVerificationByVerificationCode_200_response'
          description: The verification code has been successfully verified.
        "400":
          description: The verification code is invalid or the maximum number of attempts
            has been exceeded. Check the error message for details.
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "501":
          description: The connector for sending the verification code is not configured.
      summary: Verify verification code
      tags:
      - Verifications
  /api/verifications/social:
    post:
      description: Create a social verification record and return the authorization
        URI.
      operationId: CreateVerificationBySocial
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationBySocial_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVerificationBySocial_201_response'
          description: Successfully created the social verification record and returned
            the authorization URI.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: The connector specified by connectorId is not found.
        "422":
          description: The connector specified by connectorId is not a valid social
            connector.
      summary: Create a social verification record
      tags:
      - Verifications
  /api/verifications/social/verify:
    post:
      description: "Verify a social verification record by callback connector data,\
        \ and save the user information to the record."
      operationId: VerifyVerificationBySocial
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyVerificationBySocial_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyVerificationByVerificationCode_200_response'
          description: The social verification record has been successfully verified
            and the user information has been saved.
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      summary: Verify a social verification record
      tags:
      - Verifications
  /api/interaction:
    delete:
      parameters: []
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      security: []
      tags:
      - Interaction
    put:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_put_request'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: Unprocessable Content
      security: []
      tags:
      - Interaction
  /api/interaction/event:
    put:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_event_put_request'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security: []
      tags:
      - Interaction
  /api/interaction/identifiers:
    patch:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_put_request_identifier'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      security: []
      tags:
      - Interaction
  /api/interaction/profile:
    delete:
      parameters: []
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security: []
      tags:
      - Interaction
    patch:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_put_request_profile'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security: []
      tags:
      - Interaction
    put:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_put_request_profile'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      security: []
      tags:
      - Interaction
  /api/interaction/submit:
    post:
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitInteraction_200_response'
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      security: []
      tags:
      - Interaction
  /api/interaction/consent:
    get:
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_interaction_consent_get_200_response'
          description: OK
      security: []
      tags:
      - Interaction
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_consent_post_request'
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: OK
        "400":
          description: Bad Request
      security: []
      tags:
      - Interaction
  /api/interaction/verification/social-authorization-uri:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_verification_social_authorization_uri_post_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitInteraction_200_response'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security: []
      tags:
      - Interaction
  /api/interaction/verification/verification-code:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVerificationCode_request'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "501":
          description: Not Implemented
      security: []
      tags:
      - Interaction
  /api/interaction/verification/totp:
    post:
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_interaction_verification_totp_post_200_response'
          description: OK
      security: []
      tags:
      - Interaction
  /api/interaction/verification/webauthn-registration:
    post:
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_interaction_verification_webauthn_registration_post_200_response'
          description: OK
      security: []
      tags:
      - Interaction
  /api/interaction/verification/webauthn-authentication:
    post:
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_api_interaction_verification_webauthn_authentication_post_200_response'
          description: OK
        "400":
          description: Bad Request
      security: []
      tags:
      - Interaction
  /api/interaction/bind-mfa:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_bind_mfa_post_request'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
      security: []
      tags:
      - Interaction
  /api/interaction/mfa:
    put:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_mfa_put_request'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Content
      security: []
      tags:
      - Interaction
  /api/interaction/mfa-skipped:
    put:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_mfa_skipped_put_request'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Content
      security: []
      tags:
      - Interaction
  /api/interaction/single-sign-on/{connectorId}/authorization-url:
    post:
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_api_interaction_single_sign_on__connectorId__authorization_url_post_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitInteraction_200_response'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security: []
      tags:
      - Interaction
  /api/interaction/single-sign-on/{connectorId}/authentication:
    post:
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                example: {}
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitInteraction_200_response'
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "422":
          description: Unprocessable Content
        "500":
          description: Internal Server Error
      security: []
      tags:
      - Interaction
  /api/interaction/single-sign-on/{connectorId}/registration:
    post:
      parameters:
      - description: The unique identifier of the connector.
        explode: false
        in: path
        name: connectorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitInteraction_200_response'
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security: []
      tags:
      - Interaction
  /api/interaction/single-sign-on/connectors:
    get:
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        "400":
          description: Bad Request
      security: []
      tags:
      - Interaction
components:
  parameters:
    tenantId-root:
      description: The unique identifier of the tenant.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    tenantId:
      description: The unique identifier of the tenant.
      explode: false
      in: path
      name: tenantId
      required: true
      schema:
        type: string
      style: simple
    keyId-root:
      description: The unique identifier of the key.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    keyId:
      description: The unique identifier of the key.
      explode: false
      in: path
      name: keyId
      required: true
      schema:
        type: string
      style: simple
    connectorFactoryId-root:
      description: The unique identifier of the connector factory.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    connectorFactoryId:
      description: The unique identifier of the connector factory.
      explode: false
      in: path
      name: connectorFactoryId
      required: true
      schema:
        type: string
      style: simple
    factoryId-root:
      description: The unique identifier of the factory.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    factoryId:
      description: The unique identifier of the factory.
      explode: false
      in: path
      name: factoryId
      required: true
      schema:
        type: string
      style: simple
    applicationId-root:
      description: The unique identifier of the application.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    applicationId:
      description: The unique identifier of the application.
      explode: false
      in: path
      name: applicationId
      required: true
      schema:
        type: string
      style: simple
    connectorId-root:
      description: The unique identifier of the connector.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    connectorId:
      description: The unique identifier of the connector.
      explode: false
      in: path
      name: connectorId
      required: true
      schema:
        type: string
      style: simple
    ssoConnectorId-root:
      description: The unique identifier of the sso connector.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    ssoConnectorId:
      description: The unique identifier of the sso connector.
      explode: false
      in: path
      name: ssoConnectorId
      required: true
      schema:
        type: string
      style: simple
    resourceId-root:
      description: The unique identifier of the resource.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    resourceId:
      description: The unique identifier of the resource.
      explode: false
      in: path
      name: resourceId
      required: true
      schema:
        type: string
      style: simple
    userId-root:
      description: The unique identifier of the user.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    userId:
      description: The unique identifier of the user.
      explode: false
      in: path
      name: userId
      required: true
      schema:
        type: string
      style: simple
    logId-root:
      description: The unique identifier of the log.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    logId:
      description: The unique identifier of the log.
      explode: false
      in: path
      name: logId
      required: true
      schema:
        type: string
      style: simple
    roleId-root:
      description: The unique identifier of the role.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    roleId:
      description: The unique identifier of the role.
      explode: false
      in: path
      name: roleId
      required: true
      schema:
        type: string
      style: simple
    scopeId-root:
      description: The unique identifier of the scope.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    scopeId:
      description: The unique identifier of the scope.
      explode: false
      in: path
      name: scopeId
      required: true
      schema:
        type: string
      style: simple
    hookId-root:
      description: The unique identifier of the hook.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    hookId:
      description: The unique identifier of the hook.
      explode: false
      in: path
      name: hookId
      required: true
      schema:
        type: string
      style: simple
    domainId-root:
      description: The unique identifier of the domain.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    domainId:
      description: The unique identifier of the domain.
      explode: false
      in: path
      name: domainId
      required: true
      schema:
        type: string
      style: simple
    verificationId-root:
      description: The unique identifier of the verification.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    verificationId:
      description: The unique identifier of the verification.
      explode: false
      in: path
      name: verificationId
      required: true
      schema:
        type: string
      style: simple
    organizationId-root:
      description: The unique identifier of the organization.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    organizationId:
      description: The unique identifier of the organization.
      explode: false
      in: path
      name: organizationId
      required: true
      schema:
        type: string
      style: simple
    organizationRoleId-root:
      description: The unique identifier of the organization role.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    organizationRoleId:
      description: The unique identifier of the organization role.
      explode: false
      in: path
      name: organizationRoleId
      required: true
      schema:
        type: string
      style: simple
    organizationScopeId-root:
      description: The unique identifier of the organization scope.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    organizationScopeId:
      description: The unique identifier of the organization scope.
      explode: false
      in: path
      name: organizationScopeId
      required: true
      schema:
        type: string
      style: simple
    organizationInvitationId-root:
      description: The unique identifier of the organization invitation.
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    organizationInvitationId:
      description: The unique identifier of the organization invitation.
      explode: false
      in: path
      name: organizationInvitationId
      required: true
      schema:
        type: string
      style: simple
  schemas:
    TranslationObject:
      example:
        input:
          username: Username
          password: Password
        action:
          sign_in: Sign In
          continue: Continue
      properties:
        '[translationKey]':
          $ref: '#/components/schemas/Translation'
      type: object
    Translation:
      oneOf:
      - type: string
    ApplicationLegacySecret:
      deprecated: true
      description: "The internal client secret. Note it is only used for internal\
        \ validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets`\
        \ endpoints."
      type: string
    ListApplications_types_parameter:
      oneOf:
      - items:
          enum:
          - Native
          - SPA
          - Traditional
          - MachineToMachine
          - Protected
          - SAML
          type: string
        type: array
      - enum:
        - Native
        - SPA
        - Traditional
        - MachineToMachine
        - Protected
        - SAML
        type: string
    ListApplications_isThirdParty_parameter:
      oneOf:
      - format: '"true"'
        type: string
      - format: '"false"'
        type: string
    ListApplications_200_response_inner_oidcClientMetadata_redirectUris_inner:
      oneOf:
      - description: Validator function
        type: object
      - description: Validator function
        type: object
    ListApplications_200_response_inner_oidcClientMetadata:
      example:
        backchannelLogoutUri: http://example.com/aeiou
        postLogoutRedirectUris:
        - http://example.com/aeiou
        - http://example.com/aeiou
        logoUri: logoUri
        redirectUris:
        - "{}"
        - "{}"
        backchannelLogoutSessionRequired: true
      properties:
        redirectUris:
          items:
            $ref: '#/components/schemas/ListApplications_200_response_inner_oidcClientMetadata_redirectUris_inner'
          type: array
        postLogoutRedirectUris:
          items:
            format: url
            type: string
          type: array
        backchannelLogoutUri:
          format: url
          type: string
        backchannelLogoutSessionRequired:
          type: boolean
        logoUri:
          type: string
      required:
      - postLogoutRedirectUris
      - redirectUris
      type: object
    ListApplications_200_response_inner_customClientMetadata:
      example:
        idTokenTtl: 0.8008281904610115
        refreshTokenTtl: 6.027456183070403
        refreshTokenTtlInDays: 1.4658129805029452
        tenantId: tenantId
        corsAllowedOrigins:
        - corsAllowedOrigins
        - corsAllowedOrigins
        alwaysIssueRefreshToken: true
        rotateRefreshToken: true
      properties:
        corsAllowedOrigins:
          items:
            minLength: 1
            type: string
          type: array
        idTokenTtl:
          type: number
        refreshTokenTtl:
          type: number
        refreshTokenTtlInDays:
          type: number
        tenantId:
          type: string
        alwaysIssueRefreshToken:
          type: boolean
        rotateRefreshToken:
          type: boolean
      type: object
    ListApplications_200_response_inner_protectedAppMetadata_pageRules_inner:
      example:
        path: path
      properties:
        path:
          type: string
      required:
      - path
      type: object
    ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_dnsRecords_inner:
      example:
        name: name
        type: type
        value: value
      properties:
        name:
          type: string
        type:
          type: string
        value:
          type: string
      required:
      - name
      - type
      - value
      type: object
    ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_cloudflareData_ssl_validation_errors_inner:
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_cloudflareData_ssl:
      example:
        validation_errors:
        - message: message
        - message: message
        status: status
      properties:
        status:
          type: string
        validation_errors:
          items:
            $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_cloudflareData_ssl_validation_errors_inner'
          type: array
      required:
      - status
      type: object
    ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_cloudflareData:
      example:
        id: id
        ssl:
          validation_errors:
          - message: message
          - message: message
          status: status
        verification_errors:
        - verification_errors
        - verification_errors
        status: status
      nullable: true
      properties:
        id:
          type: string
        status:
          type: string
        ssl:
          $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_cloudflareData_ssl'
        verification_errors:
          items:
            type: string
          type: array
      required:
      - id
      - ssl
      - status
      type: object
    ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner:
      example:
        cloudflareData:
          id: id
          ssl:
            validation_errors:
            - message: message
            - message: message
            status: status
          verification_errors:
          - verification_errors
          - verification_errors
          status: status
        domain: domain
        dnsRecords:
        - name: name
          type: type
          value: value
        - name: name
          type: type
          value: value
        errorMessage: errorMessage
        status: PendingVerification
      properties:
        domain:
          type: string
        status:
          enum:
          - PendingVerification
          - PendingSsl
          - Active
          - Error
          type: string
        errorMessage:
          nullable: true
          type: string
        dnsRecords:
          items:
            $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_dnsRecords_inner'
          type: array
        cloudflareData:
          $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_cloudflareData'
      required:
      - cloudflareData
      - dnsRecords
      - domain
      - errorMessage
      - status
      type: object
    ListApplications_200_response_inner_protectedAppMetadata:
      example:
        pageRules:
        - path: path
        - path: path
        customDomains:
        - cloudflareData:
            id: id
            ssl:
              validation_errors:
              - message: message
              - message: message
              status: status
            verification_errors:
            - verification_errors
            - verification_errors
            status: status
          domain: domain
          dnsRecords:
          - name: name
            type: type
            value: value
          - name: name
            type: type
            value: value
          errorMessage: errorMessage
          status: PendingVerification
        - cloudflareData:
            id: id
            ssl:
              validation_errors:
              - message: message
              - message: message
              status: status
            verification_errors:
            - verification_errors
            - verification_errors
            status: status
          domain: domain
          dnsRecords:
          - name: name
            type: type
            value: value
          - name: name
            type: type
            value: value
          errorMessage: errorMessage
          status: PendingVerification
        origin: origin
        host: host
        sessionDuration: 5.962133916683182
      nullable: true
      properties:
        host:
          type: string
        origin:
          type: string
        sessionDuration:
          type: number
        pageRules:
          items:
            $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_pageRules_inner'
          type: array
        customDomains:
          items:
            $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner'
          type: array
      required:
      - host
      - origin
      - pageRules
      - sessionDuration
      type: object
    ListApplications_200_response_inner:
      example:
        createdAt: 5.637376656633329
        isThirdParty: true
        oidcClientMetadata:
          backchannelLogoutUri: http://example.com/aeiou
          postLogoutRedirectUris:
          - http://example.com/aeiou
          - http://example.com/aeiou
          logoUri: logoUri
          redirectUris:
          - "{}"
          - "{}"
          backchannelLogoutSessionRequired: true
        tenantId: tenantId
        name: name
        customClientMetadata:
          idTokenTtl: 0.8008281904610115
          refreshTokenTtl: 6.027456183070403
          refreshTokenTtlInDays: 1.4658129805029452
          tenantId: tenantId
          corsAllowedOrigins:
          - corsAllowedOrigins
          - corsAllowedOrigins
          alwaysIssueRefreshToken: true
          rotateRefreshToken: true
        description: description
        customData: "{}"
        id: id
        secret: secret
        type: Native
        protectedAppMetadata:
          pageRules:
          - path: path
          - path: path
          customDomains:
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          origin: origin
          host: host
          sessionDuration: 5.962133916683182
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        secret:
          deprecated: true
          description: "The internal client secret. Note it is only used for internal\
            \ validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets`\
            \ endpoints."
          type: string
        description:
          nullable: true
          type: string
        type:
          enum:
          - Native
          - SPA
          - Traditional
          - MachineToMachine
          - Protected
          - SAML
          type: string
        oidcClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_oidcClientMetadata'
        customClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_customClientMetadata'
        protectedAppMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata'
        customData:
          description: arbitrary
          type: object
        isThirdParty:
          type: boolean
        createdAt:
          type: number
      required:
      - createdAt
      - customClientMetadata
      - customData
      - description
      - id
      - isThirdParty
      - name
      - oidcClientMetadata
      - protectedAppMetadata
      - secret
      - tenantId
      - type
      type: object
    CreateApplication_request_protectedAppMetadata:
      description: "The data for protected app, this feature is not available for\
        \ open source version."
      properties:
        subDomain:
          description: "The subdomain prefix, e.g., my-site."
          type: string
        origin:
          description: "The origin of target website, e.g., https://example.com."
          type: string
      required:
      - origin
      - subDomain
      type: object
    CreateApplication_request:
      properties:
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
        type:
          enum:
          - Native
          - SPA
          - Traditional
          - MachineToMachine
          - Protected
          - SAML
          type: string
        oidcClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_oidcClientMetadata'
        customClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_customClientMetadata'
        customData:
          description: arbitrary
          type: object
        isThirdParty:
          type: boolean
        protectedAppMetadata:
          $ref: '#/components/schemas/CreateApplication_request_protectedAppMetadata'
      required:
      - name
      - type
      type: object
    GetApplication_200_response:
      example:
        customClientMetadata:
          idTokenTtl: 0.8008281904610115
          refreshTokenTtl: 6.027456183070403
          refreshTokenTtlInDays: 1.4658129805029452
          tenantId: tenantId
          corsAllowedOrigins:
          - corsAllowedOrigins
          - corsAllowedOrigins
          alwaysIssueRefreshToken: true
          rotateRefreshToken: true
        description: description
        customData: "{}"
        secret: secret
        isAdmin: true
        type: Native
        protectedAppMetadata:
          pageRules:
          - path: path
          - path: path
          customDomains:
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          origin: origin
          host: host
          sessionDuration: 5.962133916683182
        createdAt: 0.8008281904610115
        isThirdParty: true
        oidcClientMetadata:
          backchannelLogoutUri: http://example.com/aeiou
          postLogoutRedirectUris:
          - http://example.com/aeiou
          - http://example.com/aeiou
          logoUri: logoUri
          redirectUris:
          - "{}"
          - "{}"
          backchannelLogoutSessionRequired: true
        tenantId: tenantId
        name: name
        id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        secret:
          deprecated: true
          description: "The internal client secret. Note it is only used for internal\
            \ validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets`\
            \ endpoints."
          type: string
        description:
          nullable: true
          type: string
        type:
          enum:
          - Native
          - SPA
          - Traditional
          - MachineToMachine
          - Protected
          - SAML
          type: string
        oidcClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_oidcClientMetadata'
        customClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_customClientMetadata'
        protectedAppMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata'
        customData:
          description: arbitrary
          type: object
        isThirdParty:
          type: boolean
        createdAt:
          type: number
        isAdmin:
          type: boolean
      required:
      - createdAt
      - customClientMetadata
      - customData
      - description
      - id
      - isAdmin
      - isThirdParty
      - name
      - oidcClientMetadata
      - protectedAppMetadata
      - secret
      - tenantId
      - type
      type: object
    UpdateApplication_request_protectedAppMetadata:
      properties:
        origin:
          type: string
        sessionDuration:
          type: number
        pageRules:
          items:
            $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_pageRules_inner'
          type: array
      type: object
    UpdateApplication_request:
      properties:
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
        oidcClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_oidcClientMetadata'
        customClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_customClientMetadata'
        customData:
          description: arbitrary
          type: object
        protectedAppMetadata:
          $ref: '#/components/schemas/UpdateApplication_request_protectedAppMetadata'
        isAdmin:
          description: Whether the application has admin access. User can enable the
            admin access for Machine-to-Machine apps.
          type: boolean
      type: object
    ListApplicationRoles_200_response_inner:
      example:
        isDefault: true
        tenantId: tenantId
        name: name
        description: description
        id: id
        type: User
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 128
          minLength: 1
          type: string
        type:
          enum:
          - User
          - MachineToMachine
          type: string
        isDefault:
          type: boolean
      required:
      - description
      - id
      - isDefault
      - name
      - tenantId
      - type
      type: object
    ReplaceApplicationRoles_request:
      properties:
        roleIds:
          description: An array of API resource role IDs to update for the application.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - roleIds
      type: object
    AssignApplicationRoles_request:
      properties:
        roleIds:
          description: An array of API resource role IDs to assign.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - roleIds
      type: object
    CreateApplicationProtectedAppMetadataCustomDomain_request:
      properties:
        domain:
          description: The domain to be added to the application.
          type: string
      required:
      - domain
      type: object
    ListApplicationOrganizations_200_response_inner_branding:
      example:
        favicon: http://example.com/aeiou
        darkFavicon: http://example.com/aeiou
        darkLogoUrl: http://example.com/aeiou
        logoUrl: http://example.com/aeiou
      properties:
        logoUrl:
          format: url
          type: string
        darkLogoUrl:
          format: url
          type: string
        favicon:
          format: url
          type: string
        darkFavicon:
          format: url
          type: string
      type: object
    ListApplicationOrganizations_200_response_inner_organizationRoles_inner:
      example:
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
      required:
      - id
      - name
      type: object
    ListApplicationOrganizations_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        tenantId: tenantId
        name: name
        description: description
        customData: "{}"
        id: id
        isMfaRequired: true
        organizationRoles:
        - name: name
          id: id
        - name: name
          id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 256
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        isMfaRequired:
          type: boolean
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        createdAt:
          type: number
        organizationRoles:
          items:
            $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_organizationRoles_inner'
          type: array
      required:
      - branding
      - createdAt
      - customData
      - description
      - id
      - isMfaRequired
      - name
      - organizationRoles
      - tenantId
      type: object
    DeleteApplicationLegacySecret_200_response:
      example:
        createdAt: 0.8008281904610115
        isThirdParty: true
        oidcClientMetadata:
          backchannelLogoutUri: http://example.com/aeiou
          postLogoutRedirectUris:
          - http://example.com/aeiou
          - http://example.com/aeiou
          logoUri: logoUri
          redirectUris:
          - "{}"
          - "{}"
          backchannelLogoutSessionRequired: true
        tenantId: tenantId
        name: name
        customClientMetadata:
          idTokenTtl: 0.8008281904610115
          refreshTokenTtl: 6.027456183070403
          refreshTokenTtlInDays: 1.4658129805029452
          tenantId: tenantId
          corsAllowedOrigins:
          - corsAllowedOrigins
          - corsAllowedOrigins
          alwaysIssueRefreshToken: true
          rotateRefreshToken: true
        description: description
        customData: "{}"
        id: id
        secret: secret
        type: Native
        protectedAppMetadata:
          pageRules:
          - path: path
          - path: path
          customDomains:
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          origin: origin
          host: host
          sessionDuration: 5.962133916683182
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        secret:
          maxLength: 64
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
        type:
          enum:
          - Native
          - SPA
          - Traditional
          - MachineToMachine
          - Protected
          - SAML
          type: string
        oidcClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_oidcClientMetadata'
        customClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_customClientMetadata'
        protectedAppMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata'
        customData:
          description: arbitrary
          type: object
        isThirdParty:
          type: boolean
        createdAt:
          type: number
      required:
      - createdAt
      - customClientMetadata
      - customData
      - description
      - id
      - isThirdParty
      - name
      - oidcClientMetadata
      - protectedAppMetadata
      - secret
      - tenantId
      - type
      type: object
    ListApplicationSecrets_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        tenantId: tenantId
        name: name
        applicationId: applicationId
        value: value
        expiresAt: 6.027456183070403
      properties:
        tenantId:
          maxLength: 21
          type: string
        applicationId:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        value:
          maxLength: 64
          minLength: 1
          type: string
        createdAt:
          type: number
        expiresAt:
          nullable: true
          type: number
      required:
      - applicationId
      - createdAt
      - expiresAt
      - name
      - tenantId
      - value
      type: object
    CreateApplicationSecret_request:
      properties:
        name:
          description: The secret name. Must be unique within the application.
          maxLength: 256
          minLength: 1
          type: string
        expiresAt:
          description: "The epoch time in milliseconds when the secret will expire.\
            \ If not provided, the secret will never expire."
          nullable: true
          type: number
      required:
      - name
      type: object
    UpdateApplicationSecret_request:
      properties:
        name:
          description: The secret name to update. Must be unique within the application.
          maxLength: 256
          minLength: 1
          type: string
      required:
      - name
      type: object
    ListApplicationUserConsentScopes_200_response_organizationScopes_inner:
      example:
        name: name
        description: description
        id: id
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 256
          nullable: true
          type: string
      required:
      - description
      - id
      - name
      type: object
    ListApplicationUserConsentScopes_200_response_resourceScopes_inner_resource:
      example:
        indicator: indicator
        name: name
        id: id
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        indicator:
          minLength: 1
          type: string
      required:
      - id
      - indicator
      - name
      type: object
    ListApplicationUserConsentScopes_200_response_resourceScopes_inner_scopes_inner:
      example:
        name: name
        description: description
        id: id
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
      required:
      - description
      - id
      - name
      type: object
    ListApplicationUserConsentScopes_200_response_resourceScopes_inner:
      example:
        resource:
          indicator: indicator
          name: name
          id: id
        scopes:
        - name: name
          description: description
          id: id
        - name: name
          description: description
          id: id
      properties:
        resource:
          $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response_resourceScopes_inner_resource'
        scopes:
          items:
            $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response_resourceScopes_inner_scopes_inner'
          type: array
      required:
      - resource
      - scopes
      type: object
    ListApplicationUserConsentScopes_200_response:
      example:
        organizationScopes:
        - name: name
          description: description
          id: id
        - name: name
          description: description
          id: id
        resourceScopes:
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        organizationResourceScopes:
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        userScopes:
        - profile
        - profile
      properties:
        organizationScopes:
          description: A list of organization scope details assigned to the application.
          items:
            $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response_organizationScopes_inner'
          type: array
        resourceScopes:
          description: A list of resource scope details grouped by resource id assigned
            to the application.
          items:
            $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response_resourceScopes_inner'
          type: array
        organizationResourceScopes:
          description: A list of organization resource scope details grouped by resource
            id assigned to the application.
          items:
            $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response_resourceScopes_inner'
          type: array
        userScopes:
          description: A list of user scope enum value assigned to the application.
          items:
            enum:
            - profile
            - email
            - phone
            - address
            - custom_data
            - identities
            - roles
            - urn:logto:scope:organizations
            - urn:logto:scope:organization_roles
            type: string
          type: array
      required:
      - organizationResourceScopes
      - organizationScopes
      - resourceScopes
      - userScopes
      type: object
    CreateApplicationUserConsentScope_request:
      properties:
        organizationScopes:
          description: A list of organization scope id to assign to the application.
            Throws error if any given organization scope is not found.
          items:
            type: string
          type: array
        resourceScopes:
          description: A list of resource scope id to assign to the application. Throws
            error if any given resource scope is not found.
          items:
            type: string
          type: array
        organizationResourceScopes:
          description: A list of organization resource scope id to assign to the application.
            Throws error if any given resource scope is not found.
          items:
            type: string
          type: array
        userScopes:
          description: A list of user scope enum value to assign to the application.
          items:
            enum:
            - profile
            - email
            - phone
            - address
            - custom_data
            - identities
            - roles
            - urn:logto:scope:organizations
            - urn:logto:scope:organization_roles
            type: string
          type: array
      type: object
    GetApplicationSignInExperience_200_response_color:
      example:
        isDarkModeEnabled: true
        primaryColor: primaryColor
        darkPrimaryColor: darkPrimaryColor
      properties:
        primaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
        isDarkModeEnabled:
          type: boolean
        darkPrimaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
      type: object
    GetApplicationSignInExperience_200_response:
      example:
        termsOfUseUrl: termsOfUseUrl
        color:
          isDarkModeEnabled: true
          primaryColor: primaryColor
          darkPrimaryColor: darkPrimaryColor
        displayName: displayName
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        tenantId: tenantId
        applicationId: applicationId
        privacyPolicyUrl: privacyPolicyUrl
      properties:
        tenantId:
          maxLength: 21
          type: string
        applicationId:
          maxLength: 21
          minLength: 1
          type: string
        color:
          $ref: '#/components/schemas/GetApplicationSignInExperience_200_response_color'
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        termsOfUseUrl:
          maxLength: 2048
          nullable: true
          type: string
        privacyPolicyUrl:
          maxLength: 2048
          nullable: true
          type: string
        displayName:
          maxLength: 256
          nullable: true
          type: string
      required:
      - applicationId
      - branding
      - color
      - displayName
      - privacyPolicyUrl
      - tenantId
      - termsOfUseUrl
      type: object
    ReplaceApplicationSignInExperience_request_termsOfUseUrl:
      oneOf:
      - format: url
        maxLength: 2048
        nullable: true
        type: string
      - format: empty
        type: string
    ReplaceApplicationSignInExperience_request:
      properties:
        color:
          $ref: '#/components/schemas/GetApplicationSignInExperience_200_response_color'
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        displayName:
          maxLength: 256
          nullable: true
          type: string
        termsOfUseUrl:
          $ref: '#/components/schemas/ReplaceApplicationSignInExperience_request_termsOfUseUrl'
        privacyPolicyUrl:
          $ref: '#/components/schemas/ReplaceApplicationSignInExperience_request_termsOfUseUrl'
      required:
      - privacyPolicyUrl
      - termsOfUseUrl
      type: object
    ListApplicationUserConsentOrganizations_200_response_organizations_inner:
      example:
        createdAt: 0.8008281904610115
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        tenantId: tenantId
        name: name
        description: description
        customData: "{}"
        id: id
        isMfaRequired: true
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 256
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        isMfaRequired:
          type: boolean
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        createdAt:
          type: number
      required:
      - branding
      - createdAt
      - customData
      - description
      - id
      - isMfaRequired
      - name
      - tenantId
      type: object
    ListApplicationUserConsentOrganizations_200_response:
      example:
        organizations:
        - createdAt: 0.8008281904610115
          branding:
            favicon: http://example.com/aeiou
            darkFavicon: http://example.com/aeiou
            darkLogoUrl: http://example.com/aeiou
            logoUrl: http://example.com/aeiou
          tenantId: tenantId
          name: name
          description: description
          customData: "{}"
          id: id
          isMfaRequired: true
        - createdAt: 0.8008281904610115
          branding:
            favicon: http://example.com/aeiou
            darkFavicon: http://example.com/aeiou
            darkLogoUrl: http://example.com/aeiou
            logoUrl: http://example.com/aeiou
          tenantId: tenantId
          name: name
          description: description
          customData: "{}"
          id: id
          isMfaRequired: true
      properties:
        organizations:
          description: A list of organization entities granted by the user for the
            application.
          items:
            $ref: '#/components/schemas/ListApplicationUserConsentOrganizations_200_response_organizations_inner'
          type: array
      required:
      - organizations
      type: object
    ReplaceApplicationUserConsentOrganizations_request:
      properties:
        organizationIds:
          description: "A list of organization ids to be granted. <br/> All the existing\
            \ organizations' access will be revoked if not in the list. <br/> If the\
            \ list is empty, all the organizations' access will be revoked."
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationIds
      type: object
    CreateApplicationUserConsentOrganization_request:
      properties:
        organizationIds:
          description: A list of organization ids to be granted.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationIds
      type: object
    GetAdminConsoleConfig_200_response_developmentTenantMigrationNotification:
      example:
        tag: tag
        readAt: 0.8008281904610115
        isPaidTenant: true
      properties:
        isPaidTenant:
          type: boolean
        tag:
          type: string
        readAt:
          type: number
      required:
      - isPaidTenant
      - tag
      type: object
    GetAdminConsoleConfig_200_response_checkedChargeNotification:
      example:
        tenantMember: true
        apiResource: true
        machineToMachineApp: true
        token: true
      properties:
        token:
          type: boolean
        apiResource:
          type: boolean
        machineToMachineApp:
          type: boolean
        tenantMember:
          type: boolean
      type: object
    GetAdminConsoleConfig_200_response:
      example:
        checkedChargeNotification:
          tenantMember: true
          apiResource: true
          machineToMachineApp: true
          token: true
        organizationCreated: true
        developmentTenantMigrationNotification:
          tag: tag
          readAt: 0.8008281904610115
          isPaidTenant: true
        signInExperienceCustomized: true
      properties:
        signInExperienceCustomized:
          type: boolean
        organizationCreated:
          type: boolean
        developmentTenantMigrationNotification:
          $ref: '#/components/schemas/GetAdminConsoleConfig_200_response_developmentTenantMigrationNotification'
        checkedChargeNotification:
          $ref: '#/components/schemas/GetAdminConsoleConfig_200_response_checkedChargeNotification'
      required:
      - organizationCreated
      - signInExperienceCustomized
      type: object
    UpdateAdminConsoleConfig_request:
      properties:
        signInExperienceCustomized:
          type: boolean
        organizationCreated:
          type: boolean
        developmentTenantMigrationNotification:
          $ref: '#/components/schemas/GetAdminConsoleConfig_200_response_developmentTenantMigrationNotification'
        checkedChargeNotification:
          $ref: '#/components/schemas/GetAdminConsoleConfig_200_response_checkedChargeNotification'
      type: object
    GetOidcKeys_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        signingKeyAlgorithm: RSA
        id: id
      properties:
        id:
          type: string
        createdAt:
          type: number
        signingKeyAlgorithm:
          enum:
          - RSA
          - EC
          type: string
      required:
      - createdAt
      - id
      type: object
    RotateOidcKeys_request:
      properties:
        signingKeyAlgorithm:
          description: |-
            The signing key algorithm the new generated private key is using.

            Only applicable when `keyType` is `private-keys`.
          enum:
          - RSA
          - EC
          type: string
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value:
      example:
        details: "{}"
        userId: userId
      properties:
        userId:
          type: string
        details:
          description: arbitrary
          type: object
      required:
      - userId
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_profile_address:
      example:
        country: country
        streetAddress: streetAddress
        formatted: formatted
        postalCode: postalCode
        locality: locality
        region: region
      properties:
        formatted:
          type: string
        streetAddress:
          type: string
        locality:
          type: string
        region:
          type: string
        postalCode:
          type: string
        country:
          type: string
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_profile:
      example:
        website: website
        zoneinfo: zoneinfo
        birthdate: birthdate
        address:
          country: country
          streetAddress: streetAddress
          formatted: formatted
          postalCode: postalCode
          locality: locality
          region: region
        gender: gender
        preferredUsername: preferredUsername
        familyName: familyName
        givenName: givenName
        profile: profile
        nickname: nickname
        middleName: middleName
        locale: locale
      properties:
        familyName:
          type: string
        givenName:
          type: string
        middleName:
          type: string
        nickname:
          type: string
        preferredUsername:
          type: string
        profile:
          type: string
        website:
          type: string
        gender:
          type: string
        birthdate:
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        address:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile_address'
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_ssoIdentities_inner:
      example:
        identityId: identityId
        detail: "{}"
        issuer: issuer
      properties:
        issuer:
          maxLength: 256
          minLength: 1
          type: string
        identityId:
          maxLength: 128
          minLength: 1
          type: string
        detail:
          description: arbitrary
          type: object
      required:
      - detail
      - identityId
      - issuer
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner_resource:
      example:
        indicator: indicator
        isDefault: true
        tenantId: tenantId
        name: name
        accessTokenTtl: 5.962133916683182
        id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        indicator:
          minLength: 1
          type: string
        isDefault:
          type: boolean
        accessTokenTtl:
          type: number
      required:
      - accessTokenTtl
      - id
      - indicator
      - isDefault
      - name
      - tenantId
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner:
      example:
        resourceId: resourceId
        resource:
          indicator: indicator
          isDefault: true
          tenantId: tenantId
          name: name
          accessTokenTtl: 5.962133916683182
          id: id
        name: name
        description: description
        id: id
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
        resourceId:
          maxLength: 21
          minLength: 1
          type: string
        resource:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner_resource'
      required:
      - description
      - id
      - name
      - resource
      - resourceId
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner:
      example:
        name: name
        description: description
        id: id
        scopes:
        - resourceId: resourceId
          resource:
            indicator: indicator
            isDefault: true
            tenantId: tenantId
            name: name
            accessTokenTtl: 5.962133916683182
            id: id
          name: name
          description: description
          id: id
        - resourceId: resourceId
          resource:
            indicator: indicator
            isDefault: true
            tenantId: tenantId
            name: name
            accessTokenTtl: 5.962133916683182
            id: id
          name: name
          description: description
          id: id
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 128
          minLength: 1
          type: string
        scopes:
          items:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner'
          type: array
      required:
      - description
      - id
      - name
      - scopes
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user_organizationRoles_inner:
      example:
        organizationId: organizationId
        roleId: roleId
        roleName: roleName
      properties:
        organizationId:
          type: string
        roleId:
          type: string
        roleName:
          type: string
      required:
      - organizationId
      - roleId
      - roleName
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_user:
      example:
        isSuspended: true
        profile:
          website: website
          zoneinfo: zoneinfo
          birthdate: birthdate
          address:
            country: country
            streetAddress: streetAddress
            formatted: formatted
            postalCode: postalCode
            locality: locality
            region: region
          gender: gender
          preferredUsername: preferredUsername
          familyName: familyName
          givenName: givenName
          profile: profile
          nickname: nickname
          middleName: middleName
          locale: locale
        roles:
        - name: name
          description: description
          id: id
          scopes:
          - resourceId: resourceId
            resource:
              indicator: indicator
              isDefault: true
              tenantId: tenantId
              name: name
              accessTokenTtl: 5.962133916683182
              id: id
            name: name
            description: description
            id: id
          - resourceId: resourceId
            resource:
              indicator: indicator
              isDefault: true
              tenantId: tenantId
              name: name
              accessTokenTtl: 5.962133916683182
              id: id
            name: name
            description: description
            id: id
        - name: name
          description: description
          id: id
          scopes:
          - resourceId: resourceId
            resource:
              indicator: indicator
              isDefault: true
              tenantId: tenantId
              name: name
              accessTokenTtl: 5.962133916683182
              id: id
            name: name
            description: description
            id: id
          - resourceId: resourceId
            resource:
              indicator: indicator
              isDefault: true
              tenantId: tenantId
              name: name
              accessTokenTtl: 5.962133916683182
              id: id
            name: name
            description: description
            id: id
        mfaVerificationFactors:
        - Totp
        - Totp
        customData: "{}"
        avatar: avatar
        hasPassword: true
        organizationRoles:
        - organizationId: organizationId
          roleId: roleId
          roleName: roleName
        - organizationId: organizationId
          roleId: roleId
          roleName: roleName
        primaryPhone: primaryPhone
        createdAt: 6.027456183070403
        identities:
          key:
            details: "{}"
            userId: userId
        lastSignInAt: 0.8008281904610115
        name: name
        ssoIdentities:
        - identityId: identityId
          detail: "{}"
          issuer: issuer
        - identityId: identityId
          detail: "{}"
          issuer: issuer
        organizations:
        - name: name
          description: description
          id: id
        - name: name
          description: description
          id: id
        id: id
        applicationId: applicationId
        primaryEmail: primaryEmail
        username: username
        updatedAt: 1.4658129805029452
      properties:
        id:
          maxLength: 12
          minLength: 1
          type: string
        username:
          maxLength: 128
          nullable: true
          type: string
        primaryEmail:
          maxLength: 128
          nullable: true
          type: string
        primaryPhone:
          maxLength: 128
          nullable: true
          type: string
        name:
          maxLength: 128
          nullable: true
          type: string
        avatar:
          maxLength: 2048
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        identities:
          additionalProperties:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
          type: object
        lastSignInAt:
          nullable: true
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
        profile:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
        applicationId:
          maxLength: 21
          nullable: true
          type: string
        isSuspended:
          type: boolean
        hasPassword:
          type: boolean
        ssoIdentities:
          items:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_ssoIdentities_inner'
          type: array
        mfaVerificationFactors:
          items:
            enum:
            - Totp
            - WebAuthn
            - BackupCode
            type: string
          type: array
        roles:
          items:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner'
          type: array
        organizations:
          items:
            $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response_organizationScopes_inner'
          type: array
        organizationRoles:
          items:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_organizationRoles_inner'
          type: array
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample_grant:
      example:
        type: type
        subjectTokenContext: "{}"
      properties:
        type:
          format: '"urn:ietf:params:oauth:grant-type:token-exchange"'
          type: string
        subjectTokenContext:
          description: arbitrary
          type: object
      type: object
    GetJwtCustomizer_200_response_oneOf_contextSample:
      example:
        grant:
          type: type
          subjectTokenContext: "{}"
        user:
          isSuspended: true
          profile:
            website: website
            zoneinfo: zoneinfo
            birthdate: birthdate
            address:
              country: country
              streetAddress: streetAddress
              formatted: formatted
              postalCode: postalCode
              locality: locality
              region: region
            gender: gender
            preferredUsername: preferredUsername
            familyName: familyName
            givenName: givenName
            profile: profile
            nickname: nickname
            middleName: middleName
            locale: locale
          roles:
          - name: name
            description: description
            id: id
            scopes:
            - resourceId: resourceId
              resource:
                indicator: indicator
                isDefault: true
                tenantId: tenantId
                name: name
                accessTokenTtl: 5.962133916683182
                id: id
              name: name
              description: description
              id: id
            - resourceId: resourceId
              resource:
                indicator: indicator
                isDefault: true
                tenantId: tenantId
                name: name
                accessTokenTtl: 5.962133916683182
                id: id
              name: name
              description: description
              id: id
          - name: name
            description: description
            id: id
            scopes:
            - resourceId: resourceId
              resource:
                indicator: indicator
                isDefault: true
                tenantId: tenantId
                name: name
                accessTokenTtl: 5.962133916683182
                id: id
              name: name
              description: description
              id: id
            - resourceId: resourceId
              resource:
                indicator: indicator
                isDefault: true
                tenantId: tenantId
                name: name
                accessTokenTtl: 5.962133916683182
                id: id
              name: name
              description: description
              id: id
          mfaVerificationFactors:
          - Totp
          - Totp
          customData: "{}"
          avatar: avatar
          hasPassword: true
          organizationRoles:
          - organizationId: organizationId
            roleId: roleId
            roleName: roleName
          - organizationId: organizationId
            roleId: roleId
            roleName: roleName
          primaryPhone: primaryPhone
          createdAt: 6.027456183070403
          identities:
            key:
              details: "{}"
              userId: userId
          lastSignInAt: 0.8008281904610115
          name: name
          ssoIdentities:
          - identityId: identityId
            detail: "{}"
            issuer: issuer
          - identityId: identityId
            detail: "{}"
            issuer: issuer
          organizations:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
          id: id
          applicationId: applicationId
          primaryEmail: primaryEmail
          username: username
          updatedAt: 1.4658129805029452
      properties:
        user:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user'
        grant:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_grant'
      required:
      - user
      type: object
    GetJwtCustomizer_200_response_oneOf_tokenSample_aud:
      oneOf:
      - type: string
      - items:
          type: string
        type: array
    GetJwtCustomizer_200_response_oneOf_tokenSample:
      example:
        aud: GetJwtCustomizer_200_response_oneOf_tokenSample_aud
        accountId: accountId
        expiresWithSession: true
        clientId: clientId
        grantId: grantId
        kind: kind
        scope: scope
        sessionUid: sessionUid
        gty: gty
        jti: jti
        sid: sid
      properties:
        jti:
          type: string
        aud:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_tokenSample_aud'
        scope:
          type: string
        clientId:
          type: string
        accountId:
          type: string
        expiresWithSession:
          type: boolean
        grantId:
          type: string
        gty:
          type: string
        sessionUid:
          type: string
        sid:
          type: string
        kind:
          format: '"AccessToken"'
          type: string
      type: object
    GetJwtCustomizer_200_response_oneOf:
      example:
        tokenSample:
          aud: GetJwtCustomizer_200_response_oneOf_tokenSample_aud
          accountId: accountId
          expiresWithSession: true
          clientId: clientId
          grantId: grantId
          kind: kind
          scope: scope
          sessionUid: sessionUid
          gty: gty
          jti: jti
          sid: sid
        contextSample:
          grant:
            type: type
            subjectTokenContext: "{}"
          user:
            isSuspended: true
            profile:
              website: website
              zoneinfo: zoneinfo
              birthdate: birthdate
              address:
                country: country
                streetAddress: streetAddress
                formatted: formatted
                postalCode: postalCode
                locality: locality
                region: region
              gender: gender
              preferredUsername: preferredUsername
              familyName: familyName
              givenName: givenName
              profile: profile
              nickname: nickname
              middleName: middleName
              locale: locale
            roles:
            - name: name
              description: description
              id: id
              scopes:
              - resourceId: resourceId
                resource:
                  indicator: indicator
                  isDefault: true
                  tenantId: tenantId
                  name: name
                  accessTokenTtl: 5.962133916683182
                  id: id
                name: name
                description: description
                id: id
              - resourceId: resourceId
                resource:
                  indicator: indicator
                  isDefault: true
                  tenantId: tenantId
                  name: name
                  accessTokenTtl: 5.962133916683182
                  id: id
                name: name
                description: description
                id: id
            - name: name
              description: description
              id: id
              scopes:
              - resourceId: resourceId
                resource:
                  indicator: indicator
                  isDefault: true
                  tenantId: tenantId
                  name: name
                  accessTokenTtl: 5.962133916683182
                  id: id
                name: name
                description: description
                id: id
              - resourceId: resourceId
                resource:
                  indicator: indicator
                  isDefault: true
                  tenantId: tenantId
                  name: name
                  accessTokenTtl: 5.962133916683182
                  id: id
                name: name
                description: description
                id: id
            mfaVerificationFactors:
            - Totp
            - Totp
            customData: "{}"
            avatar: avatar
            hasPassword: true
            organizationRoles:
            - organizationId: organizationId
              roleId: roleId
              roleName: roleName
            - organizationId: organizationId
              roleId: roleId
              roleName: roleName
            primaryPhone: primaryPhone
            createdAt: 6.027456183070403
            identities:
              key:
                details: "{}"
                userId: userId
            lastSignInAt: 0.8008281904610115
            name: name
            ssoIdentities:
            - identityId: identityId
              detail: "{}"
              issuer: issuer
            - identityId: identityId
              detail: "{}"
              issuer: issuer
            organizations:
            - name: name
              description: description
              id: id
            - name: name
              description: description
              id: id
            id: id
            applicationId: applicationId
            primaryEmail: primaryEmail
            username: username
            updatedAt: 1.4658129805029452
        environmentVariables:
          key: environmentVariables
        script: script
      properties:
        script:
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          type: object
        contextSample:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample'
        tokenSample:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_tokenSample'
      required:
      - script
      type: object
    GetJwtCustomizer_200_response_oneOf_1_tokenSample:
      properties:
        jti:
          type: string
        aud:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_tokenSample_aud'
        scope:
          type: string
        clientId:
          type: string
        kind:
          format: '"ClientCredentials"'
          type: string
      type: object
    GetJwtCustomizer_200_response_oneOf_1:
      properties:
        script:
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          type: object
        contextSample:
          description: arbitrary
          type: object
        tokenSample:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_1_tokenSample'
      required:
      - script
      type: object
    GetJwtCustomizer_200_response:
      oneOf:
      - $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf'
      - $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_1'
    UpsertJwtCustomizer_request:
      example: {}
      properties:
        script:
          description: The script of the JWT customizer.
        environmentVariables:
          description: The environment variables for the JWT customizer.
        contextSample:
          description: The sample context for the JWT customizer script testing purpose.
        tokenSample:
          description: The sample raw token payload for the JWT customizer script
            testing purpose.
    ListJwtCustomizers_200_response_inner_oneOf:
      example:
        value:
          tokenSample:
            aud: GetJwtCustomizer_200_response_oneOf_tokenSample_aud
            accountId: accountId
            expiresWithSession: true
            clientId: clientId
            grantId: grantId
            kind: kind
            scope: scope
            sessionUid: sessionUid
            gty: gty
            jti: jti
            sid: sid
          contextSample:
            grant:
              type: type
              subjectTokenContext: "{}"
            user:
              isSuspended: true
              profile:
                website: website
                zoneinfo: zoneinfo
                birthdate: birthdate
                address:
                  country: country
                  streetAddress: streetAddress
                  formatted: formatted
                  postalCode: postalCode
                  locality: locality
                  region: region
                gender: gender
                preferredUsername: preferredUsername
                familyName: familyName
                givenName: givenName
                profile: profile
                nickname: nickname
                middleName: middleName
                locale: locale
              roles:
              - name: name
                description: description
                id: id
                scopes:
                - resourceId: resourceId
                  resource:
                    indicator: indicator
                    isDefault: true
                    tenantId: tenantId
                    name: name
                    accessTokenTtl: 5.962133916683182
                    id: id
                  name: name
                  description: description
                  id: id
                - resourceId: resourceId
                  resource:
                    indicator: indicator
                    isDefault: true
                    tenantId: tenantId
                    name: name
                    accessTokenTtl: 5.962133916683182
                    id: id
                  name: name
                  description: description
                  id: id
              - name: name
                description: description
                id: id
                scopes:
                - resourceId: resourceId
                  resource:
                    indicator: indicator
                    isDefault: true
                    tenantId: tenantId
                    name: name
                    accessTokenTtl: 5.962133916683182
                    id: id
                  name: name
                  description: description
                  id: id
                - resourceId: resourceId
                  resource:
                    indicator: indicator
                    isDefault: true
                    tenantId: tenantId
                    name: name
                    accessTokenTtl: 5.962133916683182
                    id: id
                  name: name
                  description: description
                  id: id
              mfaVerificationFactors:
              - Totp
              - Totp
              customData: "{}"
              avatar: avatar
              hasPassword: true
              organizationRoles:
              - organizationId: organizationId
                roleId: roleId
                roleName: roleName
              - organizationId: organizationId
                roleId: roleId
                roleName: roleName
              primaryPhone: primaryPhone
              createdAt: 6.027456183070403
              identities:
                key:
                  details: "{}"
                  userId: userId
              lastSignInAt: 0.8008281904610115
              name: name
              ssoIdentities:
              - identityId: identityId
                detail: "{}"
                issuer: issuer
              - identityId: identityId
                detail: "{}"
                issuer: issuer
              organizations:
              - name: name
                description: description
                id: id
              - name: name
                description: description
                id: id
              id: id
              applicationId: applicationId
              primaryEmail: primaryEmail
              username: username
              updatedAt: 1.4658129805029452
          environmentVariables:
            key: environmentVariables
          script: script
        key: key
      properties:
        key:
          format: '"jwt.accessToken"'
          type: string
        value:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf'
      required:
      - key
      - value
      type: object
    ListJwtCustomizers_200_response_inner_oneOf_1:
      properties:
        key:
          format: '"jwt.clientCredentials"'
          type: string
        value:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_1'
      required:
      - key
      - value
      type: object
    ListJwtCustomizers_200_response_inner:
      oneOf:
      - $ref: '#/components/schemas/ListJwtCustomizers_200_response_inner_oneOf'
      - $ref: '#/components/schemas/ListJwtCustomizers_200_response_inner_oneOf_1'
    TestJwtCustomizer_request_payload:
      properties:
        script:
          description: The code snippet of the JWT customizer.
        environmentVariables:
          description: The environment variables for the JWT customizer.
        contextSample:
          description: The sample context for the JWT customizer script testing purpose.
        tokenSample:
          description: The sample token payload for the JWT customizer script testing
            purpose.
    TestJwtCustomizer_request_oneOf:
      properties:
        tokenType:
          format: '"access-token"'
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          type: object
        script:
          type: string
        token:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_tokenSample'
        context:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample'
      required:
      - context
      - script
      - token
      - tokenType
      type: object
    TestJwtCustomizer_request_oneOf_1:
      properties:
        tokenType:
          format: '"client-credentials"'
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          type: object
        script:
          type: string
        token:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_1_tokenSample'
      required:
      - script
      - token
      - tokenType
      type: object
    TestJwtCustomizer_request:
      oneOf:
      - $ref: '#/components/schemas/TestJwtCustomizer_request_oneOf'
      - $ref: '#/components/schemas/TestJwtCustomizer_request_oneOf_1'
      properties:
        tokenType:
          description: The token type to test the JWT customizer for.
        payload:
          $ref: '#/components/schemas/TestJwtCustomizer_request_payload'
    ListConnectors_200_response_inner_metadata:
      example:
        logoDark: logoDark
        name: "{}"
        logo: logo
        target: target
      properties:
        target:
          type: string
        name:
          description: Validator function
          type: object
        logo:
          type: string
        logoDark:
          nullable: true
          type: string
      type: object
    ListConnectors_200_response_inner_formItems_inner_oneOf_selectItems_inner:
      example:
        title: title
        value: value
      properties:
        value:
          type: string
        title:
          type: string
      required:
      - title
      - value
      type: object
    ListConnectors_200_response_inner_formItems_inner_oneOf_showConditions_inner:
      example:
        expectValue: {}
        targetKey: targetKey
      properties:
        targetKey:
          type: string
        expectValue:
          example: {}
      required:
      - targetKey
      type: object
    ListConnectors_200_response_inner_formItems_inner_oneOf:
      example:
        isConfidential: true
        selectItems:
        - title: title
          value: value
        - title: title
          value: value
        defaultValue: {}
        tooltip: tooltip
        description: description
        label: label
        placeholder: placeholder
        type: type
        showConditions:
        - expectValue: {}
          targetKey: targetKey
        - expectValue: {}
          targetKey: targetKey
        key: key
        required: true
      properties:
        type:
          format: '"Select"'
          type: string
        selectItems:
          items:
            $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf_selectItems_inner'
          type: array
        key:
          type: string
        label:
          type: string
        placeholder:
          type: string
        required:
          type: boolean
        defaultValue:
          example: {}
        showConditions:
          items:
            $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf_showConditions_inner'
          type: array
        description:
          type: string
        tooltip:
          type: string
        isConfidential:
          type: boolean
      required:
      - key
      - label
      - selectItems
      - type
      type: object
    ListConnectors_200_response_inner_formItems_inner_oneOf_1_selectItems_inner:
      properties:
        value:
          type: string
      required:
      - value
      type: object
    ListConnectors_200_response_inner_formItems_inner_oneOf_1:
      properties:
        type:
          format: '"MultiSelect"'
          type: string
        selectItems:
          items:
            $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf_1_selectItems_inner'
          type: array
        key:
          type: string
        label:
          type: string
        placeholder:
          type: string
        required:
          type: boolean
        defaultValue:
          example: {}
        showConditions:
          items:
            $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf_showConditions_inner'
          type: array
        description:
          type: string
        tooltip:
          type: string
        isConfidential:
          type: boolean
      required:
      - key
      - label
      - selectItems
      - type
      type: object
    ListConnectors_200_response_inner_formItems_inner_oneOf_2:
      properties:
        type:
          enum:
          - Text
          - Number
          - MultilineText
          - Switch
          - Json
          type: string
        key:
          type: string
        label:
          type: string
        placeholder:
          type: string
        required:
          type: boolean
        defaultValue:
          example: {}
        showConditions:
          items:
            $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf_showConditions_inner'
          type: array
        description:
          type: string
        tooltip:
          type: string
        isConfidential:
          type: boolean
      required:
      - key
      - label
      - type
      type: object
    ListConnectors_200_response_inner_formItems_inner:
      oneOf:
      - $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf'
      - $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf_1'
      - $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner_oneOf_2'
    ListConnectors_200_response_inner:
      example:
        metadata:
          logoDark: logoDark
          name: "{}"
          logo: logo
          target: target
        connectorId: connectorId
        usage: 0.8008281904610115
        description: "{}"
        customData:
          key: {}
        readme: readme
        type: Email
        isDemo: true
        platform: Native
        target: target
        fromEmail: fromEmail
        logoDark: logoDark
        isStandard: true
        formItems:
        - isConfidential: true
          selectItems:
          - title: title
            value: value
          - title: title
            value: value
          defaultValue: {}
          tooltip: tooltip
          description: description
          label: label
          placeholder: placeholder
          type: type
          showConditions:
          - expectValue: {}
            targetKey: targetKey
          - expectValue: {}
            targetKey: targetKey
          key: key
          required: true
        - isConfidential: true
          selectItems:
          - title: title
            value: value
          - title: title
            value: value
          defaultValue: {}
          tooltip: tooltip
          description: description
          label: label
          placeholder: placeholder
          type: type
          showConditions:
          - expectValue: {}
            targetKey: targetKey
          - expectValue: {}
            targetKey: targetKey
          key: key
          required: true
        name: "{}"
        logo: logo
        configTemplate: configTemplate
        id: id
        syncProfile: true
        config: "{}"
        extraInfo:
          key: {}
      properties:
        id:
          type: string
        syncProfile:
          type: boolean
        config:
          description: arbitrary
          type: object
        metadata:
          $ref: '#/components/schemas/ListConnectors_200_response_inner_metadata'
        connectorId:
          maxLength: 128
          minLength: 1
          type: string
        target:
          type: string
        name:
          description: Validator function
          type: object
        description:
          description: Validator function
          type: object
        logo:
          type: string
        logoDark:
          nullable: true
          type: string
        readme:
          type: string
        configTemplate:
          type: string
        formItems:
          items:
            $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner'
          type: array
        customData:
          additionalProperties:
            example: {}
          type: object
        fromEmail:
          type: string
        platform:
          enum:
          - Native
          - Universal
          - Web
          nullable: true
          type: string
        isStandard:
          type: boolean
        type:
          enum:
          - Email
          - Sms
          - Social
          type: string
        isDemo:
          type: boolean
        extraInfo:
          additionalProperties:
            example: {}
          type: object
        usage:
          type: number
      required:
      - config
      - connectorId
      - description
      - id
      - logo
      - logoDark
      - metadata
      - name
      - platform
      - readme
      - syncProfile
      - target
      - type
      type: object
    CreateConnector_request_metadata:
      description: "Custom connector metadata, will be used to overwrite the default\
        \ connector factory metadata."
      properties:
        target:
          type: string
        name:
          description: Validator function
          type: object
        logo:
          type: string
        logoDark:
          nullable: true
          type: string
      type: object
    CreateConnector_request:
      properties:
        config:
          description: The connector config object that will be passed to the connector.
            The config object should be compatible with the connector factory.
          type: object
        connectorId:
          description: The connector factory ID for creating the connector.
          maxLength: 128
          minLength: 1
          type: string
        metadata:
          $ref: '#/components/schemas/CreateConnector_request_metadata'
        syncProfile:
          description: "Whether to sync user profile from the identity provider to\
            \ Logto at each sign-in. If `false`, the user profile will only be synced\
            \ when the user is created."
          type: boolean
        id:
          description: "The unique ID for the connector. If not provided, a random\
            \ ID will be generated."
          maxLength: 128
          minLength: 1
          type: string
      required:
      - connectorId
      type: object
    UpdateConnector_request_metadata:
      description: "Custom connector metadata, will be used to overwrite the default\
        \ connector metadata."
      properties:
        target:
          type: string
        name:
          description: Validator function
          type: object
        logo:
          type: string
        logoDark:
          nullable: true
          type: string
      type: object
    UpdateConnector_request:
      properties:
        config:
          description: The connector config object that will be passed to the connector.
            The config object should be compatible with the connector factory.
          type: object
        metadata:
          $ref: '#/components/schemas/UpdateConnector_request_metadata'
        syncProfile:
          description: "Whether to sync user profile from the identity provider to\
            \ Logto at each sign-in. If `false`, the user profile will only be synced\
            \ when the user is created."
          type: boolean
      type: object
    CreateConnectorTest_request:
      properties:
        phone:
          description: "Phone number to send test message to. If this is set, email\
            \ will be ignored."
          format: regex
          pattern: /^\d+$/
          type: string
        email:
          description: "Email address to send test message to. If phone is set, this\
            \ will be ignored."
          format: regex
          pattern: /^\S+@\S+\.\S+$/
          type: string
        config:
          description: Connector configuration object for testing.
          type: object
      required:
      - config
      type: object
    CreateConnectorAuthorizationUri_request:
      properties:
        state:
          description: A random string generated on the client side to prevent CSRF
            (Cross-Site Request Forgery) attacks.
          type: string
        redirectUri:
          description: The URI to navigate back to after the user is authenticated
            by the connected social identity provider and has granted access to the
            connector.
          type: string
      required:
      - redirectUri
      - state
      type: object
    CreateConnectorAuthorizationUri_200_response:
      example:
        redirectUri: ""
        redirectTo: http://example.com/aeiou
      properties:
        redirectTo:
          format: url
          type: string
        redirectUri:
          description: The URI to navigate for authentication and authorization in
            the connected social identity provider.
      required:
      - redirectTo
      type: object
    ListConnectorFactories_200_response_inner:
      example:
        description: "{}"
        customData:
          key: {}
        readme: readme
        type: Email
        isDemo: true
        platform: Native
        target: target
        fromEmail: fromEmail
        logoDark: logoDark
        isStandard: true
        formItems:
        - isConfidential: true
          selectItems:
          - title: title
            value: value
          - title: title
            value: value
          defaultValue: {}
          tooltip: tooltip
          description: description
          label: label
          placeholder: placeholder
          type: type
          showConditions:
          - expectValue: {}
            targetKey: targetKey
          - expectValue: {}
            targetKey: targetKey
          key: key
          required: true
        - isConfidential: true
          selectItems:
          - title: title
            value: value
          - title: title
            value: value
          defaultValue: {}
          tooltip: tooltip
          description: description
          label: label
          placeholder: placeholder
          type: type
          showConditions:
          - expectValue: {}
            targetKey: targetKey
          - expectValue: {}
            targetKey: targetKey
          key: key
          required: true
        name: "{}"
        logo: logo
        configTemplate: configTemplate
        id: id
      properties:
        type:
          enum:
          - Email
          - Sms
          - Social
          type: string
        isDemo:
          type: boolean
        id:
          type: string
        target:
          type: string
        name:
          description: Validator function
          type: object
        description:
          description: Validator function
          type: object
        logo:
          type: string
        logoDark:
          nullable: true
          type: string
        readme:
          type: string
        configTemplate:
          type: string
        formItems:
          items:
            $ref: '#/components/schemas/ListConnectors_200_response_inner_formItems_inner'
          type: array
        customData:
          additionalProperties:
            example: {}
          type: object
        fromEmail:
          type: string
        platform:
          enum:
          - Native
          - Universal
          - Web
          nullable: true
          type: string
        isStandard:
          type: boolean
      required:
      - description
      - id
      - logo
      - logoDark
      - name
      - platform
      - readme
      - target
      - type
      type: object
    ListResources_200_response_inner_scopes_inner:
      example:
        createdAt: 6.027456183070403
        resourceId: resourceId
        tenantId: tenantId
        name: name
        description: description
        id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        resourceId:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
        createdAt:
          type: number
      required:
      - createdAt
      - description
      - id
      - name
      - resourceId
      - tenantId
      type: object
    ListResources_200_response_inner:
      example:
        indicator: indicator
        isDefault: true
        tenantId: tenantId
        name: name
        accessTokenTtl: 0.8008281904610115
        id: id
        scopes:
        - createdAt: 6.027456183070403
          resourceId: resourceId
          tenantId: tenantId
          name: name
          description: description
          id: id
        - createdAt: 6.027456183070403
          resourceId: resourceId
          tenantId: tenantId
          name: name
          description: description
          id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        indicator:
          minLength: 1
          type: string
        isDefault:
          type: boolean
        accessTokenTtl:
          type: number
        scopes:
          items:
            $ref: '#/components/schemas/ListResources_200_response_inner_scopes_inner'
          type: array
      required:
      - accessTokenTtl
      - id
      - indicator
      - isDefault
      - name
      - tenantId
      type: object
    CreateResource_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The name of the resource.
          minLength: 1
          type: string
        indicator:
          description: The unique resource indicator. Should be a valid URI.
          minLength: 1
          type: string
        accessTokenTtl:
          default: 3600
          description: The access token TTL in seconds. It affects the `exp` claim
            of the access token granted for this resource.
          type: number
      required:
      - indicator
      - name
      type: object
    UpdateResource_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The updated name of the resource.
          minLength: 1
          type: string
        accessTokenTtl:
          description: The updated access token TTL in seconds.
          type: number
      type: object
    UpdateResourceIsDefault_request:
      properties:
        isDefault:
          description: The updated value of the `isDefault` property.
          type: boolean
      required:
      - isDefault
      type: object
    CreateResourceScope_request:
      properties:
        name:
          description: The name of the scope. It should be unique for the resource.
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
      required:
      - name
      type: object
    UpdateResourceScope_request:
      properties:
        name:
          description: The updated name of the scope. It should be unique for the
            resource.
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
      type: object
    GetSignInExp_200_response_color:
      description: The primary branding color for the sign-in page (both light/dark
        mode).
      example:
        isDarkModeEnabled: true
        primaryColor: primaryColor
        darkPrimaryColor: darkPrimaryColor
      properties:
        primaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
        isDarkModeEnabled:
          type: boolean
        darkPrimaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
      required:
      - darkPrimaryColor
      - isDarkModeEnabled
      - primaryColor
      type: object
    GetSignInExp_200_response_languageInfo:
      description: The language detection policy for the sign-in page.
      example:
        autoDetect: true
        fallbackLanguage: af-ZA
      properties:
        autoDetect:
          type: boolean
        fallbackLanguage:
          enum:
          - af-ZA
          - am-ET
          - ar
          - ar-AR
          - as-IN
          - az-AZ
          - be-BY
          - bg-BG
          - bn-IN
          - br-FR
          - bs-BA
          - ca-ES
          - cb-IQ
          - co-FR
          - cs-CZ
          - cx-PH
          - cy-GB
          - da-DK
          - de
          - de-DE
          - el-GR
          - en
          - en-GB
          - en-US
          - eo-EO
          - es
          - es-ES
          - es-419
          - et-EE
          - eu-ES
          - fa-IR
          - ff-NG
          - fi-FI
          - fo-FO
          - fr
          - fr-CA
          - fr-FR
          - fy-NL
          - ga-IE
          - gl-ES
          - gn-PY
          - gu-IN
          - ha-NG
          - he-IL
          - hi-IN
          - hr-HR
          - ht-HT
          - hu-HU
          - hy-AM
          - id-ID
          - ik-US
          - is-IS
          - it
          - it-IT
          - iu-CA
          - ja
          - ja-JP
          - ja-KS
          - jv-ID
          - ka-GE
          - kk-KZ
          - km-KH
          - kn-IN
          - ko
          - ko-KR
          - ku-TR
          - ky-KG
          - lo-LA
          - lt-LT
          - lv-LV
          - mg-MG
          - mk-MK
          - ml-IN
          - mn-MN
          - mr-IN
          - ms-MY
          - mt-MT
          - my-MM
          - nb-NO
          - ne-NP
          - nl-BE
          - nl-NL
          - nn-NO
          - or-IN
          - pa-IN
          - pl-PL
          - ps-AF
          - pt
          - pt-BR
          - pt-PT
          - ro-RO
          - ru
          - ru-RU
          - rw-RW
          - sc-IT
          - si-LK
          - sk-SK
          - sl-SI
          - sn-ZW
          - sq-AL
          - sr-RS
          - sv-SE
          - sw-KE
          - sy-SY
          - sz-PL
          - ta-IN
          - te-IN
          - tg-TJ
          - th-TH
          - tl-PH
          - tr
          - tr-TR
          - tt-RU
          - tz-MA
          - uk-UA
          - ur-PK
          - uz-UZ
          - vi-VN
          - zh
          - zh-CN
          - zh-HK
          - zh-MO
          - zh-TW
          - zz-TR
          type: string
      required:
      - autoDetect
      - fallbackLanguage
      type: object
    GetSignInExp_200_response_signIn_methods_inner:
      example:
        identifier: username
        password: true
        verificationCode: true
        isPasswordPrimary: true
      properties:
        identifier:
          enum:
          - username
          - email
          - phone
          type: string
        password:
          type: boolean
        verificationCode:
          type: boolean
        isPasswordPrimary:
          type: boolean
      required:
      - identifier
      - isPasswordPrimary
      - password
      - verificationCode
      type: object
    GetSignInExp_200_response_signIn:
      description: Sign-in method settings.
      example:
        methods:
        - identifier: username
          password: true
          verificationCode: true
          isPasswordPrimary: true
        - identifier: username
          password: true
          verificationCode: true
          isPasswordPrimary: true
      properties:
        methods:
          items:
            $ref: '#/components/schemas/GetSignInExp_200_response_signIn_methods_inner'
          type: array
      required:
      - methods
      type: object
    GetSignInExp_200_response_signUp:
      description: Sign-up method settings.
      example:
        password: true
        identifiers:
        - username
        - username
        verify: true
      properties:
        identifiers:
          description: Allowed identifiers when signing-up.
          items:
            enum:
            - username
            - email
            - phone
            type: string
          type: array
        password:
          description: Whether the user is required to set a password when signing-up.
          type: boolean
        verify:
          description: Whether the user is required to verify their email/phone when
            signing-up.
          type: boolean
      required:
      - identifiers
      - password
      - verify
      type: object
    GetSignInExp_200_response_socialSignIn:
      example:
        automaticAccountLinking: true
      properties:
        automaticAccountLinking:
          type: boolean
      type: object
    GetSignInExp_200_response_customUiAssets:
      example:
        createdAt: 0.8008281904610115
        id: id
      nullable: true
      properties:
        id:
          type: string
        createdAt:
          type: number
      required:
      - createdAt
      - id
      type: object
    GetSignInExp_200_response_passwordPolicy_length:
      default: {}
      example:
        min: 6.027456183070403
        max: 1.4658129805029452
      properties:
        min:
          default: 8
          type: number
        max:
          default: 256
          type: number
      required:
      - max
      - min
      type: object
    GetSignInExp_200_response_passwordPolicy_characterTypes:
      default: {}
      example:
        min: 5.962133916683182
      properties:
        min:
          default: 1
          type: number
      required:
      - min
      type: object
    GetSignInExp_200_response_passwordPolicy_rejects:
      default: {}
      example:
        userInfo: true
        pwned: true
        words:
        - words
        - words
        repetitionAndSequence: true
      properties:
        pwned:
          default: true
          type: boolean
        repetitionAndSequence:
          default: true
          type: boolean
        userInfo:
          default: true
          type: boolean
        words:
          default: []
          items:
            type: string
          type: array
      required:
      - pwned
      - repetitionAndSequence
      - userInfo
      - words
      type: object
    GetSignInExp_200_response_passwordPolicy:
      description: Password policies to adjust the password strength requirements.
      example:
        characterTypes:
          min: 5.962133916683182
        rejects:
          userInfo: true
          pwned: true
          words:
          - words
          - words
          repetitionAndSequence: true
        length:
          min: 6.027456183070403
          max: 1.4658129805029452
      properties:
        length:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy_length'
        characterTypes:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy_characterTypes'
        rejects:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy_rejects'
      type: object
    GetSignInExp_200_response_mfa:
      description: MFA settings
      example:
        factors:
        - Totp
        - Totp
        policy: UserControlled
      properties:
        factors:
          items:
            enum:
            - Totp
            - WebAuthn
            - BackupCode
            type: string
          type: array
        policy:
          enum:
          - UserControlled
          - Mandatory
          - PromptOnlyAtSignIn
          - PromptAtSignInAndSignUp
          - NoPrompt
          type: string
      required:
      - factors
      - policy
      type: object
    GetSignInExp_200_response:
      example:
        passwordPolicy:
          characterTypes:
            min: 5.962133916683182
          rejects:
            userInfo: true
            pwned: true
            words:
            - words
            - words
            repetitionAndSequence: true
          length:
            min: 6.027456183070403
            max: 1.4658129805029452
        supportWebsiteUrl: supportWebsiteUrl
        color:
          isDarkModeEnabled: true
          primaryColor: primaryColor
          darkPrimaryColor: darkPrimaryColor
        socialSignInConnectorTargets:
        - socialSignInConnectorTargets
        - socialSignInConnectorTargets
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        mfa:
          factors:
          - Totp
          - Totp
          policy: UserControlled
        languageInfo:
          autoDetect: true
          fallbackLanguage: af-ZA
        privacyPolicyUrl: privacyPolicyUrl
        signUp:
          password: true
          identifiers:
          - username
          - username
          verify: true
        singleSignOnEnabled: true
        customUiAssets:
          createdAt: 0.8008281904610115
          id: id
        termsOfUseUrl: termsOfUseUrl
        supportEmail: supportEmail
        socialSignIn:
          automaticAccountLinking: true
        customContent:
          key: customContent
        agreeToTermsPolicy: Automatic
        unknownSessionRedirectUrl: unknownSessionRedirectUrl
        signIn:
          methods:
          - identifier: username
            password: true
            verificationCode: true
            isPasswordPrimary: true
          - identifier: username
            password: true
            verificationCode: true
            isPasswordPrimary: true
        tenantId: tenantId
        id: id
        signInMode: SignIn
        customCss: customCss
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        color:
          $ref: '#/components/schemas/GetSignInExp_200_response_color'
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        languageInfo:
          $ref: '#/components/schemas/GetSignInExp_200_response_languageInfo'
        termsOfUseUrl:
          maxLength: 2048
          nullable: true
          type: string
        privacyPolicyUrl:
          maxLength: 2048
          nullable: true
          type: string
        agreeToTermsPolicy:
          enum:
          - Automatic
          - ManualRegistrationOnly
          - Manual
          type: string
        signIn:
          $ref: '#/components/schemas/GetSignInExp_200_response_signIn'
        signUp:
          $ref: '#/components/schemas/GetSignInExp_200_response_signUp'
        socialSignIn:
          $ref: '#/components/schemas/GetSignInExp_200_response_socialSignIn'
        socialSignInConnectorTargets:
          description: "Enabled social sign-in connectors, will displayed on the sign-in\
            \ page."
          items:
            type: string
          type: array
        signInMode:
          enum:
          - SignIn
          - Register
          - SignInAndRegister
          type: string
        customCss:
          nullable: true
          type: string
        customContent:
          additionalProperties:
            type: string
          description: "Custom content to display on experience flow pages. the page\
            \ pathname will be the config key, the content will be the config value."
          type: object
        customUiAssets:
          $ref: '#/components/schemas/GetSignInExp_200_response_customUiAssets'
        passwordPolicy:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy'
        mfa:
          $ref: '#/components/schemas/GetSignInExp_200_response_mfa'
        singleSignOnEnabled:
          type: boolean
        supportEmail:
          description: The support email address to display on the error pages.
          nullable: true
          type: string
        supportWebsiteUrl:
          description: The support website URL to display on the error pages.
          nullable: true
          type: string
        unknownSessionRedirectUrl:
          description: The fallback URL to redirect users when the sign-in session
            does not exist or unknown. Client should initiates a new authentication
            flow after the redirection.
          nullable: true
          type: string
      required:
      - agreeToTermsPolicy
      - branding
      - color
      - customContent
      - customCss
      - customUiAssets
      - id
      - languageInfo
      - mfa
      - passwordPolicy
      - privacyPolicyUrl
      - signIn
      - signInMode
      - signUp
      - singleSignOnEnabled
      - socialSignIn
      - socialSignInConnectorTargets
      - supportEmail
      - supportWebsiteUrl
      - tenantId
      - termsOfUseUrl
      - unknownSessionRedirectUrl
      type: object
    UpdateSignInExp_request_color:
      description: Specify the primary branding color for the sign-in page (both light/dark
        mode).
      properties:
        primaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
        isDarkModeEnabled:
          type: boolean
        darkPrimaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
      required:
      - darkPrimaryColor
      - isDarkModeEnabled
      - primaryColor
      type: object
    UpdateSignInExp_request_languageInfo:
      description: Control the language detection policy for the sign-in page.
      properties:
        autoDetect:
          type: boolean
        fallbackLanguage:
          enum:
          - af-ZA
          - am-ET
          - ar
          - ar-AR
          - as-IN
          - az-AZ
          - be-BY
          - bg-BG
          - bn-IN
          - br-FR
          - bs-BA
          - ca-ES
          - cb-IQ
          - co-FR
          - cs-CZ
          - cx-PH
          - cy-GB
          - da-DK
          - de
          - de-DE
          - el-GR
          - en
          - en-GB
          - en-US
          - eo-EO
          - es
          - es-ES
          - es-419
          - et-EE
          - eu-ES
          - fa-IR
          - ff-NG
          - fi-FI
          - fo-FO
          - fr
          - fr-CA
          - fr-FR
          - fy-NL
          - ga-IE
          - gl-ES
          - gn-PY
          - gu-IN
          - ha-NG
          - he-IL
          - hi-IN
          - hr-HR
          - ht-HT
          - hu-HU
          - hy-AM
          - id-ID
          - ik-US
          - is-IS
          - it
          - it-IT
          - iu-CA
          - ja
          - ja-JP
          - ja-KS
          - jv-ID
          - ka-GE
          - kk-KZ
          - km-KH
          - kn-IN
          - ko
          - ko-KR
          - ku-TR
          - ky-KG
          - lo-LA
          - lt-LT
          - lv-LV
          - mg-MG
          - mk-MK
          - ml-IN
          - mn-MN
          - mr-IN
          - ms-MY
          - mt-MT
          - my-MM
          - nb-NO
          - ne-NP
          - nl-BE
          - nl-NL
          - nn-NO
          - or-IN
          - pa-IN
          - pl-PL
          - ps-AF
          - pt
          - pt-BR
          - pt-PT
          - ro-RO
          - ru
          - ru-RU
          - rw-RW
          - sc-IT
          - si-LK
          - sk-SK
          - sl-SI
          - sn-ZW
          - sq-AL
          - sr-RS
          - sv-SE
          - sw-KE
          - sy-SY
          - sz-PL
          - ta-IN
          - te-IN
          - tg-TJ
          - th-TH
          - tl-PH
          - tr
          - tr-TR
          - tt-RU
          - tz-MA
          - uk-UA
          - ur-PK
          - uz-UZ
          - vi-VN
          - zh
          - zh-CN
          - zh-HK
          - zh-MO
          - zh-TW
          - zz-TR
          type: string
      required:
      - autoDetect
      - fallbackLanguage
      type: object
    UpdateSignInExp_request_signIn:
      description: Sign-in method settings
      properties:
        methods:
          items:
            $ref: '#/components/schemas/GetSignInExp_200_response_signIn_methods_inner'
          type: array
      required:
      - methods
      type: object
    UpdateSignInExp_request_signUp:
      description: Sign-up method settings
      properties:
        identifiers:
          description: Specify allowed identifiers when signing-up.
          items:
            enum:
            - username
            - email
            - phone
            type: string
          type: array
        password:
          description: Whether the user is required to set a password when signing-up.
          type: boolean
        verify:
          description: Whether the user is required to verify their email/phone when
            signing-up.
          type: boolean
      required:
      - identifiers
      - password
      - verify
      type: object
    UpdateSignInExp_request_termsOfUseUrl:
      oneOf:
      - format: url
        nullable: true
        type: string
      - format: empty
        type: string
    UpdateSignInExp_request_supportEmail:
      description: The support email address to display on the error pages.
      oneOf:
      - format: email
        nullable: true
        type: string
      - format: empty
        type: string
    UpdateSignInExp_request_supportWebsiteUrl:
      description: The support website URL to display on the error pages.
      oneOf:
      - format: url
        nullable: true
        type: string
      - format: empty
        type: string
    UpdateSignInExp_request_unknownSessionRedirectUrl:
      description: The fallback URL to redirect users when the sign-in session does
        not exist or unknown. Client should initiate a new authentication flow after
        the redirection.
      oneOf:
      - format: url
        nullable: true
        type: string
      - format: empty
        type: string
    UpdateSignInExp_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        color:
          $ref: '#/components/schemas/UpdateSignInExp_request_color'
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        languageInfo:
          $ref: '#/components/schemas/UpdateSignInExp_request_languageInfo'
        agreeToTermsPolicy:
          enum:
          - Automatic
          - ManualRegistrationOnly
          - Manual
          type: string
        signIn:
          $ref: '#/components/schemas/UpdateSignInExp_request_signIn'
        signUp:
          $ref: '#/components/schemas/UpdateSignInExp_request_signUp'
        socialSignIn:
          $ref: '#/components/schemas/GetSignInExp_200_response_socialSignIn'
        socialSignInConnectorTargets:
          description: Specify the social sign-in connectors to display on the sign-in
            page.
          items:
            type: string
          type: array
        signInMode:
          enum:
          - SignIn
          - Register
          - SignInAndRegister
          type: string
        customCss:
          nullable: true
          type: string
        customContent:
          additionalProperties:
            type: string
          description: "Custom content to display on experience flow pages. the page\
            \ pathname will be the config key, the content will be the config value."
          type: object
        customUiAssets:
          $ref: '#/components/schemas/GetSignInExp_200_response_customUiAssets'
        passwordPolicy:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy'
        mfa:
          $ref: '#/components/schemas/GetSignInExp_200_response_mfa'
        singleSignOnEnabled:
          type: boolean
        termsOfUseUrl:
          $ref: '#/components/schemas/UpdateSignInExp_request_termsOfUseUrl'
        privacyPolicyUrl:
          $ref: '#/components/schemas/UpdateSignInExp_request_termsOfUseUrl'
        supportEmail:
          $ref: '#/components/schemas/UpdateSignInExp_request_supportEmail'
        supportWebsiteUrl:
          $ref: '#/components/schemas/UpdateSignInExp_request_supportWebsiteUrl'
        unknownSessionRedirectUrl:
          $ref: '#/components/schemas/UpdateSignInExp_request_unknownSessionRedirectUrl'
      type: object
    UpdateSignInExp_200_response_color:
      example:
        isDarkModeEnabled: true
        primaryColor: primaryColor
        darkPrimaryColor: darkPrimaryColor
      properties:
        primaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
        isDarkModeEnabled:
          type: boolean
        darkPrimaryColor:
          format: regex
          pattern: "/^#[\\da-f]{3}([\\da-f]{3})?$/i"
          type: string
      required:
      - darkPrimaryColor
      - isDarkModeEnabled
      - primaryColor
      type: object
    UpdateSignInExp_200_response_languageInfo:
      example:
        autoDetect: true
        fallbackLanguage: af-ZA
      properties:
        autoDetect:
          type: boolean
        fallbackLanguage:
          enum:
          - af-ZA
          - am-ET
          - ar
          - ar-AR
          - as-IN
          - az-AZ
          - be-BY
          - bg-BG
          - bn-IN
          - br-FR
          - bs-BA
          - ca-ES
          - cb-IQ
          - co-FR
          - cs-CZ
          - cx-PH
          - cy-GB
          - da-DK
          - de
          - de-DE
          - el-GR
          - en
          - en-GB
          - en-US
          - eo-EO
          - es
          - es-ES
          - es-419
          - et-EE
          - eu-ES
          - fa-IR
          - ff-NG
          - fi-FI
          - fo-FO
          - fr
          - fr-CA
          - fr-FR
          - fy-NL
          - ga-IE
          - gl-ES
          - gn-PY
          - gu-IN
          - ha-NG
          - he-IL
          - hi-IN
          - hr-HR
          - ht-HT
          - hu-HU
          - hy-AM
          - id-ID
          - ik-US
          - is-IS
          - it
          - it-IT
          - iu-CA
          - ja
          - ja-JP
          - ja-KS
          - jv-ID
          - ka-GE
          - kk-KZ
          - km-KH
          - kn-IN
          - ko
          - ko-KR
          - ku-TR
          - ky-KG
          - lo-LA
          - lt-LT
          - lv-LV
          - mg-MG
          - mk-MK
          - ml-IN
          - mn-MN
          - mr-IN
          - ms-MY
          - mt-MT
          - my-MM
          - nb-NO
          - ne-NP
          - nl-BE
          - nl-NL
          - nn-NO
          - or-IN
          - pa-IN
          - pl-PL
          - ps-AF
          - pt
          - pt-BR
          - pt-PT
          - ro-RO
          - ru
          - ru-RU
          - rw-RW
          - sc-IT
          - si-LK
          - sk-SK
          - sl-SI
          - sn-ZW
          - sq-AL
          - sr-RS
          - sv-SE
          - sw-KE
          - sy-SY
          - sz-PL
          - ta-IN
          - te-IN
          - tg-TJ
          - th-TH
          - tl-PH
          - tr
          - tr-TR
          - tt-RU
          - tz-MA
          - uk-UA
          - ur-PK
          - uz-UZ
          - vi-VN
          - zh
          - zh-CN
          - zh-HK
          - zh-MO
          - zh-TW
          - zz-TR
          type: string
      required:
      - autoDetect
      - fallbackLanguage
      type: object
    UpdateSignInExp_200_response_signIn:
      example:
        methods:
        - identifier: username
          password: true
          verificationCode: true
          isPasswordPrimary: true
        - identifier: username
          password: true
          verificationCode: true
          isPasswordPrimary: true
      properties:
        methods:
          items:
            $ref: '#/components/schemas/GetSignInExp_200_response_signIn_methods_inner'
          type: array
      required:
      - methods
      type: object
    UpdateSignInExp_200_response_signUp:
      example:
        password: true
        identifiers:
        - username
        - username
        verify: true
      properties:
        identifiers:
          items:
            enum:
            - username
            - email
            - phone
            type: string
          type: array
        password:
          type: boolean
        verify:
          type: boolean
      required:
      - identifiers
      - password
      - verify
      type: object
    UpdateSignInExp_200_response_passwordPolicy:
      example:
        characterTypes:
          min: 5.962133916683182
        rejects:
          userInfo: true
          pwned: true
          words:
          - words
          - words
          repetitionAndSequence: true
        length:
          min: 6.027456183070403
          max: 1.4658129805029452
      properties:
        length:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy_length'
        characterTypes:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy_characterTypes'
        rejects:
          $ref: '#/components/schemas/GetSignInExp_200_response_passwordPolicy_rejects'
      type: object
    UpdateSignInExp_200_response_mfa:
      example:
        factors:
        - Totp
        - Totp
        policy: UserControlled
      properties:
        factors:
          items:
            enum:
            - Totp
            - WebAuthn
            - BackupCode
            type: string
          type: array
        policy:
          enum:
          - UserControlled
          - Mandatory
          - PromptOnlyAtSignIn
          - PromptAtSignInAndSignUp
          - NoPrompt
          type: string
      required:
      - factors
      - policy
      type: object
    UpdateSignInExp_200_response:
      example:
        passwordPolicy:
          characterTypes:
            min: 5.962133916683182
          rejects:
            userInfo: true
            pwned: true
            words:
            - words
            - words
            repetitionAndSequence: true
          length:
            min: 6.027456183070403
            max: 1.4658129805029452
        supportWebsiteUrl: supportWebsiteUrl
        color:
          isDarkModeEnabled: true
          primaryColor: primaryColor
          darkPrimaryColor: darkPrimaryColor
        socialSignInConnectorTargets:
        - socialSignInConnectorTargets
        - socialSignInConnectorTargets
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        mfa:
          factors:
          - Totp
          - Totp
          policy: UserControlled
        languageInfo:
          autoDetect: true
          fallbackLanguage: af-ZA
        privacyPolicyUrl: privacyPolicyUrl
        signUp:
          password: true
          identifiers:
          - username
          - username
          verify: true
        singleSignOnEnabled: true
        customUiAssets:
          createdAt: 0.8008281904610115
          id: id
        termsOfUseUrl: termsOfUseUrl
        supportEmail: supportEmail
        socialSignIn:
          automaticAccountLinking: true
        customContent:
          key: customContent
        agreeToTermsPolicy: Automatic
        unknownSessionRedirectUrl: unknownSessionRedirectUrl
        signIn:
          methods:
          - identifier: username
            password: true
            verificationCode: true
            isPasswordPrimary: true
          - identifier: username
            password: true
            verificationCode: true
            isPasswordPrimary: true
        tenantId: tenantId
        id: id
        signInMode: SignIn
        customCss: customCss
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        color:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_color'
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        languageInfo:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_languageInfo'
        termsOfUseUrl:
          maxLength: 2048
          nullable: true
          type: string
        privacyPolicyUrl:
          maxLength: 2048
          nullable: true
          type: string
        agreeToTermsPolicy:
          enum:
          - Automatic
          - ManualRegistrationOnly
          - Manual
          type: string
        signIn:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_signIn'
        signUp:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_signUp'
        socialSignIn:
          $ref: '#/components/schemas/GetSignInExp_200_response_socialSignIn'
        socialSignInConnectorTargets:
          items:
            type: string
          type: array
        signInMode:
          enum:
          - SignIn
          - Register
          - SignInAndRegister
          type: string
        customCss:
          nullable: true
          type: string
        customContent:
          additionalProperties:
            type: string
          type: object
        customUiAssets:
          $ref: '#/components/schemas/GetSignInExp_200_response_customUiAssets'
        passwordPolicy:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_passwordPolicy'
        mfa:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_mfa'
        singleSignOnEnabled:
          type: boolean
        supportEmail:
          nullable: true
          type: string
        supportWebsiteUrl:
          nullable: true
          type: string
        unknownSessionRedirectUrl:
          nullable: true
          type: string
      required:
      - agreeToTermsPolicy
      - branding
      - color
      - customContent
      - customCss
      - customUiAssets
      - id
      - languageInfo
      - mfa
      - passwordPolicy
      - privacyPolicyUrl
      - signIn
      - signInMode
      - signUp
      - singleSignOnEnabled
      - socialSignIn
      - socialSignInConnectorTargets
      - supportEmail
      - supportWebsiteUrl
      - tenantId
      - termsOfUseUrl
      - unknownSessionRedirectUrl
      type: object
    CheckPasswordWithDefaultSignInExperience_request:
      properties:
        password:
          description: The password to check.
          type: string
        userId:
          description: The user ID to check the password for. It is required if rejects
            user info is enabled in the password policy.
          type: string
      required:
      - password
      type: object
    CheckPasswordWithDefaultSignInExperience_200_response_oneOf:
      example:
        result: true
      properties:
        result:
          format: "true"
          type: boolean
      required:
      - result
      type: object
    CheckPasswordWithDefaultSignInExperience_200_response_oneOf_1_issues_inner:
      properties:
        code:
          type: string
        interpolation:
          additionalProperties:
            example: {}
          type: object
      required:
      - code
      type: object
    CheckPasswordWithDefaultSignInExperience_200_response_oneOf_1:
      properties:
        result:
          format: "false"
          type: boolean
        issues:
          items:
            $ref: '#/components/schemas/CheckPasswordWithDefaultSignInExperience_200_response_oneOf_1_issues_inner'
          type: array
      required:
      - issues
      - result
      type: object
    CheckPasswordWithDefaultSignInExperience_200_response:
      oneOf:
      - $ref: '#/components/schemas/CheckPasswordWithDefaultSignInExperience_200_response_oneOf'
      - $ref: '#/components/schemas/CheckPasswordWithDefaultSignInExperience_200_response_oneOf_1'
    UploadCustomUiAssets_request:
      properties:
        file:
          description: "The zip file containing custom web assets such as HTML, CSS,\
            \ and JavaScript files."
    UploadCustomUiAssets_200_response:
      example:
        customUiAssetId: customUiAssetId
      properties:
        customUiAssetId:
          type: string
      required:
      - customUiAssetId
      type: object
    GetUser_200_response_ssoIdentities_inner:
      example:
        createdAt: 5.962133916683182
        ssoConnectorId: ssoConnectorId
        identityId: identityId
        tenantId: tenantId
        id: id
        detail: "{}"
        userId: userId
        issuer: issuer
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        userId:
          maxLength: 12
          minLength: 1
          type: string
        issuer:
          maxLength: 256
          minLength: 1
          type: string
        identityId:
          maxLength: 128
          minLength: 1
          type: string
        detail:
          description: arbitrary
          type: object
        createdAt:
          type: number
        ssoConnectorId:
          maxLength: 128
          minLength: 1
          type: string
      required:
      - createdAt
      - detail
      - id
      - identityId
      - issuer
      - ssoConnectorId
      - tenantId
      - userId
      type: object
    GetUser_200_response:
      example:
        isSuspended: true
        profile:
          website: website
          zoneinfo: zoneinfo
          birthdate: birthdate
          address:
            country: country
            streetAddress: streetAddress
            formatted: formatted
            postalCode: postalCode
            locality: locality
            region: region
          gender: gender
          preferredUsername: preferredUsername
          familyName: familyName
          givenName: givenName
          profile: profile
          nickname: nickname
          middleName: middleName
          locale: locale
        customData: "{}"
        avatar: avatar
        hasPassword: true
        primaryPhone: primaryPhone
        createdAt: 6.027456183070403
        identities:
          key:
            details: "{}"
            userId: userId
        lastSignInAt: 0.8008281904610115
        name: name
        ssoIdentities:
        - createdAt: 5.962133916683182
          ssoConnectorId: ssoConnectorId
          identityId: identityId
          tenantId: tenantId
          id: id
          detail: "{}"
          userId: userId
          issuer: issuer
        - createdAt: 5.962133916683182
          ssoConnectorId: ssoConnectorId
          identityId: identityId
          tenantId: tenantId
          id: id
          detail: "{}"
          userId: userId
          issuer: issuer
        id: id
        applicationId: applicationId
        primaryEmail: primaryEmail
        username: username
        updatedAt: 1.4658129805029452
      properties:
        id:
          maxLength: 12
          minLength: 1
          type: string
        username:
          maxLength: 128
          nullable: true
          type: string
        primaryEmail:
          maxLength: 128
          nullable: true
          type: string
        primaryPhone:
          maxLength: 128
          nullable: true
          type: string
        name:
          maxLength: 128
          nullable: true
          type: string
        avatar:
          maxLength: 2048
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        identities:
          additionalProperties:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
          type: object
        lastSignInAt:
          nullable: true
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
        profile:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
        applicationId:
          maxLength: 21
          nullable: true
          type: string
        isSuspended:
          type: boolean
        hasPassword:
          type: boolean
        ssoIdentities:
          description: List of SSO identities associated with the user. Only available
            when the `includeSsoIdentities` query parameter is provided with a truthy
            value.
          items:
            $ref: '#/components/schemas/GetUser_200_response_ssoIdentities_inner'
          type: array
      required:
      - applicationId
      - avatar
      - createdAt
      - customData
      - id
      - identities
      - isSuspended
      - lastSignInAt
      - name
      - primaryEmail
      - primaryPhone
      - profile
      - updatedAt
      - username
      type: object
    UpdateUser_request_username:
      description: Updated username for the user. It should be unique across all users.
      nullable: true
      oneOf:
      - format: regex
        pattern: "/^[A-Z_a-z]\\w*$/"
        type: string
      - format: empty
        type: string
    UpdateUser_request_primaryEmail:
      description: Updated primary email address for the user. It should be unique
        across all users.
      nullable: true
      oneOf:
      - format: regex
        pattern: /^\S+@\S+\.\S+$/
        type: string
      - format: empty
        type: string
    UpdateUser_request_primaryPhone:
      description: Updated primary phone number for the user. It should be unique
        across all users.
      nullable: true
      oneOf:
      - format: regex
        pattern: /^\d+$/
        type: string
      - format: empty
        type: string
    UpdateUser_request_name:
      nullable: true
      oneOf:
      - type: string
      - format: empty
        type: string
    UpdateUser_request_avatar:
      nullable: true
      oneOf:
      - format: url
        type: string
      - format: empty
        type: string
    UpdateUser_request:
      properties:
        username:
          $ref: '#/components/schemas/UpdateUser_request_username'
        primaryEmail:
          $ref: '#/components/schemas/UpdateUser_request_primaryEmail'
        primaryPhone:
          $ref: '#/components/schemas/UpdateUser_request_primaryPhone'
        name:
          $ref: '#/components/schemas/UpdateUser_request_name'
        avatar:
          $ref: '#/components/schemas/UpdateUser_request_avatar'
        customData:
          description: |-
            Custom data object to update for the given user ID. Note this will replace the entire custom data object.

            If you want to perform a partial update, use the `PATCH /api/users/{userId}/custom-data` endpoint instead.
          type: object
        profile:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
      type: object
    UpdateUser_200_response:
      example:
        isSuspended: true
        profile:
          website: website
          zoneinfo: zoneinfo
          birthdate: birthdate
          address:
            country: country
            streetAddress: streetAddress
            formatted: formatted
            postalCode: postalCode
            locality: locality
            region: region
          gender: gender
          preferredUsername: preferredUsername
          familyName: familyName
          givenName: givenName
          profile: profile
          nickname: nickname
          middleName: middleName
          locale: locale
        customData: "{}"
        avatar: avatar
        hasPassword: true
        primaryPhone: primaryPhone
        createdAt: 6.027456183070403
        identities:
          key:
            details: "{}"
            userId: userId
        lastSignInAt: 0.8008281904610115
        name: name
        ssoIdentities:
        - createdAt: 5.962133916683182
          ssoConnectorId: ssoConnectorId
          identityId: identityId
          tenantId: tenantId
          id: id
          detail: "{}"
          userId: userId
          issuer: issuer
        - createdAt: 5.962133916683182
          ssoConnectorId: ssoConnectorId
          identityId: identityId
          tenantId: tenantId
          id: id
          detail: "{}"
          userId: userId
          issuer: issuer
        id: id
        applicationId: applicationId
        primaryEmail: primaryEmail
        username: username
        updatedAt: 1.4658129805029452
      properties:
        id:
          maxLength: 12
          minLength: 1
          type: string
        username:
          maxLength: 128
          nullable: true
          type: string
        primaryEmail:
          maxLength: 128
          nullable: true
          type: string
        primaryPhone:
          maxLength: 128
          nullable: true
          type: string
        name:
          maxLength: 128
          nullable: true
          type: string
        avatar:
          maxLength: 2048
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        identities:
          additionalProperties:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
          type: object
        lastSignInAt:
          nullable: true
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
        profile:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
        applicationId:
          maxLength: 21
          nullable: true
          type: string
        isSuspended:
          type: boolean
        hasPassword:
          type: boolean
        ssoIdentities:
          items:
            $ref: '#/components/schemas/GetUser_200_response_ssoIdentities_inner'
          type: array
      required:
      - applicationId
      - avatar
      - createdAt
      - customData
      - id
      - identities
      - isSuspended
      - lastSignInAt
      - name
      - primaryEmail
      - primaryPhone
      - profile
      - updatedAt
      - username
      type: object
    UpdateUserCustomData_request:
      properties:
        customData:
          description: Partial custom data object to update for the given user ID.
          type: object
      required:
      - customData
      type: object
    UpdateUserProfile_request_profile:
      description: Partial profile object to update for the given user ID.
      properties:
        familyName:
          type: string
        givenName:
          type: string
        middleName:
          type: string
        nickname:
          type: string
        preferredUsername:
          type: string
        profile:
          type: string
        website:
          type: string
        gender:
          type: string
        birthdate:
          type: string
        zoneinfo:
          type: string
        locale:
          type: string
        address:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile_address'
      type: object
    UpdateUserProfile_request:
      properties:
        profile:
          $ref: '#/components/schemas/UpdateUserProfile_request_profile'
      required:
      - profile
      type: object
    CreateUser_request:
      description: User data to create a new user. All properties are optional.
      properties:
        primaryPhone:
          description: Primary phone number for the user. It should be unique across
            all users.
          format: regex
          pattern: /^\d+$/
          type: string
        primaryEmail:
          description: Primary email address for the user. It should be unique across
            all users.
          format: regex
          pattern: /^\S+@\S+\.\S+$/
          type: string
        username:
          description: Username for the user. It should be unique across all users.
          format: regex
          pattern: "/^[A-Z_a-z]\\w*$/"
          type: string
        password:
          description: Plain text password for the user.
          minLength: 1
          type: string
        passwordDigest:
          description: "In case you already have the password digests and not the\
            \ passwords, you can use them for the newly created user via this property.\
            \ The value should be generated with one of the supported algorithms.\
            \ The algorithm can be specified using the `passwordAlgorithm` property."
          type: string
        passwordAlgorithm:
          description: "The hash algorithm used for the password. It should be one\
            \ of the supported algorithms: argon2, md5, sha1, sha256. Should the encryption\
            \ algorithm differ from argon2, it will automatically be upgraded to argon2\
            \ upon the user's next sign-in."
          enum:
          - Argon2i
          - Argon2id
          - Argon2d
          - SHA1
          - SHA256
          - MD5
          - Bcrypt
          type: string
        name:
          type: string
        avatar:
          $ref: '#/components/schemas/UpdateUser_request_avatar'
        customData:
          description: arbitrary
          type: object
        profile:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
      type: object
    UpdateUserPassword_request:
      properties:
        password:
          description: New password for the user.
          minLength: 1
          type: string
      required:
      - password
      type: object
    VerifyUserPassword_request:
      properties:
        password:
          description: Password to verify.
          minLength: 1
          type: string
      required:
      - password
      type: object
    GetUserHasPassword_200_response:
      example:
        hasPassword: true
      properties:
        hasPassword:
          type: boolean
      required:
      - hasPassword
      type: object
    UpdateUserIsSuspended_request:
      properties:
        isSuspended:
          description: New suspension status for the user.
          type: boolean
      required:
      - isSuspended
      type: object
    ReplaceUserIdentity_request:
      properties:
        userId:
          description: The user's social identity ID.
          type: string
        details:
          description: The user's social identity details.
          type: object
      required:
      - userId
      type: object
    CreateUserIdentity_request:
      properties:
        connectorId:
          description: The Logto connector ID.
          type: string
        connectorData:
          additionalProperties:
            example: {}
          description: "A json object constructed from the url query params returned\
            \ by the social platform. Typically it contains `code`, `state` and `redirectUri`\
            \ fields."
          type: object
      required:
      - connectorData
      - connectorId
      type: object
    ListUserMfaVerifications_200_response_inner:
      example:
        createdAt: createdAt
        agent: agent
        remainCodes: 0.8008281904610115
        id: id
        type: Totp
      properties:
        id:
          type: string
        createdAt:
          type: string
        type:
          enum:
          - Totp
          - WebAuthn
          - BackupCode
          type: string
        agent:
          type: string
        remainCodes:
          type: number
      required:
      - createdAt
      - id
      - type
      type: object
    CreateUserMfaVerification_request_oneOf:
      properties:
        type:
          format: '"Totp"'
          type: string
        secret:
          type: string
      required:
      - type
      type: object
    CreateUserMfaVerification_request_oneOf_1:
      properties:
        type:
          format: '"BackupCode"'
          type: string
        codes:
          items:
            type: string
          type: array
      required:
      - type
      type: object
    CreateUserMfaVerification_request_oneOf_2:
      properties:
        type:
          description: The type of MFA verification to create.
          type: string
        secret:
          description: "The secret for the MFA verification, if not provided, a new\
            \ secret will be generated."
          type: string
      required:
      - type
      type: object
    CreateUserMfaVerification_request_oneOf_3:
      properties:
        type:
          description: The type of MFA verification to create.
          type: string
        codes:
          description: "The backup codes for the MFA verification, if not provided,\
            \ a new group of backup codes will be generated."
          items:
            type: string
          type: array
      required:
      - type
      type: object
    CreateUserMfaVerification_request:
      oneOf:
      - $ref: '#/components/schemas/CreateUserMfaVerification_request_oneOf'
      - $ref: '#/components/schemas/CreateUserMfaVerification_request_oneOf_1'
      - $ref: '#/components/schemas/CreateUserMfaVerification_request_oneOf_2'
      - $ref: '#/components/schemas/CreateUserMfaVerification_request_oneOf_3'
    CreateUserMfaVerification_200_response_oneOf:
      example:
        secret: secret
        type: type
        secretQrCode: secretQrCode
      properties:
        type:
          format: '"Totp"'
          type: string
        secret:
          type: string
        secretQrCode:
          type: string
      required:
      - secret
      - secretQrCode
      - type
      type: object
    CreateUserMfaVerification_200_response_oneOf_1:
      properties:
        type:
          format: '"BackupCode"'
          type: string
        codes:
          items:
            type: string
          type: array
      required:
      - codes
      - type
      type: object
    CreateUserMfaVerification_200_response:
      oneOf:
      - $ref: '#/components/schemas/CreateUserMfaVerification_200_response_oneOf'
      - $ref: '#/components/schemas/CreateUserMfaVerification_200_response_oneOf_1'
    ListUserPersonalAccessTokens_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        tenantId: tenantId
        name: name
        userId: userId
        value: value
        expiresAt: 6.027456183070403
      properties:
        tenantId:
          maxLength: 21
          type: string
        userId:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        value:
          maxLength: 64
          minLength: 1
          type: string
        createdAt:
          type: number
        expiresAt:
          nullable: true
          type: number
      required:
      - createdAt
      - expiresAt
      - name
      - tenantId
      - userId
      - value
      type: object
    CreateUserPersonalAccessToken_request:
      properties:
        name:
          description: The personal access token name. Must be unique within the user.
          maxLength: 256
          minLength: 1
          type: string
        expiresAt:
          description: "The epoch time in milliseconds when the token will expire.\
            \ If not provided, the token will never expire."
          nullable: true
          type: number
      required:
      - name
      type: object
    UpdateUserPersonalAccessToken_request:
      properties:
        name:
          description: The token name to update. Must be unique within the user.
          maxLength: 256
          minLength: 1
          type: string
      required:
      - name
      type: object
    ListLogs_200_response_inner_payload_error:
      oneOf:
      - additionalProperties:
          example: {}
        type: object
      - type: string
    ListLogs_200_response_inner_payload:
      example:
        result: Success
        ip: ip
        userAgent: userAgent
        sessionId: sessionId
        error:
          key: {}
        applicationId: applicationId
        params:
          key: {}
        userId: userId
        key: key
      properties:
        key:
          type: string
        result:
          enum:
          - Success
          - Error
          type: string
        error:
          $ref: '#/components/schemas/ListLogs_200_response_inner_payload_error'
        ip:
          type: string
        userAgent:
          type: string
        userId:
          type: string
        applicationId:
          type: string
        sessionId:
          type: string
        params:
          additionalProperties:
            example: {}
          type: object
      required:
      - key
      - result
      type: object
    ListLogs_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        payload:
          result: Success
          ip: ip
          userAgent: userAgent
          sessionId: sessionId
          error:
            key: {}
          applicationId: applicationId
          params:
            key: {}
          userId: userId
          key: key
        tenantId: tenantId
        id: id
        key: key
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        key:
          maxLength: 128
          minLength: 1
          type: string
        payload:
          $ref: '#/components/schemas/ListLogs_200_response_inner_payload'
        createdAt:
          type: number
      required:
      - createdAt
      - id
      - key
      - payload
      - tenantId
      type: object
    ListRoles_200_response_inner_featuredUsers_inner:
      example:
        name: name
        id: id
        avatar: avatar
      properties:
        id:
          maxLength: 12
          minLength: 1
          type: string
        avatar:
          maxLength: 2048
          nullable: true
          type: string
        name:
          maxLength: 128
          nullable: true
          type: string
      required:
      - avatar
      - id
      - name
      type: object
    ListRoles_200_response_inner_featuredApplications_inner:
      example:
        name: name
        id: id
        type: Native
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        type:
          enum:
          - Native
          - SPA
          - Traditional
          - MachineToMachine
          - Protected
          - SAML
          type: string
      required:
      - id
      - name
      - type
      type: object
    ListRoles_200_response_inner:
      example:
        isDefault: true
        tenantId: tenantId
        name: name
        description: description
        usersCount: 0.8008281904610115
        id: id
        featuredApplications:
        - name: name
          id: id
          type: Native
        - name: name
          id: id
          type: Native
        type: User
        applicationsCount: 6.027456183070403
        featuredUsers:
        - name: name
          id: id
          avatar: avatar
        - name: name
          id: id
          avatar: avatar
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 128
          minLength: 1
          type: string
        type:
          enum:
          - User
          - MachineToMachine
          type: string
        isDefault:
          type: boolean
        usersCount:
          type: number
        featuredUsers:
          items:
            $ref: '#/components/schemas/ListRoles_200_response_inner_featuredUsers_inner'
          type: array
        applicationsCount:
          type: number
        featuredApplications:
          items:
            $ref: '#/components/schemas/ListRoles_200_response_inner_featuredApplications_inner'
          type: array
      required:
      - applicationsCount
      - description
      - featuredApplications
      - featuredUsers
      - id
      - isDefault
      - name
      - tenantId
      - type
      - usersCount
      type: object
    CreateRole_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The name of the role. It should be unique within the tenant.
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 128
          minLength: 1
          type: string
        type:
          description: The type of the role. It cannot be changed after creation.
          enum:
          - User
          - MachineToMachine
          type: string
        isDefault:
          type: boolean
        scopeIds:
          description: The initial API resource scopes assigned to the role.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - description
      - name
      type: object
    UpdateRole_request:
      properties:
        name:
          description: The name of the role. It should be unique within the tenant.
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 128
          minLength: 1
          type: string
        isDefault:
          type: boolean
      type: object
    CreateRoleUser_request:
      properties:
        userIds:
          description: An array of user IDs to be assigned.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - userIds
      type: object
    CreateRoleApplication_request:
      properties:
        applicationIds:
          description: An array of application IDs to be assigned.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - applicationIds
      type: object
    ListRoleScopes_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        resourceId: resourceId
        resource:
          indicator: indicator
          isDefault: true
          tenantId: tenantId
          name: name
          accessTokenTtl: 5.962133916683182
          id: id
        tenantId: tenantId
        name: name
        description: description
        id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        resourceId:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        description:
          nullable: true
          type: string
        createdAt:
          type: number
        resource:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_roles_inner_scopes_inner_resource'
      required:
      - createdAt
      - description
      - id
      - name
      - resource
      - resourceId
      - tenantId
      type: object
    CreateRoleScope_request:
      properties:
        scopeIds:
          description: An array of API resource scope IDs to be linked.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - scopeIds
      type: object
    GetTotalUserCount_200_response:
      example:
        totalUserCount: 0.8008281904610115
      properties:
        totalUserCount:
          type: number
      required:
      - totalUserCount
      type: object
    GetNewUserCounts_200_response_today:
      example:
        count: 0.8008281904610115
        delta: 6.027456183070403
      properties:
        count:
          type: number
        delta:
          type: number
      required:
      - count
      - delta
      type: object
    GetNewUserCounts_200_response:
      example:
        today:
          count: 0.8008281904610115
          delta: 6.027456183070403
        last7Days:
          count: 0.8008281904610115
          delta: 6.027456183070403
      properties:
        today:
          $ref: '#/components/schemas/GetNewUserCounts_200_response_today'
        last7Days:
          $ref: '#/components/schemas/GetNewUserCounts_200_response_today'
      required:
      - last7Days
      - today
      type: object
    GetActiveUserCounts_200_response_dauCurve_inner:
      example:
        date: date
        count: 0.8008281904610115
      properties:
        date:
          type: string
        count:
          type: number
      required:
      - count
      - date
      type: object
    GetActiveUserCounts_200_response:
      example:
        mau:
          count: 0.8008281904610115
          delta: 6.027456183070403
        dauCurve:
        - date: date
          count: 0.8008281904610115
        - date: date
          count: 0.8008281904610115
        dau:
          count: 0.8008281904610115
          delta: 6.027456183070403
        wau:
          count: 0.8008281904610115
          delta: 6.027456183070403
      properties:
        dauCurve:
          items:
            $ref: '#/components/schemas/GetActiveUserCounts_200_response_dauCurve_inner'
          type: array
        dau:
          $ref: '#/components/schemas/GetNewUserCounts_200_response_today'
        wau:
          $ref: '#/components/schemas/GetNewUserCounts_200_response_today'
        mau:
          $ref: '#/components/schemas/GetNewUserCounts_200_response_today'
      required:
      - dau
      - dauCurve
      - mau
      - wau
      type: object
    ListCustomPhrases_200_response_inner:
      example:
        tenantId: tenantId
        translation:
          input:
            username: Username
            password: Password
          action:
            sign_in: Sign In
            continue: Continue
        id: id
        languageTag: languageTag
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        languageTag:
          maxLength: 16
          minLength: 1
          type: string
        translation:
          $ref: '#/components/schemas/TranslationObject'
      required:
      - id
      - languageTag
      - tenantId
      - translation
      type: object
    ListHooks_200_response_inner_config:
      example:
        headers:
          key: headers
        retries: 0.8008281904610115
        url: url
      properties:
        url:
          type: string
        headers:
          additionalProperties:
            type: string
          type: object
        retries:
          type: number
      required:
      - url
      type: object
    ListHooks_200_response_inner_executionStats:
      example:
        requestCount: 5.962133916683182
        successCount: 1.4658129805029452
      properties:
        successCount:
          type: number
        requestCount:
          type: number
      required:
      - requestCount
      - successCount
      type: object
    ListHooks_200_response_inner:
      example:
        createdAt: 6.027456183070403
        executionStats:
          requestCount: 5.962133916683182
          successCount: 1.4658129805029452
        tenantId: tenantId
        name: name
        signingKey: signingKey
        id: id
        event: PostRegister
        config:
          headers:
            key: headers
          retries: 0.8008281904610115
          url: url
        events:
        - PostRegister
        - PostRegister
        enabled: true
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          type: string
        event:
          enum:
          - PostRegister
          - PostSignIn
          - PostResetPassword
          - User.Created
          - User.Deleted
          - User.Data.Updated
          - User.SuspensionStatus.Updated
          - Role.Created
          - Role.Deleted
          - Role.Data.Updated
          - Role.Scopes.Updated
          - Scope.Created
          - Scope.Deleted
          - Scope.Data.Updated
          - Organization.Created
          - Organization.Deleted
          - Organization.Data.Updated
          - Organization.Membership.Updated
          - OrganizationRole.Created
          - OrganizationRole.Deleted
          - OrganizationRole.Data.Updated
          - OrganizationRole.Scopes.Updated
          - OrganizationScope.Created
          - OrganizationScope.Deleted
          - OrganizationScope.Data.Updated
          nullable: true
          type: string
        events:
          items:
            enum:
            - PostRegister
            - PostSignIn
            - PostResetPassword
            - User.Created
            - User.Deleted
            - User.Data.Updated
            - User.SuspensionStatus.Updated
            - Role.Created
            - Role.Deleted
            - Role.Data.Updated
            - Role.Scopes.Updated
            - Scope.Created
            - Scope.Deleted
            - Scope.Data.Updated
            - Organization.Created
            - Organization.Deleted
            - Organization.Data.Updated
            - Organization.Membership.Updated
            - OrganizationRole.Created
            - OrganizationRole.Deleted
            - OrganizationRole.Data.Updated
            - OrganizationRole.Scopes.Updated
            - OrganizationScope.Created
            - OrganizationScope.Deleted
            - OrganizationScope.Data.Updated
            type: string
          type: array
        config:
          $ref: '#/components/schemas/ListHooks_200_response_inner_config'
        signingKey:
          maxLength: 64
          type: string
        enabled:
          type: boolean
        createdAt:
          type: number
        executionStats:
          $ref: '#/components/schemas/ListHooks_200_response_inner_executionStats'
      required:
      - config
      - createdAt
      - enabled
      - event
      - events
      - id
      - name
      - signingKey
      - tenantId
      type: object
    CreateHook_request_config:
      properties:
        url:
          type: string
        headers:
          additionalProperties:
            type: string
          type: object
        retries:
          deprecated: true
          description: Now the retry times is fixed to 3. Keep for backward compatibility.
          type: number
      required:
      - url
      type: object
    CreateHook_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The name of the hook.
          maxLength: 256
          minLength: 1
          type: string
        event:
          deprecated: true
          description: Use `events` instead.
          enum:
          - PostRegister
          - PostSignIn
          - PostResetPassword
          - User.Created
          - User.Deleted
          - User.Data.Updated
          - User.SuspensionStatus.Updated
          - Role.Created
          - Role.Deleted
          - Role.Data.Updated
          - Role.Scopes.Updated
          - Scope.Created
          - Scope.Deleted
          - Scope.Data.Updated
          - Organization.Created
          - Organization.Deleted
          - Organization.Data.Updated
          - Organization.Membership.Updated
          - OrganizationRole.Created
          - OrganizationRole.Deleted
          - OrganizationRole.Data.Updated
          - OrganizationRole.Scopes.Updated
          - OrganizationScope.Created
          - OrganizationScope.Deleted
          - OrganizationScope.Data.Updated
          type: string
        events:
          description: An array of hook events.
          items:
            enum:
            - PostRegister
            - PostSignIn
            - PostResetPassword
            - User.Created
            - User.Deleted
            - User.Data.Updated
            - User.SuspensionStatus.Updated
            - Role.Created
            - Role.Deleted
            - Role.Data.Updated
            - Role.Scopes.Updated
            - Scope.Created
            - Scope.Deleted
            - Scope.Data.Updated
            - Organization.Created
            - Organization.Deleted
            - Organization.Data.Updated
            - Organization.Membership.Updated
            - OrganizationRole.Created
            - OrganizationRole.Deleted
            - OrganizationRole.Data.Updated
            - OrganizationRole.Scopes.Updated
            - OrganizationScope.Created
            - OrganizationScope.Deleted
            - OrganizationScope.Data.Updated
            type: string
          type: array
        config:
          $ref: '#/components/schemas/CreateHook_request_config'
        enabled:
          type: boolean
        createdAt:
          type: number
      required:
      - config
      type: object
    CreateHook_201_response:
      example:
        createdAt: 0.8008281904610115
        tenantId: tenantId
        name: name
        signingKey: signingKey
        id: id
        event: PostRegister
        config:
          headers:
            key: headers
          retries: 0.8008281904610115
          url: url
        events:
        - PostRegister
        - PostRegister
        enabled: true
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          type: string
        event:
          enum:
          - PostRegister
          - PostSignIn
          - PostResetPassword
          - User.Created
          - User.Deleted
          - User.Data.Updated
          - User.SuspensionStatus.Updated
          - Role.Created
          - Role.Deleted
          - Role.Data.Updated
          - Role.Scopes.Updated
          - Scope.Created
          - Scope.Deleted
          - Scope.Data.Updated
          - Organization.Created
          - Organization.Deleted
          - Organization.Data.Updated
          - Organization.Membership.Updated
          - OrganizationRole.Created
          - OrganizationRole.Deleted
          - OrganizationRole.Data.Updated
          - OrganizationRole.Scopes.Updated
          - OrganizationScope.Created
          - OrganizationScope.Deleted
          - OrganizationScope.Data.Updated
          nullable: true
          type: string
        events:
          items:
            enum:
            - PostRegister
            - PostSignIn
            - PostResetPassword
            - User.Created
            - User.Deleted
            - User.Data.Updated
            - User.SuspensionStatus.Updated
            - Role.Created
            - Role.Deleted
            - Role.Data.Updated
            - Role.Scopes.Updated
            - Scope.Created
            - Scope.Deleted
            - Scope.Data.Updated
            - Organization.Created
            - Organization.Deleted
            - Organization.Data.Updated
            - Organization.Membership.Updated
            - OrganizationRole.Created
            - OrganizationRole.Deleted
            - OrganizationRole.Data.Updated
            - OrganizationRole.Scopes.Updated
            - OrganizationScope.Created
            - OrganizationScope.Deleted
            - OrganizationScope.Data.Updated
            type: string
          type: array
        config:
          $ref: '#/components/schemas/ListHooks_200_response_inner_config'
        signingKey:
          maxLength: 64
          type: string
        enabled:
          type: boolean
        createdAt:
          type: number
      required:
      - config
      - createdAt
      - enabled
      - event
      - events
      - id
      - name
      - signingKey
      - tenantId
      type: object
    UpdateHook_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The updated name of the hook.
          maxLength: 256
          minLength: 1
          type: string
        event:
          deprecated: true
          description: Use `events` instead.
          enum:
          - PostRegister
          - PostSignIn
          - PostResetPassword
          - User.Created
          - User.Deleted
          - User.Data.Updated
          - User.SuspensionStatus.Updated
          - Role.Created
          - Role.Deleted
          - Role.Data.Updated
          - Role.Scopes.Updated
          - Scope.Created
          - Scope.Deleted
          - Scope.Data.Updated
          - Organization.Created
          - Organization.Deleted
          - Organization.Data.Updated
          - Organization.Membership.Updated
          - OrganizationRole.Created
          - OrganizationRole.Deleted
          - OrganizationRole.Data.Updated
          - OrganizationRole.Scopes.Updated
          - OrganizationScope.Created
          - OrganizationScope.Deleted
          - OrganizationScope.Data.Updated
          nullable: true
          type: string
        events:
          description: An array of updated hook events.
          items:
            enum:
            - PostRegister
            - PostSignIn
            - PostResetPassword
            - User.Created
            - User.Deleted
            - User.Data.Updated
            - User.SuspensionStatus.Updated
            - Role.Created
            - Role.Deleted
            - Role.Data.Updated
            - Role.Scopes.Updated
            - Scope.Created
            - Scope.Deleted
            - Scope.Data.Updated
            - Organization.Created
            - Organization.Deleted
            - Organization.Data.Updated
            - Organization.Membership.Updated
            - OrganizationRole.Created
            - OrganizationRole.Deleted
            - OrganizationRole.Data.Updated
            - OrganizationRole.Scopes.Updated
            - OrganizationScope.Created
            - OrganizationScope.Deleted
            - OrganizationScope.Data.Updated
            type: string
          type: array
        config:
          $ref: '#/components/schemas/CreateHook_request_config'
        enabled:
          type: boolean
        createdAt:
          type: number
      type: object
    ListHookRecentLogs_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        payload:
          result: Success
          ip: ip
          userAgent: userAgent
          sessionId: sessionId
          error:
            key: {}
          applicationId: applicationId
          params:
            key: {}
          userId: userId
          key: key
        id: id
        key: key
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        key:
          maxLength: 128
          minLength: 1
          type: string
        payload:
          $ref: '#/components/schemas/ListLogs_200_response_inner_payload'
        createdAt:
          type: number
      required:
      - createdAt
      - id
      - key
      - payload
      type: object
    CreateHookTest_request_config:
      description: The hook configuration for testing.
      properties:
        url:
          type: string
        headers:
          additionalProperties:
            type: string
          type: object
        retries:
          deprecated: true
          description: Now the retry times is fixed to 3. Keep for backward compatibility.
          type: number
      required:
      - url
      type: object
    CreateHookTest_request:
      properties:
        events:
          description: An array of hook events for testing.
          items:
            enum:
            - PostRegister
            - PostSignIn
            - PostResetPassword
            - User.Created
            - User.Deleted
            - User.Data.Updated
            - User.SuspensionStatus.Updated
            - Role.Created
            - Role.Deleted
            - Role.Data.Updated
            - Role.Scopes.Updated
            - Scope.Created
            - Scope.Deleted
            - Scope.Data.Updated
            - Organization.Created
            - Organization.Deleted
            - Organization.Data.Updated
            - Organization.Membership.Updated
            - OrganizationRole.Created
            - OrganizationRole.Deleted
            - OrganizationRole.Data.Updated
            - OrganizationRole.Scopes.Updated
            - OrganizationScope.Created
            - OrganizationScope.Deleted
            - OrganizationScope.Data.Updated
            type: string
          type: array
        config:
          $ref: '#/components/schemas/CreateHookTest_request_config'
        event:
          deprecated: true
          description: Use `events` instead.
      required:
      - config
      - events
      type: object
    CreateVerificationCode_request_oneOf:
      properties:
        email:
          format: regex
          pattern: /^\S+@\S+\.\S+$/
          type: string
      required:
      - email
      type: object
    CreateVerificationCode_request_oneOf_1:
      properties:
        phone:
          format: regex
          pattern: /^\d+$/
          type: string
      required:
      - phone
      type: object
    CreateVerificationCode_request:
      oneOf:
      - $ref: '#/components/schemas/CreateVerificationCode_request_oneOf'
      - $ref: '#/components/schemas/CreateVerificationCode_request_oneOf_1'
    VerifyVerificationCode_request_oneOf:
      properties:
        email:
          format: regex
          pattern: /^\S+@\S+\.\S+$/
          type: string
        verificationCode:
          minLength: 1
          type: string
      required:
      - email
      - verificationCode
      type: object
    VerifyVerificationCode_request_oneOf_1:
      properties:
        phone:
          format: regex
          pattern: /^\d+$/
          type: string
        verificationCode:
          minLength: 1
          type: string
      required:
      - phone
      - verificationCode
      type: object
    VerifyVerificationCode_request:
      oneOf:
      - $ref: '#/components/schemas/VerifyVerificationCode_request_oneOf'
      - $ref: '#/components/schemas/VerifyVerificationCode_request_oneOf_1'
    GetUserAssetServiceStatus_200_response_status:
      oneOf:
      - format: '"ready"'
        type: string
      - format: '"not_configured"'
        type: string
    GetUserAssetServiceStatus_200_response:
      example:
        maxUploadFileSize: 0.8008281904610115
        allowUploadMimeTypes:
        - image/jpeg
        - image/jpeg
        status: GetUserAssetServiceStatus_200_response_status
      properties:
        status:
          $ref: '#/components/schemas/GetUserAssetServiceStatus_200_response_status'
        allowUploadMimeTypes:
          items:
            enum:
            - image/jpeg
            - image/png
            - image/gif
            - image/vnd.microsoft.icon
            - image/x-icon
            - image/svg+xml
            - image/tiff
            - image/webp
            - image/bmp
            - application/zip
            type: string
          type: array
        maxUploadFileSize:
          type: number
      required:
      - status
      type: object
    CreateUserAsset_200_response:
      example:
        url: url
      properties:
        url:
          type: string
      required:
      - url
      type: object
    ListDomains_200_response_inner:
      example:
        domain: domain
        dnsRecords:
        - name: name
          type: type
          value: value
        - name: name
          type: type
          value: value
        errorMessage: errorMessage
        id: id
        status: PendingVerification
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        domain:
          maxLength: 256
          minLength: 1
          type: string
        status:
          enum:
          - PendingVerification
          - PendingSsl
          - Active
          - Error
          type: string
        errorMessage:
          maxLength: 1024
          nullable: true
          type: string
        dnsRecords:
          items:
            $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata_customDomains_inner_dnsRecords_inner'
          type: array
      required:
      - dnsRecords
      - domain
      - errorMessage
      - id
      - status
      type: object
    CreateDomain_request:
      properties:
        domain:
          description: "The domain name, e.g. `example.com`."
          maxLength: 256
          minLength: 1
          type: string
      required:
      - domain
      type: object
    GetOrganizationRole_200_response:
      example:
        tenantId: tenantId
        name: name
        description: description
        id: id
        type: User
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 256
          nullable: true
          type: string
        type:
          enum:
          - User
          - MachineToMachine
          type: string
      required:
      - description
      - id
      - name
      - tenantId
      - type
      type: object
    UpdateOrganizationRole_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          description: The updated name of the organization role. It must be unique
            within the organization template.
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: The updated description of the organization role.
          maxLength: 256
          nullable: true
          type: string
        type:
          enum:
          - User
          - MachineToMachine
          type: string
      type: object
    ListOrganizationRoles_200_response_inner_resourceScopes_inner:
      example:
        resource:
          name: name
          id: id
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        resource:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_organizationRoles_inner'
      required:
      - id
      - name
      - resource
      type: object
    ListOrganizationRoles_200_response_inner:
      example:
        resourceScopes:
        - resource:
            name: name
            id: id
          name: name
          id: id
        - resource:
            name: name
            id: id
          name: name
          id: id
        tenantId: tenantId
        name: name
        description: description
        id: id
        scopes:
        - name: name
          id: id
        - name: name
          id: id
        type: User
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 256
          nullable: true
          type: string
        type:
          enum:
          - User
          - MachineToMachine
          type: string
        scopes:
          items:
            $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_organizationRoles_inner'
          type: array
        resourceScopes:
          items:
            $ref: '#/components/schemas/ListOrganizationRoles_200_response_inner_resourceScopes_inner'
          type: array
      required:
      - description
      - id
      - name
      - resourceScopes
      - scopes
      - tenantId
      - type
      type: object
    CreateOrganizationRole_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The name of the organization role. It must be unique within
            the organization template.
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: The description of the organization role.
          maxLength: 256
          nullable: true
          type: string
        type:
          enum:
          - User
          - MachineToMachine
          type: string
        organizationScopeIds:
          default: []
          description: An array of organization scope IDs to be assigned to the organization
            role.
          items:
            type: string
          type: array
        resourceScopeIds:
          default: []
          description: An array of resource scope IDs to be assigned to the organization
            role.
          items:
            type: string
          type: array
      required:
      - name
      - organizationScopeIds
      - resourceScopeIds
      type: object
    ListOrganizationRoleScopes_200_response_inner:
      example:
        tenantId: tenantId
        name: name
        description: description
        id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 256
          nullable: true
          type: string
      required:
      - description
      - id
      - name
      - tenantId
      type: object
    ReplaceOrganizationRoleScopes_request:
      properties:
        organizationScopeIds:
          description: An array of organization scope IDs to replace existing scopes.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationScopeIds
      type: object
    CreateOrganizationRoleScope_request:
      properties:
        organizationScopeIds:
          description: An array of organization scope IDs to be assigned. Existed
            scope IDs assignments will be ignored.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationScopeIds
      type: object
    ReplaceOrganizationRoleResourceScopes_request:
      properties:
        scopeIds:
          description: An array of resource scope IDs to replace existing scopes.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - scopeIds
      type: object
    CreateOrganizationRoleResourceScope_request:
      properties:
        scopeIds:
          description: An array of resource scope IDs to be assigned. Existed scope
            IDs assignments will be ignored.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - scopeIds
      type: object
    CreateOrganizationScope_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The name of the organization scope. It must be unique within
            the organization template.
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: The description of the organization scope.
          maxLength: 256
          nullable: true
          type: string
      required:
      - name
      type: object
    UpdateOrganizationScope_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          description: The updated name of the organization scope. It must be unique
            within the organization template.
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: The updated description of the organization scope.
          maxLength: 256
          nullable: true
          type: string
      type: object
    GetOrganizationInvitation_200_response:
      example:
        organizationId: organizationId
        acceptedUserId: acceptedUserId
        createdAt: 0.8008281904610115
        inviterId: inviterId
        tenantId: tenantId
        id: id
        expiresAt: 1.4658129805029452
        invitee: invitee
        status: Pending
        updatedAt: 6.027456183070403
        organizationRoles:
        - name: name
          id: id
        - name: name
          id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        inviterId:
          maxLength: 21
          nullable: true
          type: string
        invitee:
          maxLength: 256
          minLength: 1
          type: string
        acceptedUserId:
          maxLength: 21
          nullable: true
          type: string
        organizationId:
          maxLength: 21
          minLength: 1
          type: string
        status:
          enum:
          - Pending
          - Accepted
          - Expired
          - Revoked
          type: string
        createdAt:
          type: number
        updatedAt:
          type: number
        expiresAt:
          type: number
        organizationRoles:
          items:
            $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_organizationRoles_inner'
          type: array
      required:
      - acceptedUserId
      - createdAt
      - expiresAt
      - id
      - invitee
      - inviterId
      - organizationId
      - organizationRoles
      - status
      - tenantId
      - updatedAt
      type: object
    CreateOrganizationInvitation_request_messagePayload_oneOf:
      allOf:
      - properties:
          code:
            type: string
          link:
            type: string
        type: object
      - additionalProperties:
          type: string
        type: object
    CreateOrganizationInvitation_request_messagePayload:
      default: false
      description: "The message payload for the \"OrganizationInvitation\" template\
        \ to use when sending the invitation via email. If it is `false`, the invitation\
        \ will not be sent via email."
      oneOf:
      - $ref: '#/components/schemas/CreateOrganizationInvitation_request_messagePayload_oneOf'
      - format: "false"
        type: boolean
    CreateOrganizationInvitation_request:
      properties:
        inviterId:
          description: The ID of the user who is inviting the user to join the organization.
          maxLength: 21
          nullable: true
          type: string
        invitee:
          description: The email address of the user to invite to join the organization.
          format: email
          type: string
        organizationId:
          description: The ID of the organization to invite the user to join.
          maxLength: 21
          minLength: 1
          type: string
        expiresAt:
          description: The epoch time in milliseconds when the invitation expires.
          type: number
        organizationRoleIds:
          description: The IDs of the organization roles to assign to the user when
            they accept the invitation.
          items:
            type: string
          type: array
        messagePayload:
          $ref: '#/components/schemas/CreateOrganizationInvitation_request_messagePayload'
      required:
      - expiresAt
      - invitee
      - messagePayload
      - organizationId
      type: object
    ReplaceOrganizationInvitationStatus_request:
      properties:
        acceptedUserId:
          description: The ID of the user who accepted the organization invitation.
            Required if the status is "Accepted".
          maxLength: 21
          nullable: true
          type: string
        status:
          description: The status of the organization invitation.
          enum:
          - Accepted
          - Revoked
          type: string
      required:
      - status
      type: object
    ListOrganizations_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        tenantId: tenantId
        name: name
        description: description
        customData: "{}"
        usersCount: 6.027456183070403
        id: id
        isMfaRequired: true
        featuredUsers:
        - name: name
          id: id
          avatar: avatar
        - name: name
          id: id
          avatar: avatar
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 256
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        isMfaRequired:
          type: boolean
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        createdAt:
          type: number
        usersCount:
          type: number
        featuredUsers:
          items:
            $ref: '#/components/schemas/ListRoles_200_response_inner_featuredUsers_inner'
          type: array
      required:
      - branding
      - createdAt
      - customData
      - description
      - id
      - isMfaRequired
      - name
      - tenantId
      type: object
    CreateOrganization_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        name:
          description: The name of the organization.
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: The description of the organization.
          maxLength: 256
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        isMfaRequired:
          type: boolean
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        createdAt:
          type: number
      required:
      - name
      type: object
    UpdateOrganization_request:
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          description: The updated name of the organization.
          maxLength: 128
          minLength: 1
          type: string
        description:
          description: The updated description of the organization.
          maxLength: 256
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        isMfaRequired:
          type: boolean
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        createdAt:
          type: number
      type: object
    ListOrganizationUsers_200_response_inner:
      example:
        isSuspended: true
        profile:
          website: website
          zoneinfo: zoneinfo
          birthdate: birthdate
          address:
            country: country
            streetAddress: streetAddress
            formatted: formatted
            postalCode: postalCode
            locality: locality
            region: region
          gender: gender
          preferredUsername: preferredUsername
          familyName: familyName
          givenName: givenName
          profile: profile
          nickname: nickname
          middleName: middleName
          locale: locale
        customData: "{}"
        avatar: avatar
        organizationRoles:
        - name: name
          id: id
        - name: name
          id: id
        primaryPhone: primaryPhone
        createdAt: 6.027456183070403
        identities:
          key:
            details: "{}"
            userId: userId
        lastSignInAt: 0.8008281904610115
        name: name
        id: id
        applicationId: applicationId
        primaryEmail: primaryEmail
        username: username
        updatedAt: 1.4658129805029452
      properties:
        id:
          maxLength: 12
          minLength: 1
          type: string
        username:
          maxLength: 128
          nullable: true
          type: string
        primaryEmail:
          maxLength: 128
          nullable: true
          type: string
        primaryPhone:
          maxLength: 128
          nullable: true
          type: string
        name:
          maxLength: 128
          nullable: true
          type: string
        avatar:
          maxLength: 2048
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        identities:
          additionalProperties:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
          type: object
        lastSignInAt:
          nullable: true
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
        profile:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
        applicationId:
          maxLength: 21
          nullable: true
          type: string
        isSuspended:
          type: boolean
        organizationRoles:
          items:
            $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_organizationRoles_inner'
          type: array
      required:
      - applicationId
      - avatar
      - createdAt
      - customData
      - id
      - identities
      - isSuspended
      - lastSignInAt
      - name
      - organizationRoles
      - primaryEmail
      - primaryPhone
      - profile
      - updatedAt
      - username
      type: object
    ReplaceOrganizationUsers_request:
      properties:
        userIds:
          description: An array of user IDs to replace existing users.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - userIds
      type: object
    AddOrganizationUsers_request:
      properties:
        userIds:
          description: An array of user IDs to be added to the organization. Organization
            existed users assignment will be ignored.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - userIds
      type: object
    AssignOrganizationRolesToUsers_request:
      properties:
        userIds:
          description: An array of user IDs to assign roles.
          items:
            minLength: 1
            type: string
          type: array
        organizationRoleIds:
          description: An array of organization role IDs to assign. User existed roles
            assignment will be ignored.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationRoleIds
      - userIds
      type: object
    ReplaceOrganizationUserRoles_request:
      properties:
        organizationRoleIds:
          description: An array of organization role IDs to update for the user.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationRoleIds
      type: object
    AssignOrganizationRolesToUser_request:
      properties:
        organizationRoleIds:
          description: An array of organization role IDs to assign to the user. User
            existed roles assignment will be ignored.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationRoleIds
      type: object
    ListOrganizationApplications_200_response_inner:
      example:
        customClientMetadata:
          idTokenTtl: 0.8008281904610115
          refreshTokenTtl: 6.027456183070403
          refreshTokenTtlInDays: 1.4658129805029452
          tenantId: tenantId
          corsAllowedOrigins:
          - corsAllowedOrigins
          - corsAllowedOrigins
          alwaysIssueRefreshToken: true
          rotateRefreshToken: true
        description: description
        customData: "{}"
        secret: secret
        type: Native
        protectedAppMetadata:
          pageRules:
          - path: path
          - path: path
          customDomains:
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          - cloudflareData:
              id: id
              ssl:
                validation_errors:
                - message: message
                - message: message
                status: status
              verification_errors:
              - verification_errors
              - verification_errors
              status: status
            domain: domain
            dnsRecords:
            - name: name
              type: type
              value: value
            - name: name
              type: type
              value: value
            errorMessage: errorMessage
            status: PendingVerification
          origin: origin
          host: host
          sessionDuration: 5.962133916683182
        organizationRoles:
        - name: name
          id: id
        - name: name
          id: id
        createdAt: 0.8008281904610115
        isThirdParty: true
        oidcClientMetadata:
          backchannelLogoutUri: http://example.com/aeiou
          postLogoutRedirectUris:
          - http://example.com/aeiou
          - http://example.com/aeiou
          logoUri: logoUri
          redirectUris:
          - "{}"
          - "{}"
          backchannelLogoutSessionRequired: true
        tenantId: tenantId
        name: name
        id: id
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        secret:
          deprecated: true
          description: "The internal client secret. Note it is only used for internal\
            \ validation, and the actual secrets should be retrieved from `/api/applications/{id}/secrets`\
            \ endpoints."
          type: string
        description:
          nullable: true
          type: string
        type:
          enum:
          - Native
          - SPA
          - Traditional
          - MachineToMachine
          - Protected
          - SAML
          type: string
        oidcClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_oidcClientMetadata'
        customClientMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_customClientMetadata'
        protectedAppMetadata:
          $ref: '#/components/schemas/ListApplications_200_response_inner_protectedAppMetadata'
        customData:
          description: arbitrary
          type: object
        isThirdParty:
          type: boolean
        createdAt:
          type: number
        organizationRoles:
          items:
            $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_organizationRoles_inner'
          type: array
      required:
      - createdAt
      - customClientMetadata
      - customData
      - description
      - id
      - isThirdParty
      - name
      - oidcClientMetadata
      - organizationRoles
      - protectedAppMetadata
      - secret
      - tenantId
      - type
      type: object
    ReplaceOrganizationApplications_request:
      properties:
        applicationIds:
          description: An array of application IDs to replace existing applications.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - applicationIds
      type: object
    AddOrganizationApplications_request:
      properties:
        applicationIds:
          description: The application IDs to add.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - applicationIds
      type: object
    AssignOrganizationRolesToApplications_request:
      properties:
        applicationIds:
          description: An array of application IDs to assign roles to.
          items:
            minLength: 1
            type: string
          type: array
        organizationRoleIds:
          description: An array of organization role IDs to assign to the applications.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - applicationIds
      - organizationRoleIds
      type: object
    ReplaceOrganizationApplicationRoles_request:
      properties:
        organizationRoleIds:
          description: An array of role IDs to replace existing roles.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationRoleIds
      type: object
    AssignOrganizationRolesToApplication_request:
      properties:
        organizationRoleIds:
          description: The role ID to add.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationRoleIds
      type: object
    ListOrganizationJitEmailDomains_200_response_inner:
      example:
        organizationId: organizationId
        emailDomain: emailDomain
        tenantId: tenantId
      properties:
        tenantId:
          maxLength: 21
          type: string
        organizationId:
          maxLength: 21
          minLength: 1
          type: string
        emailDomain:
          maxLength: 128
          minLength: 1
          type: string
      required:
      - emailDomain
      - organizationId
      - tenantId
      type: object
    ReplaceOrganizationJitEmailDomains_request:
      properties:
        emailDomains:
          description: An array of email domains to replace existing email domains.
          items:
            type: string
          type: array
      required:
      - emailDomains
      type: object
    CreateOrganizationJitEmailDomain_request:
      properties:
        emailDomain:
          description: The email domain to add.
          minLength: 1
          type: string
      required:
      - emailDomain
      type: object
    ReplaceOrganizationJitRoles_request:
      properties:
        organizationRoleIds:
          description: An array of organization role IDs to replace existing organization
            roles.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationRoleIds
      type: object
    CreateOrganizationJitRole_request:
      properties:
        organizationRoleIds:
          description: The organization role IDs to add.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - organizationRoleIds
      type: object
    ListOrganizationJitSsoConnectors_200_response_inner_branding:
      example:
        darkLogo: darkLogo
        displayName: displayName
        logo: logo
      properties:
        displayName:
          type: string
        logo:
          type: string
        darkLogo:
          type: string
      type: object
    ListOrganizationJitSsoConnectors_200_response_inner:
      example:
        createdAt: 0.8008281904610115
        branding:
          darkLogo: darkLogo
          displayName: displayName
          logo: logo
        tenantId: tenantId
        connectorName: connectorName
        domains:
        - domains
        - domains
        id: id
        syncProfile: true
        config: "{}"
        providerName: providerName
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 128
          minLength: 1
          type: string
        providerName:
          maxLength: 128
          minLength: 1
          type: string
        connectorName:
          maxLength: 128
          minLength: 1
          type: string
        config:
          description: arbitrary
          type: object
        domains:
          items:
            type: string
          type: array
        branding:
          $ref: '#/components/schemas/ListOrganizationJitSsoConnectors_200_response_inner_branding'
        syncProfile:
          type: boolean
        createdAt:
          type: number
      required:
      - branding
      - config
      - connectorName
      - createdAt
      - domains
      - id
      - providerName
      - syncProfile
      - tenantId
      type: object
    ReplaceOrganizationJitSsoConnectors_request:
      properties:
        ssoConnectorIds:
          description: An array of SSO connector IDs to replace existing SSO connectors.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - ssoConnectorIds
      type: object
    CreateOrganizationJitSsoConnector_request:
      properties:
        ssoConnectorIds:
          description: The SSO connector IDs to add.
          items:
            minLength: 1
            type: string
          type: array
      required:
      - ssoConnectorIds
      type: object
    ListSsoConnectorProviders_200_response_inner:
      example:
        logoDark: logoDark
        name: name
        logo: logo
        description: description
        providerName: OIDC
        providerType: oidc
      properties:
        providerName:
          enum:
          - OIDC
          - SAML
          - AzureAD
          - GoogleWorkspace
          - Okta
          - AzureAdOidc
          type: string
        providerType:
          enum:
          - oidc
          - saml
          type: string
        logo:
          type: string
        logoDark:
          type: string
        description:
          type: string
        name:
          type: string
      required:
      - description
      - logo
      - logoDark
      - name
      - providerName
      - providerType
      type: object
    ListSsoConnectors_200_response_inner:
      example:
        branding:
          darkLogo: darkLogo
          displayName: displayName
          logo: logo
        domains:
        - domains
        - domains
        providerType: oidc
        createdAt: 0.8008281904610115
        tenantId: tenantId
        name: name
        connectorName: connectorName
        providerLogoDark: providerLogoDark
        id: id
        syncProfile: true
        config: "{}"
        providerLogo: providerLogo
        providerConfig:
          key: {}
        providerName: OIDC
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 128
          minLength: 1
          type: string
        providerName:
          enum:
          - OIDC
          - SAML
          - AzureAD
          - GoogleWorkspace
          - Okta
          - AzureAdOidc
          type: string
        connectorName:
          maxLength: 128
          minLength: 1
          type: string
        config:
          description: arbitrary
          type: object
        domains:
          items:
            type: string
          type: array
        branding:
          $ref: '#/components/schemas/ListOrganizationJitSsoConnectors_200_response_inner_branding'
        syncProfile:
          type: boolean
        createdAt:
          type: number
        name:
          type: string
        providerType:
          enum:
          - oidc
          - saml
          type: string
        providerLogo:
          type: string
        providerLogoDark:
          type: string
        providerConfig:
          additionalProperties:
            example: {}
          type: object
      required:
      - branding
      - config
      - connectorName
      - createdAt
      - domains
      - id
      - name
      - providerLogo
      - providerLogoDark
      - providerName
      - providerType
      - syncProfile
      - tenantId
      type: object
    CreateSsoConnector_request:
      properties:
        config:
          description: arbitrary
          type: object
        domains:
          items:
            type: string
          type: array
        branding:
          $ref: '#/components/schemas/ListOrganizationJitSsoConnectors_200_response_inner_branding'
        syncProfile:
          type: boolean
        providerName:
          maxLength: 128
          minLength: 1
          type: string
        connectorName:
          maxLength: 128
          minLength: 1
          type: string
      required:
      - connectorName
      - providerName
      type: object
    UpdateSsoConnector_request:
      properties:
        config:
          description: arbitrary
          type: object
        domains:
          items:
            type: string
          type: array
        branding:
          $ref: '#/components/schemas/ListOrganizationJitSsoConnectors_200_response_inner_branding'
        syncProfile:
          type: boolean
        connectorName:
          maxLength: 128
          minLength: 1
          type: string
      type: object
    GetSystemApplicationConfig_200_response_protectedApps:
      example:
        defaultDomain: defaultDomain
      properties:
        defaultDomain:
          type: string
      required:
      - defaultDomain
      type: object
    GetSystemApplicationConfig_200_response:
      example:
        protectedApps:
          defaultDomain: defaultDomain
      properties:
        protectedApps:
          $ref: '#/components/schemas/GetSystemApplicationConfig_200_response_protectedApps'
      required:
      - protectedApps
      type: object
    CreateSubjectToken_request:
      properties:
        userId:
          description: The ID of the user to impersonate.
          type: string
        context:
          description: "The additional context to be included in the token, this can\
            \ be used in custom JWT."
          type: object
      required:
      - userId
      type: object
    CreateSubjectToken_201_response:
      example:
        expiresIn: 0.8008281904610115
        subjectToken: subjectToken
      properties:
        subjectToken:
          type: string
        expiresIn:
          type: number
      required:
      - expiresIn
      - subjectToken
      type: object
    GetAccountCenterSettings_200_response_fields:
      example:
        password: "Off"
        phone: "Off"
        social: "Off"
        profile: "Off"
        name: "Off"
        customData: "Off"
        avatar: "Off"
        email: "Off"
        username: "Off"
      properties:
        name:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        avatar:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        profile:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        email:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        phone:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        password:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        username:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        social:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        customData:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
      type: object
    GetAccountCenterSettings_200_response:
      example:
        tenantId: tenantId
        id: id
        fields:
          password: "Off"
          phone: "Off"
          social: "Off"
          profile: "Off"
          name: "Off"
          customData: "Off"
          avatar: "Off"
          email: "Off"
          username: "Off"
        enabled: true
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        enabled:
          type: boolean
        fields:
          $ref: '#/components/schemas/GetAccountCenterSettings_200_response_fields'
      required:
      - enabled
      - fields
      - id
      - tenantId
      type: object
    UpdateAccountCenterSettings_request_fields:
      description: The fields settings for the account API.
      properties:
        name:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        avatar:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        profile:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        email:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        phone:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        password:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        username:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        social:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
        customData:
          enum:
          - "Off"
          - ReadOnly
          - Edit
          type: string
      type: object
    UpdateAccountCenterSettings_request:
      properties:
        enabled:
          description: Enable or disable the account API.
          type: boolean
        fields:
          $ref: '#/components/schemas/UpdateAccountCenterSettings_request_fields'
      type: object
    GetSignInExperienceConfig_200_response_socialConnectors_inner:
      example:
        logoDark: logoDark
        isStandard: true
        name: "{}"
        logo: logo
        id: id
        platform: Native
        target: target
        fromEmail: fromEmail
      properties:
        id:
          type: string
        target:
          type: string
        name:
          description: Validator function
          type: object
        logo:
          type: string
        logoDark:
          nullable: true
          type: string
        fromEmail:
          type: string
        platform:
          enum:
          - Native
          - Universal
          - Web
          nullable: true
          type: string
        isStandard:
          type: boolean
      required:
      - id
      - logo
      - logoDark
      - name
      - platform
      - target
      type: object
    GetSignInExperienceConfig_200_response_ssoConnectors_inner:
      example:
        darkLogo: darkLogo
        connectorName: connectorName
        logo: logo
        id: id
      properties:
        id:
          type: string
        connectorName:
          type: string
        logo:
          type: string
        darkLogo:
          type: string
      required:
      - connectorName
      - id
      - logo
      type: object
    GetSignInExperienceConfig_200_response_forgotPassword:
      example:
        phone: true
        email: true
      properties:
        phone:
          type: boolean
        email:
          type: boolean
      required:
      - email
      - phone
      type: object
    GetSignInExperienceConfig_200_response_googleOneTap:
      example:
        autoSelect: true
        clientId: clientId
        connectorId: connectorId
        isEnabled: true
        closeOnTapOutside: true
        itpSupport: true
      properties:
        isEnabled:
          type: boolean
        autoSelect:
          type: boolean
        closeOnTapOutside:
          type: boolean
        itpSupport:
          type: boolean
        clientId:
          type: string
        connectorId:
          type: string
      required:
      - clientId
      - connectorId
      type: object
    GetSignInExperienceConfig_200_response:
      example:
        color:
          isDarkModeEnabled: true
          primaryColor: primaryColor
          darkPrimaryColor: darkPrimaryColor
        socialSignInConnectorTargets:
        - socialSignInConnectorTargets
        - socialSignInConnectorTargets
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        signUp:
          password: true
          identifiers:
          - username
          - username
          verify: true
        singleSignOnEnabled: true
        termsOfUseUrl: termsOfUseUrl
        forgotPassword:
          phone: true
          email: true
        googleOneTap:
          autoSelect: true
          clientId: clientId
          connectorId: connectorId
          isEnabled: true
          closeOnTapOutside: true
          itpSupport: true
        customContent:
          key: customContent
        agreeToTermsPolicy: Automatic
        id: id
        ssoConnectors:
        - darkLogo: darkLogo
          connectorName: connectorName
          logo: logo
          id: id
        - darkLogo: darkLogo
          connectorName: connectorName
          logo: logo
          id: id
        socialConnectors:
        - logoDark: logoDark
          isStandard: true
          name: "{}"
          logo: logo
          id: id
          platform: Native
          target: target
          fromEmail: fromEmail
        - logoDark: logoDark
          isStandard: true
          name: "{}"
          logo: logo
          id: id
          platform: Native
          target: target
          fromEmail: fromEmail
        signInMode: SignIn
        customCss: customCss
        passwordPolicy:
          characterTypes:
            min: 5.962133916683182
          rejects:
            userInfo: true
            pwned: true
            words:
            - words
            - words
            repetitionAndSequence: true
          length:
            min: 6.027456183070403
            max: 1.4658129805029452
        supportWebsiteUrl: supportWebsiteUrl
        mfa:
          factors:
          - Totp
          - Totp
          policy: UserControlled
        languageInfo:
          autoDetect: true
          fallbackLanguage: af-ZA
        privacyPolicyUrl: privacyPolicyUrl
        customUiAssets:
          createdAt: 0.8008281904610115
          id: id
        supportEmail: supportEmail
        socialSignIn:
          automaticAccountLinking: true
        isDevelopmentTenant: true
        unknownSessionRedirectUrl: unknownSessionRedirectUrl
        signIn:
          methods:
          - identifier: username
            password: true
            verificationCode: true
            isPasswordPrimary: true
          - identifier: username
            password: true
            verificationCode: true
            isPasswordPrimary: true
        tenantId: tenantId
      properties:
        tenantId:
          maxLength: 21
          type: string
        id:
          maxLength: 21
          minLength: 1
          type: string
        color:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_color'
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        languageInfo:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_languageInfo'
        termsOfUseUrl:
          maxLength: 2048
          nullable: true
          type: string
        privacyPolicyUrl:
          maxLength: 2048
          nullable: true
          type: string
        agreeToTermsPolicy:
          enum:
          - Automatic
          - ManualRegistrationOnly
          - Manual
          type: string
        signIn:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_signIn'
        signUp:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_signUp'
        socialSignIn:
          $ref: '#/components/schemas/GetSignInExp_200_response_socialSignIn'
        socialSignInConnectorTargets:
          items:
            type: string
          type: array
        signInMode:
          enum:
          - SignIn
          - Register
          - SignInAndRegister
          type: string
        customCss:
          nullable: true
          type: string
        customContent:
          additionalProperties:
            type: string
          type: object
        customUiAssets:
          $ref: '#/components/schemas/GetSignInExp_200_response_customUiAssets'
        passwordPolicy:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_passwordPolicy'
        mfa:
          $ref: '#/components/schemas/UpdateSignInExp_200_response_mfa'
        singleSignOnEnabled:
          type: boolean
        supportEmail:
          nullable: true
          type: string
        supportWebsiteUrl:
          nullable: true
          type: string
        unknownSessionRedirectUrl:
          nullable: true
          type: string
        socialConnectors:
          items:
            $ref: '#/components/schemas/GetSignInExperienceConfig_200_response_socialConnectors_inner'
          type: array
        ssoConnectors:
          items:
            $ref: '#/components/schemas/GetSignInExperienceConfig_200_response_ssoConnectors_inner'
          type: array
        forgotPassword:
          $ref: '#/components/schemas/GetSignInExperienceConfig_200_response_forgotPassword'
        isDevelopmentTenant:
          type: boolean
        googleOneTap:
          $ref: '#/components/schemas/GetSignInExperienceConfig_200_response_googleOneTap'
      required:
      - agreeToTermsPolicy
      - branding
      - color
      - customContent
      - customCss
      - customUiAssets
      - forgotPassword
      - id
      - isDevelopmentTenant
      - languageInfo
      - mfa
      - passwordPolicy
      - privacyPolicyUrl
      - signIn
      - signInMode
      - signUp
      - singleSignOnEnabled
      - socialConnectors
      - socialSignIn
      - socialSignInConnectorTargets
      - ssoConnectors
      - supportEmail
      - supportWebsiteUrl
      - tenantId
      - termsOfUseUrl
      - unknownSessionRedirectUrl
      type: object
    GetSignInExperiencePhrases_200_response_value:
      oneOf:
      - type: string
      - additionalProperties:
          example: {}
        type: object
    GetHasuraAuth_200_response:
      example:
        X-Hasura-User-Id: X-Hasura-User-Id
        X-Hasura-Role: X-Hasura-Role
      properties:
        X-Hasura-User-Id:
          type: string
        X-Hasura-Role:
          type: string
      type: object
    AssertSingleSignOnSaml_request:
      properties:
        RelayState:
          description: SAML standard parameter that will be transmitted between the
            identity provider and the service provider. It will be used as the session
            ID (jti) of the user's Logto authentication session. This API will use
            this session ID to retrieve the SSO connector authentication session from
            the database.
          type: string
        SAMLResponse:
          description: The SAML assertion response from the identity provider (IdP).
          type: string
      required:
      - SAMLResponse
      type: object
    InitInteraction_request:
      properties:
        interactionEvent:
          enum:
          - SignIn
          - Register
          - ForgotPassword
          type: string
      required:
      - interactionEvent
      type: object
    UpdateInteractionEvent_request:
      properties:
        interactionEvent:
          description: The type of the interaction event. Only `SignIn` and `Register`
            are supported.
          enum:
          - SignIn
          - Register
          - ForgotPassword
          type: string
      required:
      - interactionEvent
      type: object
    IdentifyUser_request:
      properties:
        verificationId:
          description: "The ID of the verification record used to identify the user.\
            \ <br/>- `SignIn` and `ForgotPassword` interactions: Required to verify\
            \ the user's identity. <br/>- `Register` interaction: Optional. If provided,\
            \ it updates the profile data with the verification record before account\
            \ creation. If omitted, the account is created using existing profile\
            \ data in the current interaction."
          type: string
        linkSocialIdentity:
          description: "Applies to the SignIn interaction only, and is used when a\
            \ SocialVerification type verificationId is provided. <br/>- If `true`,\
            \ the user is identified using the verified email or phone number from\
            \ the social identity provider, and the social identity is linked to the\
            \ user's account. <br/>- If `false` or not provided, the API identifies\
            \ the user solely through the social identity. <br/> This parameters is\
            \ used for linking a non-existing social identity to a related user account\
            \ that can be identified through the verified email or phone number."
          type: boolean
      type: object
    SubmitInteraction_200_response:
      example:
        redirectTo: redirectTo
      properties:
        redirectTo:
          type: string
      required:
      - redirectTo
      type: object
    CreatePasswordVerification_request_identifier:
      description: The unique identifier of the user that will be used to identify
        the user along with the provided password.
      properties:
        type:
          enum:
          - username
          - email
          - phone
          type: string
        value:
          type: string
      required:
      - type
      - value
      type: object
    CreatePasswordVerification_request:
      properties:
        identifier:
          $ref: '#/components/schemas/CreatePasswordVerification_request_identifier'
        password:
          description: The user password.
          minLength: 1
          type: string
      required:
      - identifier
      - password
      type: object
    CreatePasswordVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID of the newly created Password verification
            record. The `verificationId` is required when verifying the user's identity
            via the `Identification` API.
          type: string
      required:
      - verificationId
      type: object
    CreateAndSendVerificationCode_request_identifier:
      description: The identifier (email address or phone number) to send the verification
        code to.
      properties:
        type:
          enum:
          - email
          - phone
          type: string
        value:
          type: string
      required:
      - type
      - value
      type: object
    CreateAndSendVerificationCode_request:
      properties:
        identifier:
          $ref: '#/components/schemas/CreateAndSendVerificationCode_request_identifier'
        interactionEvent:
          description: "The interaction event for which the verification code will\
            \ be used. Supported values are `SignIn`, `Register`, and `ForgotPassword`.\
            \ This determines the template for the verification code."
          enum:
          - SignIn
          - Register
          - ForgotPassword
          type: string
      required:
      - identifier
      - interactionEvent
      type: object
    CreateAndSendVerificationCode_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique ID of the verification record. Required to verify
            the code.
          type: string
      required:
      - verificationId
      type: object
    VerifyVerificationCodeVerification_request_identifier:
      description: The identifier (email address or phone number) to verify the code
        against. Must match the identifier used to send the verification code.
      properties:
        type:
          enum:
          - email
          - phone
          type: string
        value:
          type: string
      required:
      - type
      - value
      type: object
    VerifyVerificationCodeVerification_request:
      properties:
        identifier:
          $ref: '#/components/schemas/VerifyVerificationCodeVerification_request_identifier'
        verificationId:
          description: The verification ID of the CodeVerification record.
          type: string
        code:
          description: The verification code to be verified.
          type: string
      required:
      - code
      - identifier
      - verificationId
      type: object
    VerifyVerificationCodeVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: he unique ID of the verification record. Required for user
            identification via the `Identification` API or to bind the identifier
            to the user's account via the `Profile` API.
          type: string
      required:
      - verificationId
      type: object
    CreateSocialVerification_request:
      properties:
        state:
          description: The state parameter to pass to the social connector.
          type: string
        redirectUri:
          description: The URI to redirect the user after the social authorization
            is completed.
          type: string
      required:
      - redirectUri
      - state
      type: object
    CreateSocialVerification_200_response:
      example:
        authorizationUri: authorizationUri
        verificationId: verificationId
      properties:
        authorizationUri:
          description: The social authorization URI.
          type: string
        verificationId:
          description: The unique verification ID of the newly created SocialVerification
            record. The `verificationId` is required when verifying the social authorization
            response.
          type: string
      required:
      - authorizationUri
      - verificationId
      type: object
    VerifySocialVerification_request:
      properties:
        connectorData:
          description: Arbitrary data returned by the social provider to complete
            the verification process.
          type: object
        verificationId:
          description: The ID of the Social verification record.
          type: string
      required:
      - connectorData
      type: object
    VerifySocialVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID of the SocialVerification record.
            This ID is required when identifying the user in the current interaction.
          type: string
      required:
      - verificationId
      type: object
    CreateEnterpriseSsoVerification_request:
      properties:
        state:
          description: The state parameter to pass to the SSO connector.
          type: string
        redirectUri:
          description: The URI to redirect the user after the SSO authorization is
            completed.
          type: string
      required:
      - redirectUri
      - state
      type: object
    CreateEnterpriseSsoVerification_200_response:
      example:
        authorizationUri: authorizationUri
        verificationId: verificationId
      properties:
        authorizationUri:
          description: The SSO authorization URI.
          type: string
        verificationId:
          description: The unique verification ID of the newly created EnterpriseSSO
            verification record. The `verificationId` is required when verifying the
            SSO authorization response.
          type: string
      required:
      - authorizationUri
      - verificationId
      type: object
    VerifyEnterpriseSsoVerification_request:
      properties:
        connectorData:
          description: Arbitrary data returned by the SSO provider to complete the
            verification process.
          type: object
        verificationId:
          description: The ID of the EnterpriseSSO verification record.
          type: string
      required:
      - connectorData
      - verificationId
      type: object
    VerifyEnterpriseSsoVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The current verified EnterpriseSSO verification record ID.
            This ID is required when identifying the user in the current interaction.
          type: string
      required:
      - verificationId
      type: object
    CreateTotpSecret_200_response:
      example:
        secret: secret
        verificationId: verificationId
        secretQrCode: secretQrCode
      properties:
        verificationId:
          description: The unique verification ID for the TOTP record. This ID is
            required to verify the TOTP code.
          type: string
        secret:
          description: The newly generated TOTP secret.
          type: string
        secretQrCode:
          description: A QR code image data URL for the TOTP secret. The user can
            scan this QR code with their TOTP authenticator app.
          type: string
      required:
      - secret
      - secretQrCode
      - verificationId
      type: object
    VerifyTotpVerification_request:
      properties:
        code:
          description: The TOTP code to be verified.
          minLength: 1
          type: string
        verificationId:
          description: "The verification ID of the newly created TOTP secret. This\
            \ ID is required to verify a newly created TOTP secret that needs to be\
            \ bound to the user account. If not provided, the API will create a new\
            \ TOTP verification record and verify the code against the user's existing\
            \ TOTP secret."
          type: string
      required:
      - code
      type: object
    VerifyTotpVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: "The unique verification ID of the TOTP verification record.\
            \ For newly created TOTP secret verification record, this ID is required\
            \ to bind the TOTP secret to the user account through `Profile` API."
          type: string
      required:
      - verificationId
      type: object
    CreateWebAuthnRegistrationVerification_200_response_registrationOptions_rp:
      example:
        name: name
        id: id
      properties:
        name:
          type: string
        id:
          type: string
      required:
      - name
      type: object
    CreateWebAuthnRegistrationVerification_200_response_registrationOptions_user:
      example:
        displayName: displayName
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        displayName:
          type: string
      required:
      - displayName
      - id
      - name
      type: object
    CreateWebAuthnRegistrationVerification_200_response_registrationOptions_pubKeyCredParams_inner:
      example:
        type: type
        alg: 0.8008281904610115
      properties:
        type:
          format: '"public-key"'
          type: string
        alg:
          type: number
      required:
      - alg
      - type
      type: object
    CreateWebAuthnRegistrationVerification_200_response_registrationOptions_excludeCredentials_inner:
      example:
        transports:
        - usb
        - usb
        id: id
        type: type
      properties:
        type:
          format: '"public-key"'
          type: string
        id:
          type: string
        transports:
          items:
            enum:
            - usb
            - nfc
            - ble
            - internal
            - cable
            - hybrid
            - smart-card
            type: string
          type: array
      required:
      - id
      - type
      type: object
    CreateWebAuthnRegistrationVerification_200_response_registrationOptions_authenticatorSelection:
      example:
        authenticatorAttachment: platform
        userVerification: required
        requireResidentKey: true
        residentKey: discouraged
      properties:
        authenticatorAttachment:
          enum:
          - platform
          - cross-platform
          type: string
        requireResidentKey:
          type: boolean
        residentKey:
          enum:
          - discouraged
          - preferred
          - required
          type: string
        userVerification:
          enum:
          - required
          - preferred
          - discouraged
          type: string
      type: object
    CreateWebAuthnRegistrationVerification_200_response_registrationOptions_extensions:
      example:
        credProps: true
        appid: appid
        hmacCreateSecret: true
      properties:
        appid:
          type: string
        credProps:
          type: boolean
        hmacCreateSecret:
          type: boolean
      type: object
    CreateWebAuthnRegistrationVerification_200_response_registrationOptions:
      description: The WebAuthn registration options that the user needs to create
        a new WebAuthn credential.
      example:
        extensions:
          credProps: true
          appid: appid
          hmacCreateSecret: true
        attestation: none
        challenge: challenge
        authenticatorSelection:
          authenticatorAttachment: platform
          userVerification: required
          requireResidentKey: true
          residentKey: discouraged
        user:
          displayName: displayName
          name: name
          id: id
        rp:
          name: name
          id: id
        timeout: 6.027456183070403
        excludeCredentials:
        - transports:
          - usb
          - usb
          id: id
          type: type
        - transports:
          - usb
          - usb
          id: id
          type: type
        pubKeyCredParams:
        - type: type
          alg: 0.8008281904610115
        - type: type
          alg: 0.8008281904610115
      properties:
        rp:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_rp'
        user:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_user'
        challenge:
          type: string
        pubKeyCredParams:
          items:
            $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_pubKeyCredParams_inner'
          type: array
        timeout:
          type: number
        excludeCredentials:
          items:
            $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_excludeCredentials_inner'
          type: array
        authenticatorSelection:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_authenticatorSelection'
        attestation:
          enum:
          - none
          - indirect
          - direct
          - enterprise
          type: string
        extensions:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_extensions'
      required:
      - challenge
      - pubKeyCredParams
      - rp
      - user
      type: object
    CreateWebAuthnRegistrationVerification_200_response:
      example:
        registrationOptions:
          extensions:
            credProps: true
            appid: appid
            hmacCreateSecret: true
          attestation: none
          challenge: challenge
          authenticatorSelection:
            authenticatorAttachment: platform
            userVerification: required
            requireResidentKey: true
            residentKey: discouraged
          user:
            displayName: displayName
            name: name
            id: id
          rp:
            name: name
            id: id
          timeout: 6.027456183070403
          excludeCredentials:
          - transports:
            - usb
            - usb
            id: id
            type: type
          - transports:
            - usb
            - usb
            id: id
            type: type
          pubKeyCredParams:
          - type: type
            alg: 0.8008281904610115
          - type: type
            alg: 0.8008281904610115
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID for the WebAuthn registration record.
            This ID is required to verify the WebAuthn registration challenge.
          type: string
        registrationOptions:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions'
      required:
      - registrationOptions
      - verificationId
      type: object
    VerifyWebAuthnRegistrationVerification_request_payload_response:
      properties:
        clientDataJSON:
          type: string
        attestationObject:
          type: string
        authenticatorData:
          type: string
        transports:
          items:
            enum:
            - usb
            - nfc
            - ble
            - internal
            - cable
            - hybrid
            - smart-card
            type: string
          type: array
        publicKeyAlgorithm:
          type: number
        publicKey:
          type: string
      required:
      - attestationObject
      - clientDataJSON
      type: object
    VerifyWebAuthnRegistrationVerification_request_payload_clientExtensionResults_crepProps:
      properties:
        rk:
          type: boolean
      type: object
    VerifyWebAuthnRegistrationVerification_request_payload_clientExtensionResults:
      properties:
        appid:
          type: boolean
        crepProps:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload_clientExtensionResults_crepProps'
        hmacCreateSecret:
          type: boolean
      type: object
    VerifyWebAuthnRegistrationVerification_request_payload:
      description: The WebAuthn attestation response from the user's WebAuthn credential.
      properties:
        type:
          format: '"WebAuthn"'
          type: string
        id:
          type: string
        rawId:
          type: string
        response:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload_response'
        authenticatorAttachment:
          enum:
          - cross-platform
          - platform
          type: string
        clientExtensionResults:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload_clientExtensionResults'
      required:
      - clientExtensionResults
      - id
      - rawId
      - response
      - type
      type: object
    VerifyWebAuthnRegistrationVerification_request:
      properties:
        verificationId:
          description: The verification ID of the WebAuthn registration record.
          type: string
        payload:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload'
      required:
      - payload
      - verificationId
      type: object
    VerifyWebAuthnRegistrationVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID of the WebAuthn registration record.
            This `verificationId` is required to bind the WebAuthn credential to the
            user account via the `Profile` API.
          type: string
      required:
      - verificationId
      type: object
    CreateWebAuthnAuthenticationVerification_200_response_authenticationOptions:
      description: Options for the user to authenticate with their WebAuthn credential.
      example:
        extensions:
          credProps: true
          appid: appid
          hmacCreateSecret: true
        userVerification: required
        challenge: challenge
        rpId: rpId
        timeout: 0.8008281904610115
        allowCredentials:
        - transports:
          - usb
          - usb
          id: id
          type: type
        - transports:
          - usb
          - usb
          id: id
          type: type
      properties:
        challenge:
          type: string
        timeout:
          type: number
        rpId:
          type: string
        allowCredentials:
          items:
            $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_excludeCredentials_inner'
          type: array
        userVerification:
          enum:
          - required
          - preferred
          - discouraged
          type: string
        extensions:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_extensions'
      required:
      - challenge
      type: object
    CreateWebAuthnAuthenticationVerification_200_response:
      example:
        authenticationOptions:
          extensions:
            credProps: true
            appid: appid
            hmacCreateSecret: true
          userVerification: required
          challenge: challenge
          rpId: rpId
          timeout: 0.8008281904610115
          allowCredentials:
          - transports:
            - usb
            - usb
            id: id
            type: type
          - transports:
            - usb
            - usb
            id: id
            type: type
        verificationId: verificationId
      properties:
        verificationId:
          description: "The unique ID for the WebAuthn authentication record, required\
            \ to verify the WebAuthn authentication challenge."
          type: string
        authenticationOptions:
          $ref: '#/components/schemas/CreateWebAuthnAuthenticationVerification_200_response_authenticationOptions'
      required:
      - authenticationOptions
      - verificationId
      type: object
    VerifyWebAuthnAuthenticationVerification_request_payload_response:
      properties:
        clientDataJSON:
          type: string
        authenticatorData:
          type: string
        signature:
          type: string
        userHandle:
          type: string
      required:
      - authenticatorData
      - clientDataJSON
      - signature
      type: object
    VerifyWebAuthnAuthenticationVerification_request_payload:
      description: The WebAuthn assertion response from the user's WebAuthn credential.
      properties:
        type:
          format: '"WebAuthn"'
          type: string
        id:
          type: string
        rawId:
          type: string
        authenticatorAttachment:
          enum:
          - cross-platform
          - platform
          type: string
        clientExtensionResults:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload_clientExtensionResults'
        response:
          $ref: '#/components/schemas/VerifyWebAuthnAuthenticationVerification_request_payload_response'
      required:
      - clientExtensionResults
      - id
      - rawId
      - response
      - type
      type: object
    VerifyWebAuthnAuthenticationVerification_request:
      properties:
        verificationId:
          description: The verification ID of the WebAuthn authentication verification
            record.
          type: string
        payload:
          $ref: '#/components/schemas/VerifyWebAuthnAuthenticationVerification_request_payload'
      required:
      - payload
      - verificationId
      type: object
    VerifyWebAuthnAuthenticationVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID of the WebAuthn authentication verification
            record.
          type: string
      required:
      - verificationId
      type: object
    GenerateBackupCodes_200_response:
      example:
        codes:
        - codes
        - codes
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID of the newly created BackupCode
            verification record. This ID is required when adding the backup codes
            to the user profile via the Profile API.
          type: string
        codes:
          description: The generated backup codes.
          items:
            type: string
          type: array
      required:
      - codes
      - verificationId
      type: object
    VerifyBackupCode_request:
      properties:
        code:
          description: The backup code to verify.
          minLength: 1
          type: string
      required:
      - code
      type: object
    VerifyBackupCode_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID of the BackupCode verification record.
          type: string
      required:
      - verificationId
      type: object
    CreateNewPasswordIdentityVerification_request_identifier:
      description: "The unique user identifier.  <br/> Currently, only `username`\
        \ is accepted. For `email` or `phone` registration, a `CodeVerification` record\
        \ must be created and used to verify the user's email or phone number identifier."
      properties:
        type:
          format: '"username"'
          type: string
        value:
          format: regex
          pattern: "/^[A-Z_a-z]\\w*$/"
          type: string
      required:
      - type
      - value
      type: object
    CreateNewPasswordIdentityVerification_request:
      properties:
        identifier:
          $ref: '#/components/schemas/CreateNewPasswordIdentityVerification_request_identifier'
        password:
          description: The new user password. (A password digest will be created and
            stored securely in the verification record.)
          type: string
      required:
      - identifier
      - password
      type: object
    CreateNewPasswordIdentityVerification_200_response:
      example:
        verificationId: verificationId
      properties:
        verificationId:
          description: The unique verification ID of the newly created NewPasswordIdentity
            verification record. The `verificationId` is required when creating a
            new user account via the `Identification` API.
          type: string
      required:
      - verificationId
      type: object
    AddUserProfile_request_oneOf:
      properties:
        type:
          format: '"username"'
          type: string
        value:
          format: regex
          pattern: "/^[A-Z_a-z]\\w*$/"
          type: string
      required:
      - type
      - value
      type: object
    AddUserProfile_request_oneOf_1:
      properties:
        type:
          format: '"password"'
          type: string
        value:
          type: string
      required:
      - type
      - value
      type: object
    AddUserProfile_request_oneOf_2:
      properties:
        type:
          format: '"email"'
          type: string
        verificationId:
          type: string
      required:
      - type
      - verificationId
      type: object
    AddUserProfile_request_oneOf_3:
      properties:
        type:
          format: '"phone"'
          type: string
        verificationId:
          type: string
      required:
      - type
      - verificationId
      type: object
    AddUserProfile_request_oneOf_4:
      properties:
        type:
          format: '"social"'
          type: string
        verificationId:
          type: string
      required:
      - type
      - verificationId
      type: object
    AddUserProfile_request:
      oneOf:
      - $ref: '#/components/schemas/AddUserProfile_request_oneOf'
      - $ref: '#/components/schemas/AddUserProfile_request_oneOf_1'
      - $ref: '#/components/schemas/AddUserProfile_request_oneOf_2'
      - $ref: '#/components/schemas/AddUserProfile_request_oneOf_3'
      - $ref: '#/components/schemas/AddUserProfile_request_oneOf_4'
      properties:
        type:
          description: "The type of profile data to add. `email`, `phone`, `username`,\
            \ `password`, etc."
        value:
          description: "The plain text value of the profile data. Only supported for\
            \ profile data types that does not require verification, such as `username`\
            \ and `password`."
        verificationId:
          description: "The ID of the verification record used to verify the profile\
            \ data. Required for profile data types that require verification, such\
            \ as `email`, `phone` and `social`."
    ResetUserPassword_request:
      properties:
        password:
          description: The new password to update. The password must meet the password
            policy requirements and can not be the same as the current password.
          type: string
      required:
      - password
      type: object
    BindMfaVerification_request:
      properties:
        type:
          description: The type of MFA.
          enum:
          - Totp
          - WebAuthn
          - BackupCode
          type: string
        verificationId:
          description: The ID of the MFA verification record.
          type: string
      required:
      - type
      - verificationId
      type: object
    GetEnabledSsoConnectors_200_response:
      example:
        connectorIds:
        - connectorIds
        - connectorIds
      properties:
        connectorIds:
          description: The list of enabled SSO connectorIds. Returns an empty array
            if no enabled SSO connectors are found.
          items:
            type: string
          type: array
      required:
      - connectorIds
      type: object
    GetProfile_200_response:
      example:
        isSuspended: true
        profile:
          website: website
          zoneinfo: zoneinfo
          birthdate: birthdate
          address:
            country: country
            streetAddress: streetAddress
            formatted: formatted
            postalCode: postalCode
            locality: locality
            region: region
          gender: gender
          preferredUsername: preferredUsername
          familyName: familyName
          givenName: givenName
          profile: profile
          nickname: nickname
          middleName: middleName
          locale: locale
        customData: "{}"
        avatar: avatar
        hasPassword: true
        primaryPhone: primaryPhone
        createdAt: 6.027456183070403
        identities:
          key:
            details: "{}"
            userId: userId
        lastSignInAt: 0.8008281904610115
        name: name
        ssoIdentities:
        - createdAt: 5.962133916683182
          ssoConnectorId: ssoConnectorId
          identityId: identityId
          tenantId: tenantId
          id: id
          detail: "{}"
          userId: userId
          issuer: issuer
        - createdAt: 5.962133916683182
          ssoConnectorId: ssoConnectorId
          identityId: identityId
          tenantId: tenantId
          id: id
          detail: "{}"
          userId: userId
          issuer: issuer
        id: id
        applicationId: applicationId
        primaryEmail: primaryEmail
        username: username
        updatedAt: 1.4658129805029452
      properties:
        id:
          maxLength: 12
          minLength: 1
          type: string
        username:
          maxLength: 128
          nullable: true
          type: string
        primaryEmail:
          maxLength: 128
          nullable: true
          type: string
        primaryPhone:
          maxLength: 128
          nullable: true
          type: string
        name:
          maxLength: 128
          nullable: true
          type: string
        avatar:
          maxLength: 2048
          nullable: true
          type: string
        customData:
          description: arbitrary
          type: object
        identities:
          additionalProperties:
            $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_identities_value'
          type: object
        lastSignInAt:
          nullable: true
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
        profile:
          $ref: '#/components/schemas/GetJwtCustomizer_200_response_oneOf_contextSample_user_profile'
        applicationId:
          maxLength: 21
          nullable: true
          type: string
        isSuspended:
          type: boolean
        hasPassword:
          type: boolean
        ssoIdentities:
          items:
            $ref: '#/components/schemas/GetUser_200_response_ssoIdentities_inner'
          type: array
      type: object
    UpdateProfile_request:
      properties:
        name:
          description: The new name for the user.
          nullable: true
          type: string
        avatar:
          description: "The new avatar for the user, must be a URL."
          format: url
          nullable: true
          type: string
        username:
          description: "The new username for the user, must be a valid username and\
            \ unique."
          format: regex
          nullable: true
          pattern: "/^[A-Z_a-z]\\w*$/"
          type: string
      type: object
    UpdateOtherProfile_request_address:
      description: The new address for the user.
      properties:
        formatted:
          type: string
        streetAddress:
          type: string
        locality:
          type: string
        region:
          type: string
        postalCode:
          type: string
        country:
          type: string
      type: object
    UpdateOtherProfile_request:
      properties:
        familyName:
          description: The new family name for the user.
          type: string
        givenName:
          description: The new given name for the user.
          type: string
        middleName:
          description: The new middle name for the user.
          type: string
        nickname:
          description: The new nickname for the user.
          type: string
        preferredUsername:
          description: The new preferred username for the user.
          type: string
        profile:
          description: The new profile for the user.
          type: string
        website:
          description: The new website for the user.
          type: string
        gender:
          description: The new gender for the user.
          type: string
        birthdate:
          description: The new birthdate for the user.
          type: string
        zoneinfo:
          description: The new zoneinfo for the user.
          type: string
        locale:
          description: The new locale for the user.
          type: string
        address:
          $ref: '#/components/schemas/UpdateOtherProfile_request_address'
      type: object
    UpdatePassword_request:
      properties:
        password:
          description: The new password for the user.
          minLength: 1
          type: string
      required:
      - password
      type: object
    UpdatePrimaryEmail_request:
      properties:
        email:
          description: The new email for the user.
          format: regex
          pattern: /^\S+@\S+\.\S+$/
          type: string
        newIdentifierVerificationRecordId:
          description: The identifier verification record ID for the new email ownership
            verification.
          type: string
      required:
      - email
      - newIdentifierVerificationRecordId
      type: object
    UpdatePrimaryPhone_request:
      properties:
        phone:
          description: The new phone for the user.
          format: regex
          pattern: /^\d+$/
          type: string
        newIdentifierVerificationRecordId:
          description: The identifier verification record ID for the new phone ownership
            verification.
          type: string
      required:
      - newIdentifierVerificationRecordId
      - phone
      type: object
    AddUserIdentities_request:
      properties:
        newIdentifierVerificationRecordId:
          description: The identifier verification record ID for the new social identity
            ownership verification.
          type: string
      required:
      - newIdentifierVerificationRecordId
      type: object
    CreateVerificationByPassword_request:
      properties:
        password:
          description: The password of the user.
          minLength: 1
          type: string
      required:
      - password
      type: object
    CreateVerificationByPassword_201_response:
      example:
        verificationRecordId: verificationRecordId
        expiresAt: expiresAt
      properties:
        verificationRecordId:
          type: string
        expiresAt:
          type: string
      required:
      - expiresAt
      - verificationRecordId
      type: object
    CreateVerificationByVerificationCode_request:
      properties:
        identifier:
          $ref: '#/components/schemas/CreateAndSendVerificationCode_request_identifier'
      required:
      - identifier
      type: object
    VerifyVerificationByVerificationCode_200_response:
      example:
        verificationRecordId: verificationRecordId
      properties:
        verificationRecordId:
          type: string
      required:
      - verificationRecordId
      type: object
    CreateVerificationBySocial_request:
      properties:
        state:
          description: A random string generated on the client side to prevent CSRF
            (Cross-Site Request Forgery) attacks.
          type: string
        redirectUri:
          description: The URI to navigate back to after the user is authenticated
            by the connected social identity provider and has granted access to the
            connector.
          type: string
        connectorId:
          description: The Logto connector ID.
          type: string
      required:
      - connectorId
      - redirectUri
      - state
      type: object
    CreateVerificationBySocial_201_response:
      example:
        authorizationUri: authorizationUri
        verificationRecordId: verificationRecordId
        expiresAt: expiresAt
      properties:
        verificationRecordId:
          description: The ID of the verification record.
          type: string
        authorizationUri:
          description: The authorization URI to navigate to for authentication and
            authorization in the connected social identity provider.
          type: string
        expiresAt:
          description: The expiration date and time of the verification record.
          type: string
      required:
      - authorizationUri
      - expiresAt
      - verificationRecordId
      type: object
    VerifyVerificationBySocial_request:
      properties:
        connectorData:
          description: "A json object constructed from the url query params returned\
            \ by the social platform. Typically it contains `code`, `state` and `redirectUri`\
            \ fields."
          type: object
        verificationRecordId:
          type: string
        verificationId:
          description: The verification ID of the SocialVerification record.
      required:
      - connectorData
      - verificationRecordId
      type: object
    _api_interaction_put_request_identifier_oneOf:
      properties:
        username:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      required:
      - password
      - username
      type: object
    _api_interaction_put_request_identifier_oneOf_1:
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      required:
      - email
      - password
      type: object
    _api_interaction_put_request_identifier_oneOf_2:
      properties:
        phone:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
      required:
      - password
      - phone
      type: object
    _api_interaction_put_request_identifier_oneOf_3:
      properties:
        connectorId:
          type: string
        connectorData:
          description: arbitrary
          type: object
      required:
      - connectorData
      - connectorId
      type: object
    _api_interaction_put_request_identifier_oneOf_4:
      properties:
        connectorId:
          type: string
        email:
          type: string
      required:
      - connectorId
      - email
      type: object
    _api_interaction_put_request_identifier_oneOf_5:
      properties:
        connectorId:
          type: string
        phone:
          type: string
      required:
      - connectorId
      - phone
      type: object
    _api_interaction_put_request_identifier:
      oneOf:
      - $ref: '#/components/schemas/_api_interaction_put_request_identifier_oneOf'
      - $ref: '#/components/schemas/_api_interaction_put_request_identifier_oneOf_1'
      - $ref: '#/components/schemas/_api_interaction_put_request_identifier_oneOf_2'
      - $ref: '#/components/schemas/VerifyVerificationCode_request_oneOf'
      - $ref: '#/components/schemas/VerifyVerificationCode_request_oneOf_1'
      - $ref: '#/components/schemas/_api_interaction_put_request_identifier_oneOf_3'
      - $ref: '#/components/schemas/_api_interaction_put_request_identifier_oneOf_4'
      - $ref: '#/components/schemas/_api_interaction_put_request_identifier_oneOf_5'
    _api_interaction_put_request_profile:
      properties:
        username:
          format: regex
          pattern: "/^[A-Z_a-z]\\w*$/"
          type: string
        email:
          format: regex
          pattern: /^\S+@\S+\.\S+$/
          type: string
        phone:
          format: regex
          pattern: /^\d+$/
          type: string
        connectorId:
          type: string
        password:
          type: string
      type: object
    _api_interaction_put_request:
      properties:
        event:
          enum:
          - SignIn
          - Register
          - ForgotPassword
          type: string
        identifier:
          $ref: '#/components/schemas/_api_interaction_put_request_identifier'
        profile:
          $ref: '#/components/schemas/_api_interaction_put_request_profile'
      required:
      - event
      type: object
    _api_interaction_event_put_request:
      properties:
        event:
          enum:
          - SignIn
          - Register
          - ForgotPassword
          type: string
      required:
      - event
      type: object
    _api_interaction_consent_get_200_response_application:
      example:
        termsOfUseUrl: termsOfUseUrl
        displayName: displayName
        branding:
          favicon: http://example.com/aeiou
          darkFavicon: http://example.com/aeiou
          darkLogoUrl: http://example.com/aeiou
          logoUrl: http://example.com/aeiou
        name: name
        id: id
        privacyPolicyUrl: privacyPolicyUrl
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        branding:
          $ref: '#/components/schemas/ListApplicationOrganizations_200_response_inner_branding'
        displayName:
          maxLength: 256
          nullable: true
          type: string
        privacyPolicyUrl:
          maxLength: 2048
          nullable: true
          type: string
        termsOfUseUrl:
          maxLength: 2048
          nullable: true
          type: string
      required:
      - id
      - name
      type: object
    _api_interaction_consent_get_200_response_user:
      example:
        primaryPhone: primaryPhone
        name: name
        id: id
        avatar: avatar
        primaryEmail: primaryEmail
        username: username
      properties:
        id:
          maxLength: 12
          minLength: 1
          type: string
        name:
          maxLength: 128
          nullable: true
          type: string
        avatar:
          maxLength: 2048
          nullable: true
          type: string
        username:
          maxLength: 128
          nullable: true
          type: string
        primaryEmail:
          maxLength: 128
          nullable: true
          type: string
        primaryPhone:
          maxLength: 128
          nullable: true
          type: string
      required:
      - avatar
      - id
      - name
      - primaryEmail
      - primaryPhone
      - username
      type: object
    _api_interaction_consent_get_200_response_organizations_inner_missingResourceScopes_inner_resource:
      example:
        indicator: indicator
        name: name
        id: id
      properties:
        name:
          minLength: 1
          type: string
        indicator:
          minLength: 1
          type: string
        id:
          type: string
      required:
      - id
      - indicator
      - name
      type: object
    _api_interaction_consent_get_200_response_organizations_inner_missingResourceScopes_inner:
      example:
        resource:
          indicator: indicator
          name: name
          id: id
        scopes:
        - name: name
          description: description
          id: id
        - name: name
          description: description
          id: id
      properties:
        resource:
          $ref: '#/components/schemas/_api_interaction_consent_get_200_response_organizations_inner_missingResourceScopes_inner_resource'
        scopes:
          items:
            $ref: '#/components/schemas/ListApplicationUserConsentScopes_200_response_resourceScopes_inner_scopes_inner'
          type: array
      required:
      - resource
      - scopes
      type: object
    _api_interaction_consent_get_200_response_organizations_inner:
      example:
        missingResourceScopes:
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        name: name
        id: id
      properties:
        id:
          maxLength: 21
          minLength: 1
          type: string
        name:
          maxLength: 128
          minLength: 1
          type: string
        missingResourceScopes:
          items:
            $ref: '#/components/schemas/_api_interaction_consent_get_200_response_organizations_inner_missingResourceScopes_inner'
          type: array
      required:
      - id
      - name
      type: object
    _api_interaction_consent_get_200_response:
      example:
        redirectUri: redirectUri
        missingOIDCScope:
        - missingOIDCScope
        - missingOIDCScope
        application:
          termsOfUseUrl: termsOfUseUrl
          displayName: displayName
          branding:
            favicon: http://example.com/aeiou
            darkFavicon: http://example.com/aeiou
            darkLogoUrl: http://example.com/aeiou
            logoUrl: http://example.com/aeiou
          name: name
          id: id
          privacyPolicyUrl: privacyPolicyUrl
        missingResourceScopes:
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        - resource:
            indicator: indicator
            name: name
            id: id
          scopes:
          - name: name
            description: description
            id: id
          - name: name
            description: description
            id: id
        organizations:
        - missingResourceScopes:
          - resource:
              indicator: indicator
              name: name
              id: id
            scopes:
            - name: name
              description: description
              id: id
            - name: name
              description: description
              id: id
          - resource:
              indicator: indicator
              name: name
              id: id
            scopes:
            - name: name
              description: description
              id: id
            - name: name
              description: description
              id: id
          name: name
          id: id
        - missingResourceScopes:
          - resource:
              indicator: indicator
              name: name
              id: id
            scopes:
            - name: name
              description: description
              id: id
            - name: name
              description: description
              id: id
          - resource:
              indicator: indicator
              name: name
              id: id
            scopes:
            - name: name
              description: description
              id: id
            - name: name
              description: description
              id: id
          name: name
          id: id
        user:
          primaryPhone: primaryPhone
          name: name
          id: id
          avatar: avatar
          primaryEmail: primaryEmail
          username: username
      properties:
        application:
          $ref: '#/components/schemas/_api_interaction_consent_get_200_response_application'
        user:
          $ref: '#/components/schemas/_api_interaction_consent_get_200_response_user'
        organizations:
          items:
            $ref: '#/components/schemas/_api_interaction_consent_get_200_response_organizations_inner'
          type: array
        missingOIDCScope:
          items:
            type: string
          type: array
        missingResourceScopes:
          items:
            $ref: '#/components/schemas/_api_interaction_consent_get_200_response_organizations_inner_missingResourceScopes_inner'
          type: array
        redirectUri:
          type: string
      required:
      - application
      - redirectUri
      - user
      type: object
    _api_interaction_consent_post_request:
      properties:
        organizationIds:
          items:
            type: string
          type: array
      type: object
    _api_interaction_verification_social_authorization_uri_post_request:
      properties:
        connectorId:
          type: string
        state:
          type: string
        redirectUri:
          description: Validator function
          type: object
      required:
      - connectorId
      - redirectUri
      - state
      type: object
    _api_interaction_verification_totp_post_200_response:
      example:
        secret: secret
        secretQrCode: secretQrCode
      properties:
        secret:
          type: string
        secretQrCode:
          type: string
      required:
      - secret
      - secretQrCode
      type: object
    _api_interaction_verification_webauthn_registration_post_200_response:
      example:
        extensions:
          credProps: true
          appid: appid
          hmacCreateSecret: true
        attestation: none
        challenge: challenge
        authenticatorSelection:
          authenticatorAttachment: platform
          userVerification: required
          requireResidentKey: true
          residentKey: discouraged
        user:
          displayName: displayName
          name: name
          id: id
        rp:
          name: name
          id: id
        timeout: 0.8008281904610115
        excludeCredentials:
        - transports:
          - usb
          - usb
          id: id
          type: type
        - transports:
          - usb
          - usb
          id: id
          type: type
        pubKeyCredParams:
        - type: type
          alg: 0.8008281904610115
        - type: type
          alg: 0.8008281904610115
      properties:
        rp:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_rp'
        user:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_user'
        challenge:
          type: string
        pubKeyCredParams:
          items:
            $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_pubKeyCredParams_inner'
          type: array
        timeout:
          type: number
        excludeCredentials:
          items:
            $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_excludeCredentials_inner'
          type: array
        authenticatorSelection:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_authenticatorSelection'
        attestation:
          enum:
          - none
          - indirect
          - direct
          - enterprise
          type: string
        extensions:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_extensions'
      required:
      - challenge
      - pubKeyCredParams
      - rp
      - user
      type: object
    _api_interaction_verification_webauthn_authentication_post_200_response:
      example:
        extensions:
          credProps: true
          appid: appid
          hmacCreateSecret: true
        userVerification: required
        challenge: challenge
        rpId: rpId
        timeout: 0.8008281904610115
        allowCredentials:
        - transports:
          - usb
          - usb
          id: id
          type: type
        - transports:
          - usb
          - usb
          id: id
          type: type
      properties:
        challenge:
          type: string
        timeout:
          type: number
        rpId:
          type: string
        allowCredentials:
          items:
            $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_excludeCredentials_inner'
          type: array
        userVerification:
          enum:
          - required
          - preferred
          - discouraged
          type: string
        extensions:
          $ref: '#/components/schemas/CreateWebAuthnRegistrationVerification_200_response_registrationOptions_extensions'
      required:
      - challenge
      type: object
    _api_interaction_bind_mfa_post_request_oneOf:
      properties:
        type:
          format: '"Totp"'
          type: string
        code:
          type: string
      required:
      - code
      - type
      type: object
    _api_interaction_bind_mfa_post_request_oneOf_1:
      properties:
        type:
          format: '"WebAuthn"'
          type: string
        id:
          type: string
        rawId:
          type: string
        response:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload_response'
        authenticatorAttachment:
          enum:
          - cross-platform
          - platform
          type: string
        clientExtensionResults:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload_clientExtensionResults'
      required:
      - clientExtensionResults
      - id
      - rawId
      - response
      - type
      type: object
    _api_interaction_bind_mfa_post_request_oneOf_2:
      properties:
        type:
          format: '"BackupCode"'
          type: string
      required:
      - type
      type: object
    _api_interaction_bind_mfa_post_request:
      oneOf:
      - $ref: '#/components/schemas/_api_interaction_bind_mfa_post_request_oneOf'
      - $ref: '#/components/schemas/_api_interaction_bind_mfa_post_request_oneOf_1'
      - $ref: '#/components/schemas/_api_interaction_bind_mfa_post_request_oneOf_2'
    _api_interaction_mfa_put_request_oneOf:
      properties:
        type:
          format: '"WebAuthn"'
          type: string
        id:
          type: string
        rawId:
          type: string
        authenticatorAttachment:
          enum:
          - cross-platform
          - platform
          type: string
        clientExtensionResults:
          $ref: '#/components/schemas/VerifyWebAuthnRegistrationVerification_request_payload_clientExtensionResults'
        response:
          $ref: '#/components/schemas/VerifyWebAuthnAuthenticationVerification_request_payload_response'
      required:
      - clientExtensionResults
      - id
      - rawId
      - response
      - type
      type: object
    _api_interaction_mfa_put_request_oneOf_1:
      properties:
        type:
          format: '"BackupCode"'
          type: string
        code:
          type: string
      required:
      - code
      - type
      type: object
    _api_interaction_mfa_put_request:
      oneOf:
      - $ref: '#/components/schemas/_api_interaction_bind_mfa_post_request_oneOf'
      - $ref: '#/components/schemas/_api_interaction_mfa_put_request_oneOf'
      - $ref: '#/components/schemas/_api_interaction_mfa_put_request_oneOf_1'
    _api_interaction_mfa_skipped_put_request:
      properties:
        mfaSkipped:
          format: "true"
          type: boolean
      required:
      - mfaSkipped
      type: object
    _api_interaction_single_sign_on__connectorId__authorization_url_post_request:
      properties:
        state:
          minLength: 1
          type: string
        redirectUri:
          description: Validator function
          type: object
      required:
      - redirectUri
      - state
      type: object
  securitySchemes:
    OAuth2:
      description: |-
        Logto Management API is a comprehensive set of REST APIs that gives you the full control over Logto to suit your product needs and tech stack. To see the full guide on Management API interactions, visit [Interact with Management API](https://docs.logto.io/docs/recipes/interact-with-management-api/).

        ### Get started

        The API follows the same authentication principles as other API resources in Logto, with some slight differences. To use Logto Management API:

        1. A machine-to-machine (M2M) application needs to be created.
        2. A machine-to-machine (M2M) role with Management API permission `all` needs to be assigned to the application.

        Once you have them set up, you can use the `client_credentials` grant type to fetch an access token and use it to authenticate your requests to the Logto Management API.

        ### Fetch an access token

        To fetch an access token, you need to make a `POST` request to the `/oidc/token` endpoint of your Logto tenant.

        For Logto Cloud users, the base URL is your Logto endpoint, i.e. `https://[tenant-id].logto.app`. The tenant ID can be found in the following places:

        - The first path segment of the URL when you are signed in to Logto Cloud. For example, if the URL is `https://cloud.logto.io/foo/get-started`, the tenant ID is `foo`.
        - In the "Settings" tab of Logto Cloud.

        The request should follow the OAuth 2.0 [client credentials](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) grant type. Here is a non-normative example of how to fetch an access token:

        ```bash
        curl --location \
          --request POST 'https://[tenant-id].logto.app/oidc/token' \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --data-urlencode 'grant_type=client_credentials' \
          --data-urlencode 'client_id=[app-id]' \
          --data-urlencode 'client_secret=[app-secret]' \
          --data-urlencode 'resource=https://[tenant-id].logto.app/api' \
          --data-urlencode 'scope=all'
        ```

        Replace `[tenant-id]`, `[app-id]`, and `[app-secret]` with your Logto tenant ID, application ID, and application secret, respectively.

        The response will be like:

        ```json
        {
          "access_token": "eyJhbG...2g", // Use this value for accessing the Logto Management API
          "expires_in": 3600, // Token expiration in seconds
          "token_type": "Bearer", // Token type for your request when using the access token
          "scope": "all" // Scope `all` for Logto Management API
        }
        ```

        ### Use the access token

        Once you have the access token, you can use it to authenticate your requests to the Logto Management API. The access token should be included in the `Authorization` header of your requests with the `Bearer` authentication scheme.

        Here is an example of how to list the first page of users in your Logto tenant:

        ```bash
        curl --location \
          --request GET 'https://[tenant-id].logto.app/api/users' \
          --header 'Authorization: Bearer eyJhbG...2g'
        ```

        Replace `[tenant-id]` with your Logto tenant ID and `eyJhbG...2g` with the access token you fetched earlier.
      flows:
        clientCredentials:
          scopes:
            all: All scopes
          tokenUrl: /oidc/token
      type: oauth2
