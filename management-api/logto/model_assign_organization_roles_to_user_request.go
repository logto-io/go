/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssignOrganizationRolesToUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssignOrganizationRolesToUserRequest{}

// AssignOrganizationRolesToUserRequest struct for AssignOrganizationRolesToUserRequest
type AssignOrganizationRolesToUserRequest struct {
	// An array of organization role IDs to assign to the user. User existed roles assignment will be ignored.
	OrganizationRoleIds []string `json:"organizationRoleIds"`
}

type _AssignOrganizationRolesToUserRequest AssignOrganizationRolesToUserRequest

// NewAssignOrganizationRolesToUserRequest instantiates a new AssignOrganizationRolesToUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignOrganizationRolesToUserRequest(organizationRoleIds []string) *AssignOrganizationRolesToUserRequest {
	this := AssignOrganizationRolesToUserRequest{}
	this.OrganizationRoleIds = organizationRoleIds
	return &this
}

// NewAssignOrganizationRolesToUserRequestWithDefaults instantiates a new AssignOrganizationRolesToUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignOrganizationRolesToUserRequestWithDefaults() *AssignOrganizationRolesToUserRequest {
	this := AssignOrganizationRolesToUserRequest{}
	return &this
}

// GetOrganizationRoleIds returns the OrganizationRoleIds field value
func (o *AssignOrganizationRolesToUserRequest) GetOrganizationRoleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OrganizationRoleIds
}

// GetOrganizationRoleIdsOk returns a tuple with the OrganizationRoleIds field value
// and a boolean to check if the value has been set.
func (o *AssignOrganizationRolesToUserRequest) GetOrganizationRoleIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationRoleIds, true
}

// SetOrganizationRoleIds sets field value
func (o *AssignOrganizationRolesToUserRequest) SetOrganizationRoleIds(v []string) {
	o.OrganizationRoleIds = v
}

func (o AssignOrganizationRolesToUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssignOrganizationRolesToUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationRoleIds"] = o.OrganizationRoleIds
	return toSerialize, nil
}

func (o *AssignOrganizationRolesToUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationRoleIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssignOrganizationRolesToUserRequest := _AssignOrganizationRolesToUserRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssignOrganizationRolesToUserRequest)

	if err != nil {
		return err
	}

	*o = AssignOrganizationRolesToUserRequest(varAssignOrganizationRolesToUserRequest)

	return err
}

type NullableAssignOrganizationRolesToUserRequest struct {
	value *AssignOrganizationRolesToUserRequest
	isSet bool
}

func (v NullableAssignOrganizationRolesToUserRequest) Get() *AssignOrganizationRolesToUserRequest {
	return v.value
}

func (v *NullableAssignOrganizationRolesToUserRequest) Set(val *AssignOrganizationRolesToUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignOrganizationRolesToUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignOrganizationRolesToUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignOrganizationRolesToUserRequest(val *AssignOrganizationRolesToUserRequest) *NullableAssignOrganizationRolesToUserRequest {
	return &NullableAssignOrganizationRolesToUserRequest{value: val, isSet: true}
}

func (v NullableAssignOrganizationRolesToUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignOrganizationRolesToUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


