/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VerifyTotpVerificationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyTotpVerificationRequest{}

// VerifyTotpVerificationRequest struct for VerifyTotpVerificationRequest
type VerifyTotpVerificationRequest struct {
	// The TOTP code to be verified.
	Code string `json:"code"`
	// The verification ID of the newly created TOTP secret. This ID is required to verify a newly created TOTP secret that needs to be bound to the user account. If not provided, the API will create a new TOTP verification record and verify the code against the user's existing TOTP secret.
	VerificationId *string `json:"verificationId,omitempty"`
}

type _VerifyTotpVerificationRequest VerifyTotpVerificationRequest

// NewVerifyTotpVerificationRequest instantiates a new VerifyTotpVerificationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyTotpVerificationRequest(code string) *VerifyTotpVerificationRequest {
	this := VerifyTotpVerificationRequest{}
	this.Code = code
	return &this
}

// NewVerifyTotpVerificationRequestWithDefaults instantiates a new VerifyTotpVerificationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyTotpVerificationRequestWithDefaults() *VerifyTotpVerificationRequest {
	this := VerifyTotpVerificationRequest{}
	return &this
}

// GetCode returns the Code field value
func (o *VerifyTotpVerificationRequest) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *VerifyTotpVerificationRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *VerifyTotpVerificationRequest) SetCode(v string) {
	o.Code = v
}

// GetVerificationId returns the VerificationId field value if set, zero value otherwise.
func (o *VerifyTotpVerificationRequest) GetVerificationId() string {
	if o == nil || IsNil(o.VerificationId) {
		var ret string
		return ret
	}
	return *o.VerificationId
}

// GetVerificationIdOk returns a tuple with the VerificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyTotpVerificationRequest) GetVerificationIdOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationId) {
		return nil, false
	}
	return o.VerificationId, true
}

// HasVerificationId returns a boolean if a field has been set.
func (o *VerifyTotpVerificationRequest) HasVerificationId() bool {
	if o != nil && !IsNil(o.VerificationId) {
		return true
	}

	return false
}

// SetVerificationId gets a reference to the given string and assigns it to the VerificationId field.
func (o *VerifyTotpVerificationRequest) SetVerificationId(v string) {
	o.VerificationId = &v
}

func (o VerifyTotpVerificationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyTotpVerificationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.VerificationId) {
		toSerialize["verificationId"] = o.VerificationId
	}
	return toSerialize, nil
}

func (o *VerifyTotpVerificationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyTotpVerificationRequest := _VerifyTotpVerificationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifyTotpVerificationRequest)

	if err != nil {
		return err
	}

	*o = VerifyTotpVerificationRequest(varVerifyTotpVerificationRequest)

	return err
}

type NullableVerifyTotpVerificationRequest struct {
	value *VerifyTotpVerificationRequest
	isSet bool
}

func (v NullableVerifyTotpVerificationRequest) Get() *VerifyTotpVerificationRequest {
	return v.value
}

func (v *NullableVerifyTotpVerificationRequest) Set(val *VerifyTotpVerificationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyTotpVerificationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyTotpVerificationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyTotpVerificationRequest(val *VerifyTotpVerificationRequest) *NullableVerifyTotpVerificationRequest {
	return &NullableVerifyTotpVerificationRequest{value: val, isSet: true}
}

func (v NullableVerifyTotpVerificationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyTotpVerificationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


