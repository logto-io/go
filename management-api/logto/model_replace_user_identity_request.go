/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplaceUserIdentityRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceUserIdentityRequest{}

// ReplaceUserIdentityRequest struct for ReplaceUserIdentityRequest
type ReplaceUserIdentityRequest struct {
	// The user's social identity ID.
	UserId string `json:"userId"`
	// The user's social identity details.
	Details map[string]interface{} `json:"details,omitempty"`
}

type _ReplaceUserIdentityRequest ReplaceUserIdentityRequest

// NewReplaceUserIdentityRequest instantiates a new ReplaceUserIdentityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceUserIdentityRequest(userId string) *ReplaceUserIdentityRequest {
	this := ReplaceUserIdentityRequest{}
	this.UserId = userId
	return &this
}

// NewReplaceUserIdentityRequestWithDefaults instantiates a new ReplaceUserIdentityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceUserIdentityRequestWithDefaults() *ReplaceUserIdentityRequest {
	this := ReplaceUserIdentityRequest{}
	return &this
}

// GetUserId returns the UserId field value
func (o *ReplaceUserIdentityRequest) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ReplaceUserIdentityRequest) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ReplaceUserIdentityRequest) SetUserId(v string) {
	o.UserId = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ReplaceUserIdentityRequest) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceUserIdentityRequest) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ReplaceUserIdentityRequest) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *ReplaceUserIdentityRequest) SetDetails(v map[string]interface{}) {
	o.Details = v
}

func (o ReplaceUserIdentityRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceUserIdentityRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

func (o *ReplaceUserIdentityRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplaceUserIdentityRequest := _ReplaceUserIdentityRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplaceUserIdentityRequest)

	if err != nil {
		return err
	}

	*o = ReplaceUserIdentityRequest(varReplaceUserIdentityRequest)

	return err
}

type NullableReplaceUserIdentityRequest struct {
	value *ReplaceUserIdentityRequest
	isSet bool
}

func (v NullableReplaceUserIdentityRequest) Get() *ReplaceUserIdentityRequest {
	return v.value
}

func (v *NullableReplaceUserIdentityRequest) Set(val *ReplaceUserIdentityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceUserIdentityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceUserIdentityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceUserIdentityRequest(val *ReplaceUserIdentityRequest) *NullableReplaceUserIdentityRequest {
	return &NullableReplaceUserIdentityRequest{value: val, isSet: true}
}

func (v NullableReplaceUserIdentityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceUserIdentityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


