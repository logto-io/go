/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
)

// checks if the IdentifyUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentifyUserRequest{}

// IdentifyUserRequest struct for IdentifyUserRequest
type IdentifyUserRequest struct {
	// The ID of the verification record used to identify the user. <br/>- `SignIn` and `ForgotPassword` interactions: Required to verify the user's identity. <br/>- `Register` interaction: Optional. If provided, it updates the profile data with the verification record before account creation. If omitted, the account is created using existing profile data in the current interaction.
	VerificationId *string `json:"verificationId,omitempty"`
	// Applies to the SignIn interaction only, and is used when a SocialVerification type verificationId is provided. <br/>- If `true`, the user is identified using the verified email or phone number from the social identity provider, and the social identity is linked to the user's account. <br/>- If `false` or not provided, the API identifies the user solely through the social identity. <br/> This parameters is used for linking a non-existing social identity to a related user account that can be identified through the verified email or phone number.
	LinkSocialIdentity *bool `json:"linkSocialIdentity,omitempty"`
}

// NewIdentifyUserRequest instantiates a new IdentifyUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentifyUserRequest() *IdentifyUserRequest {
	this := IdentifyUserRequest{}
	return &this
}

// NewIdentifyUserRequestWithDefaults instantiates a new IdentifyUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifyUserRequestWithDefaults() *IdentifyUserRequest {
	this := IdentifyUserRequest{}
	return &this
}

// GetVerificationId returns the VerificationId field value if set, zero value otherwise.
func (o *IdentifyUserRequest) GetVerificationId() string {
	if o == nil || IsNil(o.VerificationId) {
		var ret string
		return ret
	}
	return *o.VerificationId
}

// GetVerificationIdOk returns a tuple with the VerificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyUserRequest) GetVerificationIdOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationId) {
		return nil, false
	}
	return o.VerificationId, true
}

// HasVerificationId returns a boolean if a field has been set.
func (o *IdentifyUserRequest) HasVerificationId() bool {
	if o != nil && !IsNil(o.VerificationId) {
		return true
	}

	return false
}

// SetVerificationId gets a reference to the given string and assigns it to the VerificationId field.
func (o *IdentifyUserRequest) SetVerificationId(v string) {
	o.VerificationId = &v
}

// GetLinkSocialIdentity returns the LinkSocialIdentity field value if set, zero value otherwise.
func (o *IdentifyUserRequest) GetLinkSocialIdentity() bool {
	if o == nil || IsNil(o.LinkSocialIdentity) {
		var ret bool
		return ret
	}
	return *o.LinkSocialIdentity
}

// GetLinkSocialIdentityOk returns a tuple with the LinkSocialIdentity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifyUserRequest) GetLinkSocialIdentityOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkSocialIdentity) {
		return nil, false
	}
	return o.LinkSocialIdentity, true
}

// HasLinkSocialIdentity returns a boolean if a field has been set.
func (o *IdentifyUserRequest) HasLinkSocialIdentity() bool {
	if o != nil && !IsNil(o.LinkSocialIdentity) {
		return true
	}

	return false
}

// SetLinkSocialIdentity gets a reference to the given bool and assigns it to the LinkSocialIdentity field.
func (o *IdentifyUserRequest) SetLinkSocialIdentity(v bool) {
	o.LinkSocialIdentity = &v
}

func (o IdentifyUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentifyUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VerificationId) {
		toSerialize["verificationId"] = o.VerificationId
	}
	if !IsNil(o.LinkSocialIdentity) {
		toSerialize["linkSocialIdentity"] = o.LinkSocialIdentity
	}
	return toSerialize, nil
}

type NullableIdentifyUserRequest struct {
	value *IdentifyUserRequest
	isSet bool
}

func (v NullableIdentifyUserRequest) Get() *IdentifyUserRequest {
	return v.value
}

func (v *NullableIdentifyUserRequest) Set(val *IdentifyUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifyUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifyUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifyUserRequest(val *IdentifyUserRequest) *NullableIdentifyUserRequest {
	return &NullableIdentifyUserRequest{value: val, isSet: true}
}

func (v NullableIdentifyUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifyUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


