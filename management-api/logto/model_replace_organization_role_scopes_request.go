/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplaceOrganizationRoleScopesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceOrganizationRoleScopesRequest{}

// ReplaceOrganizationRoleScopesRequest struct for ReplaceOrganizationRoleScopesRequest
type ReplaceOrganizationRoleScopesRequest struct {
	// An array of organization scope IDs to replace existing scopes.
	OrganizationScopeIds []string `json:"organizationScopeIds"`
}

type _ReplaceOrganizationRoleScopesRequest ReplaceOrganizationRoleScopesRequest

// NewReplaceOrganizationRoleScopesRequest instantiates a new ReplaceOrganizationRoleScopesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceOrganizationRoleScopesRequest(organizationScopeIds []string) *ReplaceOrganizationRoleScopesRequest {
	this := ReplaceOrganizationRoleScopesRequest{}
	this.OrganizationScopeIds = organizationScopeIds
	return &this
}

// NewReplaceOrganizationRoleScopesRequestWithDefaults instantiates a new ReplaceOrganizationRoleScopesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceOrganizationRoleScopesRequestWithDefaults() *ReplaceOrganizationRoleScopesRequest {
	this := ReplaceOrganizationRoleScopesRequest{}
	return &this
}

// GetOrganizationScopeIds returns the OrganizationScopeIds field value
func (o *ReplaceOrganizationRoleScopesRequest) GetOrganizationScopeIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OrganizationScopeIds
}

// GetOrganizationScopeIdsOk returns a tuple with the OrganizationScopeIds field value
// and a boolean to check if the value has been set.
func (o *ReplaceOrganizationRoleScopesRequest) GetOrganizationScopeIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationScopeIds, true
}

// SetOrganizationScopeIds sets field value
func (o *ReplaceOrganizationRoleScopesRequest) SetOrganizationScopeIds(v []string) {
	o.OrganizationScopeIds = v
}

func (o ReplaceOrganizationRoleScopesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceOrganizationRoleScopesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationScopeIds"] = o.OrganizationScopeIds
	return toSerialize, nil
}

func (o *ReplaceOrganizationRoleScopesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationScopeIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplaceOrganizationRoleScopesRequest := _ReplaceOrganizationRoleScopesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplaceOrganizationRoleScopesRequest)

	if err != nil {
		return err
	}

	*o = ReplaceOrganizationRoleScopesRequest(varReplaceOrganizationRoleScopesRequest)

	return err
}

type NullableReplaceOrganizationRoleScopesRequest struct {
	value *ReplaceOrganizationRoleScopesRequest
	isSet bool
}

func (v NullableReplaceOrganizationRoleScopesRequest) Get() *ReplaceOrganizationRoleScopesRequest {
	return v.value
}

func (v *NullableReplaceOrganizationRoleScopesRequest) Set(val *ReplaceOrganizationRoleScopesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceOrganizationRoleScopesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceOrganizationRoleScopesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceOrganizationRoleScopesRequest(val *ReplaceOrganizationRoleScopesRequest) *NullableReplaceOrganizationRoleScopesRequest {
	return &NullableReplaceOrganizationRoleScopesRequest{value: val, isSet: true}
}

func (v NullableReplaceOrganizationRoleScopesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceOrganizationRoleScopesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


