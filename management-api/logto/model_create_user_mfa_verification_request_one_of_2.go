/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateUserMfaVerificationRequestOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserMfaVerificationRequestOneOf2{}

// CreateUserMfaVerificationRequestOneOf2 struct for CreateUserMfaVerificationRequestOneOf2
type CreateUserMfaVerificationRequestOneOf2 struct {
	// The type of MFA verification to create.
	Type string `json:"type"`
	// The secret for the MFA verification, if not provided, a new secret will be generated.
	Secret *string `json:"secret,omitempty"`
}

type _CreateUserMfaVerificationRequestOneOf2 CreateUserMfaVerificationRequestOneOf2

// NewCreateUserMfaVerificationRequestOneOf2 instantiates a new CreateUserMfaVerificationRequestOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserMfaVerificationRequestOneOf2(type_ string) *CreateUserMfaVerificationRequestOneOf2 {
	this := CreateUserMfaVerificationRequestOneOf2{}
	this.Type = type_
	return &this
}

// NewCreateUserMfaVerificationRequestOneOf2WithDefaults instantiates a new CreateUserMfaVerificationRequestOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserMfaVerificationRequestOneOf2WithDefaults() *CreateUserMfaVerificationRequestOneOf2 {
	this := CreateUserMfaVerificationRequestOneOf2{}
	return &this
}

// GetType returns the Type field value
func (o *CreateUserMfaVerificationRequestOneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateUserMfaVerificationRequestOneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateUserMfaVerificationRequestOneOf2) SetType(v string) {
	o.Type = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *CreateUserMfaVerificationRequestOneOf2) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserMfaVerificationRequestOneOf2) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *CreateUserMfaVerificationRequestOneOf2) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *CreateUserMfaVerificationRequestOneOf2) SetSecret(v string) {
	o.Secret = &v
}

func (o CreateUserMfaVerificationRequestOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserMfaVerificationRequestOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

func (o *CreateUserMfaVerificationRequestOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserMfaVerificationRequestOneOf2 := _CreateUserMfaVerificationRequestOneOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUserMfaVerificationRequestOneOf2)

	if err != nil {
		return err
	}

	*o = CreateUserMfaVerificationRequestOneOf2(varCreateUserMfaVerificationRequestOneOf2)

	return err
}

type NullableCreateUserMfaVerificationRequestOneOf2 struct {
	value *CreateUserMfaVerificationRequestOneOf2
	isSet bool
}

func (v NullableCreateUserMfaVerificationRequestOneOf2) Get() *CreateUserMfaVerificationRequestOneOf2 {
	return v.value
}

func (v *NullableCreateUserMfaVerificationRequestOneOf2) Set(val *CreateUserMfaVerificationRequestOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserMfaVerificationRequestOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserMfaVerificationRequestOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserMfaVerificationRequestOneOf2(val *CreateUserMfaVerificationRequestOneOf2) *NullableCreateUserMfaVerificationRequestOneOf2 {
	return &NullableCreateUserMfaVerificationRequestOneOf2{value: val, isSet: true}
}

func (v NullableCreateUserMfaVerificationRequestOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserMfaVerificationRequestOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


