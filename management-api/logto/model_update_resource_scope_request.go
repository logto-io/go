/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
)

// checks if the UpdateResourceScopeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateResourceScopeRequest{}

// UpdateResourceScopeRequest struct for UpdateResourceScopeRequest
type UpdateResourceScopeRequest struct {
	// The updated name of the scope. It should be unique for the resource.
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
}

// NewUpdateResourceScopeRequest instantiates a new UpdateResourceScopeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResourceScopeRequest() *UpdateResourceScopeRequest {
	this := UpdateResourceScopeRequest{}
	return &this
}

// NewUpdateResourceScopeRequestWithDefaults instantiates a new UpdateResourceScopeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResourceScopeRequestWithDefaults() *UpdateResourceScopeRequest {
	this := UpdateResourceScopeRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateResourceScopeRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateResourceScopeRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateResourceScopeRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateResourceScopeRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateResourceScopeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateResourceScopeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateResourceScopeRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UpdateResourceScopeRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpdateResourceScopeRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpdateResourceScopeRequest) UnsetDescription() {
	o.Description.Unset()
}

func (o UpdateResourceScopeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateResourceScopeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return toSerialize, nil
}

type NullableUpdateResourceScopeRequest struct {
	value *UpdateResourceScopeRequest
	isSet bool
}

func (v NullableUpdateResourceScopeRequest) Get() *UpdateResourceScopeRequest {
	return v.value
}

func (v *NullableUpdateResourceScopeRequest) Set(val *UpdateResourceScopeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResourceScopeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResourceScopeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResourceScopeRequest(val *UpdateResourceScopeRequest) *NullableUpdateResourceScopeRequest {
	return &NullableUpdateResourceScopeRequest{value: val, isSet: true}
}

func (v NullableUpdateResourceScopeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResourceScopeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


