/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetJwtCustomizer200Response - struct for GetJwtCustomizer200Response
type GetJwtCustomizer200Response struct {
	GetJwtCustomizer200ResponseOneOf *GetJwtCustomizer200ResponseOneOf
	GetJwtCustomizer200ResponseOneOf1 *GetJwtCustomizer200ResponseOneOf1
}

// GetJwtCustomizer200ResponseOneOfAsGetJwtCustomizer200Response is a convenience function that returns GetJwtCustomizer200ResponseOneOf wrapped in GetJwtCustomizer200Response
func GetJwtCustomizer200ResponseOneOfAsGetJwtCustomizer200Response(v *GetJwtCustomizer200ResponseOneOf) GetJwtCustomizer200Response {
	return GetJwtCustomizer200Response{
		GetJwtCustomizer200ResponseOneOf: v,
	}
}

// GetJwtCustomizer200ResponseOneOf1AsGetJwtCustomizer200Response is a convenience function that returns GetJwtCustomizer200ResponseOneOf1 wrapped in GetJwtCustomizer200Response
func GetJwtCustomizer200ResponseOneOf1AsGetJwtCustomizer200Response(v *GetJwtCustomizer200ResponseOneOf1) GetJwtCustomizer200Response {
	return GetJwtCustomizer200Response{
		GetJwtCustomizer200ResponseOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetJwtCustomizer200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetJwtCustomizer200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetJwtCustomizer200ResponseOneOf)
	if err == nil {
		jsonGetJwtCustomizer200ResponseOneOf, _ := json.Marshal(dst.GetJwtCustomizer200ResponseOneOf)
		if string(jsonGetJwtCustomizer200ResponseOneOf) == "{}" { // empty struct
			dst.GetJwtCustomizer200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetJwtCustomizer200ResponseOneOf); err != nil {
				dst.GetJwtCustomizer200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetJwtCustomizer200ResponseOneOf = nil
	}

	// try to unmarshal data into GetJwtCustomizer200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.GetJwtCustomizer200ResponseOneOf1)
	if err == nil {
		jsonGetJwtCustomizer200ResponseOneOf1, _ := json.Marshal(dst.GetJwtCustomizer200ResponseOneOf1)
		if string(jsonGetJwtCustomizer200ResponseOneOf1) == "{}" { // empty struct
			dst.GetJwtCustomizer200ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.GetJwtCustomizer200ResponseOneOf1); err != nil {
				dst.GetJwtCustomizer200ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetJwtCustomizer200ResponseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetJwtCustomizer200ResponseOneOf = nil
		dst.GetJwtCustomizer200ResponseOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetJwtCustomizer200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetJwtCustomizer200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetJwtCustomizer200Response) MarshalJSON() ([]byte, error) {
	if src.GetJwtCustomizer200ResponseOneOf != nil {
		return json.Marshal(&src.GetJwtCustomizer200ResponseOneOf)
	}

	if src.GetJwtCustomizer200ResponseOneOf1 != nil {
		return json.Marshal(&src.GetJwtCustomizer200ResponseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetJwtCustomizer200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetJwtCustomizer200ResponseOneOf != nil {
		return obj.GetJwtCustomizer200ResponseOneOf
	}

	if obj.GetJwtCustomizer200ResponseOneOf1 != nil {
		return obj.GetJwtCustomizer200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableGetJwtCustomizer200Response struct {
	value *GetJwtCustomizer200Response
	isSet bool
}

func (v NullableGetJwtCustomizer200Response) Get() *GetJwtCustomizer200Response {
	return v.value
}

func (v *NullableGetJwtCustomizer200Response) Set(val *GetJwtCustomizer200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetJwtCustomizer200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetJwtCustomizer200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetJwtCustomizer200Response(val *GetJwtCustomizer200Response) *NullableGetJwtCustomizer200Response {
	return &NullableGetJwtCustomizer200Response{value: val, isSet: true}
}

func (v NullableGetJwtCustomizer200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetJwtCustomizer200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


