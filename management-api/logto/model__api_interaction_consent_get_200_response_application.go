/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiInteractionConsentGet200ResponseApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiInteractionConsentGet200ResponseApplication{}

// ApiInteractionConsentGet200ResponseApplication struct for ApiInteractionConsentGet200ResponseApplication
type ApiInteractionConsentGet200ResponseApplication struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Branding *ListApplicationOrganizations200ResponseInnerBranding `json:"branding,omitempty"`
	DisplayName NullableString `json:"displayName,omitempty"`
	PrivacyPolicyUrl NullableString `json:"privacyPolicyUrl,omitempty"`
	TermsOfUseUrl NullableString `json:"termsOfUseUrl,omitempty"`
}

type _ApiInteractionConsentGet200ResponseApplication ApiInteractionConsentGet200ResponseApplication

// NewApiInteractionConsentGet200ResponseApplication instantiates a new ApiInteractionConsentGet200ResponseApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiInteractionConsentGet200ResponseApplication(id string, name string) *ApiInteractionConsentGet200ResponseApplication {
	this := ApiInteractionConsentGet200ResponseApplication{}
	this.Id = id
	this.Name = name
	return &this
}

// NewApiInteractionConsentGet200ResponseApplicationWithDefaults instantiates a new ApiInteractionConsentGet200ResponseApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiInteractionConsentGet200ResponseApplicationWithDefaults() *ApiInteractionConsentGet200ResponseApplication {
	this := ApiInteractionConsentGet200ResponseApplication{}
	return &this
}

// GetId returns the Id field value
func (o *ApiInteractionConsentGet200ResponseApplication) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApiInteractionConsentGet200ResponseApplication) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApiInteractionConsentGet200ResponseApplication) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ApiInteractionConsentGet200ResponseApplication) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiInteractionConsentGet200ResponseApplication) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiInteractionConsentGet200ResponseApplication) SetName(v string) {
	o.Name = v
}

// GetBranding returns the Branding field value if set, zero value otherwise.
func (o *ApiInteractionConsentGet200ResponseApplication) GetBranding() ListApplicationOrganizations200ResponseInnerBranding {
	if o == nil || IsNil(o.Branding) {
		var ret ListApplicationOrganizations200ResponseInnerBranding
		return ret
	}
	return *o.Branding
}

// GetBrandingOk returns a tuple with the Branding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInteractionConsentGet200ResponseApplication) GetBrandingOk() (*ListApplicationOrganizations200ResponseInnerBranding, bool) {
	if o == nil || IsNil(o.Branding) {
		return nil, false
	}
	return o.Branding, true
}

// HasBranding returns a boolean if a field has been set.
func (o *ApiInteractionConsentGet200ResponseApplication) HasBranding() bool {
	if o != nil && !IsNil(o.Branding) {
		return true
	}

	return false
}

// SetBranding gets a reference to the given ListApplicationOrganizations200ResponseInnerBranding and assigns it to the Branding field.
func (o *ApiInteractionConsentGet200ResponseApplication) SetBranding(v ListApplicationOrganizations200ResponseInnerBranding) {
	o.Branding = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiInteractionConsentGet200ResponseApplication) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiInteractionConsentGet200ResponseApplication) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ApiInteractionConsentGet200ResponseApplication) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ApiInteractionConsentGet200ResponseApplication) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ApiInteractionConsentGet200ResponseApplication) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ApiInteractionConsentGet200ResponseApplication) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetPrivacyPolicyUrl returns the PrivacyPolicyUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiInteractionConsentGet200ResponseApplication) GetPrivacyPolicyUrl() string {
	if o == nil || IsNil(o.PrivacyPolicyUrl.Get()) {
		var ret string
		return ret
	}
	return *o.PrivacyPolicyUrl.Get()
}

// GetPrivacyPolicyUrlOk returns a tuple with the PrivacyPolicyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiInteractionConsentGet200ResponseApplication) GetPrivacyPolicyUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivacyPolicyUrl.Get(), o.PrivacyPolicyUrl.IsSet()
}

// HasPrivacyPolicyUrl returns a boolean if a field has been set.
func (o *ApiInteractionConsentGet200ResponseApplication) HasPrivacyPolicyUrl() bool {
	if o != nil && o.PrivacyPolicyUrl.IsSet() {
		return true
	}

	return false
}

// SetPrivacyPolicyUrl gets a reference to the given NullableString and assigns it to the PrivacyPolicyUrl field.
func (o *ApiInteractionConsentGet200ResponseApplication) SetPrivacyPolicyUrl(v string) {
	o.PrivacyPolicyUrl.Set(&v)
}
// SetPrivacyPolicyUrlNil sets the value for PrivacyPolicyUrl to be an explicit nil
func (o *ApiInteractionConsentGet200ResponseApplication) SetPrivacyPolicyUrlNil() {
	o.PrivacyPolicyUrl.Set(nil)
}

// UnsetPrivacyPolicyUrl ensures that no value is present for PrivacyPolicyUrl, not even an explicit nil
func (o *ApiInteractionConsentGet200ResponseApplication) UnsetPrivacyPolicyUrl() {
	o.PrivacyPolicyUrl.Unset()
}

// GetTermsOfUseUrl returns the TermsOfUseUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiInteractionConsentGet200ResponseApplication) GetTermsOfUseUrl() string {
	if o == nil || IsNil(o.TermsOfUseUrl.Get()) {
		var ret string
		return ret
	}
	return *o.TermsOfUseUrl.Get()
}

// GetTermsOfUseUrlOk returns a tuple with the TermsOfUseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiInteractionConsentGet200ResponseApplication) GetTermsOfUseUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TermsOfUseUrl.Get(), o.TermsOfUseUrl.IsSet()
}

// HasTermsOfUseUrl returns a boolean if a field has been set.
func (o *ApiInteractionConsentGet200ResponseApplication) HasTermsOfUseUrl() bool {
	if o != nil && o.TermsOfUseUrl.IsSet() {
		return true
	}

	return false
}

// SetTermsOfUseUrl gets a reference to the given NullableString and assigns it to the TermsOfUseUrl field.
func (o *ApiInteractionConsentGet200ResponseApplication) SetTermsOfUseUrl(v string) {
	o.TermsOfUseUrl.Set(&v)
}
// SetTermsOfUseUrlNil sets the value for TermsOfUseUrl to be an explicit nil
func (o *ApiInteractionConsentGet200ResponseApplication) SetTermsOfUseUrlNil() {
	o.TermsOfUseUrl.Set(nil)
}

// UnsetTermsOfUseUrl ensures that no value is present for TermsOfUseUrl, not even an explicit nil
func (o *ApiInteractionConsentGet200ResponseApplication) UnsetTermsOfUseUrl() {
	o.TermsOfUseUrl.Unset()
}

func (o ApiInteractionConsentGet200ResponseApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiInteractionConsentGet200ResponseApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Branding) {
		toSerialize["branding"] = o.Branding
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.PrivacyPolicyUrl.IsSet() {
		toSerialize["privacyPolicyUrl"] = o.PrivacyPolicyUrl.Get()
	}
	if o.TermsOfUseUrl.IsSet() {
		toSerialize["termsOfUseUrl"] = o.TermsOfUseUrl.Get()
	}
	return toSerialize, nil
}

func (o *ApiInteractionConsentGet200ResponseApplication) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiInteractionConsentGet200ResponseApplication := _ApiInteractionConsentGet200ResponseApplication{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiInteractionConsentGet200ResponseApplication)

	if err != nil {
		return err
	}

	*o = ApiInteractionConsentGet200ResponseApplication(varApiInteractionConsentGet200ResponseApplication)

	return err
}

type NullableApiInteractionConsentGet200ResponseApplication struct {
	value *ApiInteractionConsentGet200ResponseApplication
	isSet bool
}

func (v NullableApiInteractionConsentGet200ResponseApplication) Get() *ApiInteractionConsentGet200ResponseApplication {
	return v.value
}

func (v *NullableApiInteractionConsentGet200ResponseApplication) Set(val *ApiInteractionConsentGet200ResponseApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableApiInteractionConsentGet200ResponseApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableApiInteractionConsentGet200ResponseApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiInteractionConsentGet200ResponseApplication(val *ApiInteractionConsentGet200ResponseApplication) *NullableApiInteractionConsentGet200ResponseApplication {
	return &NullableApiInteractionConsentGet200ResponseApplication{value: val, isSet: true}
}

func (v NullableApiInteractionConsentGet200ResponseApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiInteractionConsentGet200ResponseApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


