/*
Logto API references

Testing OrganizationRolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package logto

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/logto-io/go/management-api/logto"
)

func Test_logto_OrganizationRolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationRolesAPIService CreateOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganizationRolesAPI.CreateOrganizationRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService CreateOrganizationRoleResourceScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationRolesAPI.CreateOrganizationRoleResourceScope(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService CreateOrganizationRoleScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationRolesAPI.CreateOrganizationRoleScope(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService DeleteOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationRolesAPI.DeleteOrganizationRole(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService DeleteOrganizationRoleResourceScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var scopeId string

		httpRes, err := apiClient.OrganizationRolesAPI.DeleteOrganizationRoleResourceScope(context.Background(), id, scopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService DeleteOrganizationRoleScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var organizationScopeId string

		httpRes, err := apiClient.OrganizationRolesAPI.DeleteOrganizationRoleScope(context.Background(), id, organizationScopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService GetOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationRolesAPI.GetOrganizationRole(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService ListOrganizationRoleResourceScopes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationRolesAPI.ListOrganizationRoleResourceScopes(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService ListOrganizationRoleScopes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationRolesAPI.ListOrganizationRoleScopes(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService ListOrganizationRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganizationRolesAPI.ListOrganizationRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService ReplaceOrganizationRoleResourceScopes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationRolesAPI.ReplaceOrganizationRoleResourceScopes(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService ReplaceOrganizationRoleScopes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationRolesAPI.ReplaceOrganizationRoleScopes(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationRolesAPIService UpdateOrganizationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationRolesAPI.UpdateOrganizationRole(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
