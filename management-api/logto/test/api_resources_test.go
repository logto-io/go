/*
Logto API references

Testing ResourcesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package logto

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/logto-io/go/management-api/logto"
)

func Test_logto_ResourcesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourcesAPIService CreateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourcesAPI.CreateResource(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService CreateResourceScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesAPI.CreateResourceScope(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService DeleteResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ResourcesAPI.DeleteResource(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService DeleteResourceScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string
		var scopeId string

		httpRes, err := apiClient.ResourcesAPI.DeleteResourceScope(context.Background(), resourceId, scopeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService GetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ResourcesAPI.GetResource(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService ListResourceScopes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string

		resp, httpRes, err := apiClient.ResourcesAPI.ListResourceScopes(context.Background(), resourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService ListResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourcesAPI.ListResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService UpdateResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ResourcesAPI.UpdateResource(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService UpdateResourceIsDefault", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ResourcesAPI.UpdateResourceIsDefault(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService UpdateResourceScope", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string
		var scopeId string

		resp, httpRes, err := apiClient.ResourcesAPI.UpdateResourceScope(context.Background(), resourceId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
