/*
Logto API references

Testing ConfigsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package logto

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/logto-io/go/management-api/logto"
)

func Test_logto_ConfigsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConfigsAPIService DeleteJwtCustomizer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenTypePath string

		httpRes, err := apiClient.ConfigsAPI.DeleteJwtCustomizer(context.Background(), tokenTypePath).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService DeleteOidcKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keyType string
		var keyId string

		httpRes, err := apiClient.ConfigsAPI.DeleteOidcKey(context.Background(), keyType, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService GetAdminConsoleConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.GetAdminConsoleConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService GetJwtCustomizer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenTypePath string

		resp, httpRes, err := apiClient.ConfigsAPI.GetJwtCustomizer(context.Background(), tokenTypePath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService GetOidcKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keyType string

		resp, httpRes, err := apiClient.ConfigsAPI.GetOidcKeys(context.Background(), keyType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService ListJwtCustomizers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.ListJwtCustomizers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService RotateOidcKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keyType string

		resp, httpRes, err := apiClient.ConfigsAPI.RotateOidcKeys(context.Background(), keyType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService TestJwtCustomizer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.TestJwtCustomizer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService UpdateAdminConsoleConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConfigsAPI.UpdateAdminConsoleConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService UpdateJwtCustomizer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenTypePath string

		resp, httpRes, err := apiClient.ConfigsAPI.UpdateJwtCustomizer(context.Background(), tokenTypePath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConfigsAPIService UpsertJwtCustomizer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tokenTypePath string

		resp, httpRes, err := apiClient.ConfigsAPI.UpsertJwtCustomizer(context.Background(), tokenTypePath).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
