/*
Logto API references

Testing OrganizationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package logto

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/logto-io/go/management-api/logto"
)

func Test_logto_OrganizationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationsAPIService AddOrganizationApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.AddOrganizationApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AddOrganizationUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.AddOrganizationUsers(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AssignOrganizationRolesToApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var applicationId string

		httpRes, err := apiClient.OrganizationsAPI.AssignOrganizationRolesToApplication(context.Background(), id, applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AssignOrganizationRolesToApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.AssignOrganizationRolesToApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AssignOrganizationRolesToUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		httpRes, err := apiClient.OrganizationsAPI.AssignOrganizationRolesToUser(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService AssignOrganizationRolesToUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.AssignOrganizationRolesToUsers(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateOrganization(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganizationJitEmailDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.CreateOrganizationJitEmailDomain(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganizationJitRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.CreateOrganizationJitRole(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService CreateOrganizationJitSsoConnector", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.CreateOrganizationJitSsoConnector(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganization(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationApplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var applicationId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationApplication(context.Background(), id, applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationApplicationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var applicationId string
		var organizationRoleId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationApplicationRole(context.Background(), id, applicationId, organizationRoleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationJitEmailDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var emailDomain string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationJitEmailDomain(context.Background(), id, emailDomain).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationJitRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var organizationRoleId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationJitRole(context.Background(), id, organizationRoleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationJitSsoConnector", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var ssoConnectorId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationJitSsoConnector(context.Background(), id, ssoConnectorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationUser(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService DeleteOrganizationUserRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string
		var organizationRoleId string

		httpRes, err := apiClient.OrganizationsAPI.DeleteOrganizationUserRole(context.Background(), id, userId, organizationRoleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService GetOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.GetOrganization(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationApplicationRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var applicationId string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationApplicationRoles(context.Background(), id, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationJitEmailDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationJitEmailDomains(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationJitRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationJitRoles(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationJitSsoConnectors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationJitSsoConnectors(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationUserRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationUserRoles(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationUserScopes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationUserScopes(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizationUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizationUsers(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ListOrganizations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrganizationsAPI.ListOrganizations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReplaceOrganizationApplicationRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var applicationId string

		httpRes, err := apiClient.OrganizationsAPI.ReplaceOrganizationApplicationRoles(context.Background(), id, applicationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReplaceOrganizationApplications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.ReplaceOrganizationApplications(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReplaceOrganizationJitEmailDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.ReplaceOrganizationJitEmailDomains(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReplaceOrganizationJitRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.ReplaceOrganizationJitRoles(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReplaceOrganizationJitSsoConnectors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.ReplaceOrganizationJitSsoConnectors(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReplaceOrganizationUserRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		httpRes, err := apiClient.OrganizationsAPI.ReplaceOrganizationUserRoles(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService ReplaceOrganizationUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.OrganizationsAPI.ReplaceOrganizationUsers(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationsAPIService UpdateOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OrganizationsAPI.UpdateOrganization(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
