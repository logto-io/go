/*
Logto API references

Testing InteractionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package logto

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/logto-io/go/management-api/logto"
)

func Test_logto_InteractionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InteractionAPIService ApiInteractionBindMfaPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionBindMfaPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionConsentGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionConsentGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionConsentPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionConsentPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionEventPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionEventPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionIdentifiersPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionIdentifiersPatch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionMfaPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionMfaPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionMfaSkippedPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionMfaSkippedPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionProfileDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionProfileDelete(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionProfilePatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionProfilePatch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionProfilePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionProfilePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionSingleSignOnConnectorIdAuthenticationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connectorId string

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionSingleSignOnConnectorIdAuthenticationPost(context.Background(), connectorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionSingleSignOnConnectorIdAuthorizationUrlPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connectorId string

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionSingleSignOnConnectorIdAuthorizationUrlPost(context.Background(), connectorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionSingleSignOnConnectorIdRegistrationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connectorId string

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionSingleSignOnConnectorIdRegistrationPost(context.Background(), connectorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionSingleSignOnConnectorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionSingleSignOnConnectorsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionSubmitPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionSubmitPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionVerificationSocialAuthorizationUriPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionVerificationSocialAuthorizationUriPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionVerificationTotpPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionVerificationTotpPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionVerificationVerificationCodePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.InteractionAPI.ApiInteractionVerificationVerificationCodePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionVerificationWebauthnAuthenticationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionVerificationWebauthnAuthenticationPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InteractionAPIService ApiInteractionVerificationWebauthnRegistrationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InteractionAPI.ApiInteractionVerificationWebauthnRegistrationPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
