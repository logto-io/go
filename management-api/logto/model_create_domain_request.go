/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDomainRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDomainRequest{}

// CreateDomainRequest struct for CreateDomainRequest
type CreateDomainRequest struct {
	// The domain name, e.g. `example.com`.
	Domain string `json:"domain"`
}

type _CreateDomainRequest CreateDomainRequest

// NewCreateDomainRequest instantiates a new CreateDomainRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDomainRequest(domain string) *CreateDomainRequest {
	this := CreateDomainRequest{}
	this.Domain = domain
	return &this
}

// NewCreateDomainRequestWithDefaults instantiates a new CreateDomainRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDomainRequestWithDefaults() *CreateDomainRequest {
	this := CreateDomainRequest{}
	return &this
}

// GetDomain returns the Domain field value
func (o *CreateDomainRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CreateDomainRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CreateDomainRequest) SetDomain(v string) {
	o.Domain = v
}

func (o CreateDomainRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDomainRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	return toSerialize, nil
}

func (o *CreateDomainRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDomainRequest := _CreateDomainRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDomainRequest)

	if err != nil {
		return err
	}

	*o = CreateDomainRequest(varCreateDomainRequest)

	return err
}

type NullableCreateDomainRequest struct {
	value *CreateDomainRequest
	isSet bool
}

func (v NullableCreateDomainRequest) Get() *CreateDomainRequest {
	return v.value
}

func (v *NullableCreateDomainRequest) Set(val *CreateDomainRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDomainRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDomainRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDomainRequest(val *CreateDomainRequest) *NullableCreateDomainRequest {
	return &NullableCreateDomainRequest{value: val, isSet: true}
}

func (v NullableCreateDomainRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDomainRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


