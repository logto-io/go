/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssertSingleSignOnSamlRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssertSingleSignOnSamlRequest{}

// AssertSingleSignOnSamlRequest struct for AssertSingleSignOnSamlRequest
type AssertSingleSignOnSamlRequest struct {
	// SAML standard parameter that will be transmitted between the identity provider and the service provider. It will be used as the session ID (jti) of the user's Logto authentication session. This API will use this session ID to retrieve the SSO connector authentication session from the database.
	RelayState *string `json:"RelayState,omitempty"`
	// The SAML assertion response from the identity provider (IdP).
	SAMLResponse string `json:"SAMLResponse"`
}

type _AssertSingleSignOnSamlRequest AssertSingleSignOnSamlRequest

// NewAssertSingleSignOnSamlRequest instantiates a new AssertSingleSignOnSamlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssertSingleSignOnSamlRequest(sAMLResponse string) *AssertSingleSignOnSamlRequest {
	this := AssertSingleSignOnSamlRequest{}
	this.SAMLResponse = sAMLResponse
	return &this
}

// NewAssertSingleSignOnSamlRequestWithDefaults instantiates a new AssertSingleSignOnSamlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssertSingleSignOnSamlRequestWithDefaults() *AssertSingleSignOnSamlRequest {
	this := AssertSingleSignOnSamlRequest{}
	return &this
}

// GetRelayState returns the RelayState field value if set, zero value otherwise.
func (o *AssertSingleSignOnSamlRequest) GetRelayState() string {
	if o == nil || IsNil(o.RelayState) {
		var ret string
		return ret
	}
	return *o.RelayState
}

// GetRelayStateOk returns a tuple with the RelayState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssertSingleSignOnSamlRequest) GetRelayStateOk() (*string, bool) {
	if o == nil || IsNil(o.RelayState) {
		return nil, false
	}
	return o.RelayState, true
}

// HasRelayState returns a boolean if a field has been set.
func (o *AssertSingleSignOnSamlRequest) HasRelayState() bool {
	if o != nil && !IsNil(o.RelayState) {
		return true
	}

	return false
}

// SetRelayState gets a reference to the given string and assigns it to the RelayState field.
func (o *AssertSingleSignOnSamlRequest) SetRelayState(v string) {
	o.RelayState = &v
}

// GetSAMLResponse returns the SAMLResponse field value
func (o *AssertSingleSignOnSamlRequest) GetSAMLResponse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SAMLResponse
}

// GetSAMLResponseOk returns a tuple with the SAMLResponse field value
// and a boolean to check if the value has been set.
func (o *AssertSingleSignOnSamlRequest) GetSAMLResponseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SAMLResponse, true
}

// SetSAMLResponse sets field value
func (o *AssertSingleSignOnSamlRequest) SetSAMLResponse(v string) {
	o.SAMLResponse = v
}

func (o AssertSingleSignOnSamlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssertSingleSignOnSamlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RelayState) {
		toSerialize["RelayState"] = o.RelayState
	}
	toSerialize["SAMLResponse"] = o.SAMLResponse
	return toSerialize, nil
}

func (o *AssertSingleSignOnSamlRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"SAMLResponse",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssertSingleSignOnSamlRequest := _AssertSingleSignOnSamlRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssertSingleSignOnSamlRequest)

	if err != nil {
		return err
	}

	*o = AssertSingleSignOnSamlRequest(varAssertSingleSignOnSamlRequest)

	return err
}

type NullableAssertSingleSignOnSamlRequest struct {
	value *AssertSingleSignOnSamlRequest
	isSet bool
}

func (v NullableAssertSingleSignOnSamlRequest) Get() *AssertSingleSignOnSamlRequest {
	return v.value
}

func (v *NullableAssertSingleSignOnSamlRequest) Set(val *AssertSingleSignOnSamlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAssertSingleSignOnSamlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAssertSingleSignOnSamlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssertSingleSignOnSamlRequest(val *AssertSingleSignOnSamlRequest) *NullableAssertSingleSignOnSamlRequest {
	return &NullableAssertSingleSignOnSamlRequest{value: val, isSet: true}
}

func (v NullableAssertSingleSignOnSamlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssertSingleSignOnSamlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


