/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetActiveUserCounts200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetActiveUserCounts200Response{}

// GetActiveUserCounts200Response struct for GetActiveUserCounts200Response
type GetActiveUserCounts200Response struct {
	DauCurve []GetActiveUserCounts200ResponseDauCurveInner `json:"dauCurve"`
	Dau GetNewUserCounts200ResponseToday `json:"dau"`
	Wau GetNewUserCounts200ResponseToday `json:"wau"`
	Mau GetNewUserCounts200ResponseToday `json:"mau"`
}

type _GetActiveUserCounts200Response GetActiveUserCounts200Response

// NewGetActiveUserCounts200Response instantiates a new GetActiveUserCounts200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetActiveUserCounts200Response(dauCurve []GetActiveUserCounts200ResponseDauCurveInner, dau GetNewUserCounts200ResponseToday, wau GetNewUserCounts200ResponseToday, mau GetNewUserCounts200ResponseToday) *GetActiveUserCounts200Response {
	this := GetActiveUserCounts200Response{}
	this.DauCurve = dauCurve
	this.Dau = dau
	this.Wau = wau
	this.Mau = mau
	return &this
}

// NewGetActiveUserCounts200ResponseWithDefaults instantiates a new GetActiveUserCounts200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetActiveUserCounts200ResponseWithDefaults() *GetActiveUserCounts200Response {
	this := GetActiveUserCounts200Response{}
	return &this
}

// GetDauCurve returns the DauCurve field value
func (o *GetActiveUserCounts200Response) GetDauCurve() []GetActiveUserCounts200ResponseDauCurveInner {
	if o == nil {
		var ret []GetActiveUserCounts200ResponseDauCurveInner
		return ret
	}

	return o.DauCurve
}

// GetDauCurveOk returns a tuple with the DauCurve field value
// and a boolean to check if the value has been set.
func (o *GetActiveUserCounts200Response) GetDauCurveOk() ([]GetActiveUserCounts200ResponseDauCurveInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.DauCurve, true
}

// SetDauCurve sets field value
func (o *GetActiveUserCounts200Response) SetDauCurve(v []GetActiveUserCounts200ResponseDauCurveInner) {
	o.DauCurve = v
}

// GetDau returns the Dau field value
func (o *GetActiveUserCounts200Response) GetDau() GetNewUserCounts200ResponseToday {
	if o == nil {
		var ret GetNewUserCounts200ResponseToday
		return ret
	}

	return o.Dau
}

// GetDauOk returns a tuple with the Dau field value
// and a boolean to check if the value has been set.
func (o *GetActiveUserCounts200Response) GetDauOk() (*GetNewUserCounts200ResponseToday, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dau, true
}

// SetDau sets field value
func (o *GetActiveUserCounts200Response) SetDau(v GetNewUserCounts200ResponseToday) {
	o.Dau = v
}

// GetWau returns the Wau field value
func (o *GetActiveUserCounts200Response) GetWau() GetNewUserCounts200ResponseToday {
	if o == nil {
		var ret GetNewUserCounts200ResponseToday
		return ret
	}

	return o.Wau
}

// GetWauOk returns a tuple with the Wau field value
// and a boolean to check if the value has been set.
func (o *GetActiveUserCounts200Response) GetWauOk() (*GetNewUserCounts200ResponseToday, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wau, true
}

// SetWau sets field value
func (o *GetActiveUserCounts200Response) SetWau(v GetNewUserCounts200ResponseToday) {
	o.Wau = v
}

// GetMau returns the Mau field value
func (o *GetActiveUserCounts200Response) GetMau() GetNewUserCounts200ResponseToday {
	if o == nil {
		var ret GetNewUserCounts200ResponseToday
		return ret
	}

	return o.Mau
}

// GetMauOk returns a tuple with the Mau field value
// and a boolean to check if the value has been set.
func (o *GetActiveUserCounts200Response) GetMauOk() (*GetNewUserCounts200ResponseToday, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mau, true
}

// SetMau sets field value
func (o *GetActiveUserCounts200Response) SetMau(v GetNewUserCounts200ResponseToday) {
	o.Mau = v
}

func (o GetActiveUserCounts200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetActiveUserCounts200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dauCurve"] = o.DauCurve
	toSerialize["dau"] = o.Dau
	toSerialize["wau"] = o.Wau
	toSerialize["mau"] = o.Mau
	return toSerialize, nil
}

func (o *GetActiveUserCounts200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dauCurve",
		"dau",
		"wau",
		"mau",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetActiveUserCounts200Response := _GetActiveUserCounts200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetActiveUserCounts200Response)

	if err != nil {
		return err
	}

	*o = GetActiveUserCounts200Response(varGetActiveUserCounts200Response)

	return err
}

type NullableGetActiveUserCounts200Response struct {
	value *GetActiveUserCounts200Response
	isSet bool
}

func (v NullableGetActiveUserCounts200Response) Get() *GetActiveUserCounts200Response {
	return v.value
}

func (v *NullableGetActiveUserCounts200Response) Set(val *GetActiveUserCounts200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetActiveUserCounts200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetActiveUserCounts200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetActiveUserCounts200Response(val *GetActiveUserCounts200Response) *NullableGetActiveUserCounts200Response {
	return &NullableGetActiveUserCounts200Response{value: val, isSet: true}
}

func (v NullableGetActiveUserCounts200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetActiveUserCounts200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


