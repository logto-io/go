/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateSubjectTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubjectTokenRequest{}

// CreateSubjectTokenRequest struct for CreateSubjectTokenRequest
type CreateSubjectTokenRequest struct {
	// The ID of the user to impersonate.
	UserId string `json:"userId"`
	// The additional context to be included in the token, this can be used in custom JWT.
	Context map[string]interface{} `json:"context,omitempty"`
}

type _CreateSubjectTokenRequest CreateSubjectTokenRequest

// NewCreateSubjectTokenRequest instantiates a new CreateSubjectTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubjectTokenRequest(userId string) *CreateSubjectTokenRequest {
	this := CreateSubjectTokenRequest{}
	this.UserId = userId
	return &this
}

// NewCreateSubjectTokenRequestWithDefaults instantiates a new CreateSubjectTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubjectTokenRequestWithDefaults() *CreateSubjectTokenRequest {
	this := CreateSubjectTokenRequest{}
	return &this
}

// GetUserId returns the UserId field value
func (o *CreateSubjectTokenRequest) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreateSubjectTokenRequest) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreateSubjectTokenRequest) SetUserId(v string) {
	o.UserId = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *CreateSubjectTokenRequest) GetContext() map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubjectTokenRequest) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return map[string]interface{}{}, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *CreateSubjectTokenRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *CreateSubjectTokenRequest) SetContext(v map[string]interface{}) {
	o.Context = v
}

func (o CreateSubjectTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubjectTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

func (o *CreateSubjectTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSubjectTokenRequest := _CreateSubjectTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSubjectTokenRequest)

	if err != nil {
		return err
	}

	*o = CreateSubjectTokenRequest(varCreateSubjectTokenRequest)

	return err
}

type NullableCreateSubjectTokenRequest struct {
	value *CreateSubjectTokenRequest
	isSet bool
}

func (v NullableCreateSubjectTokenRequest) Get() *CreateSubjectTokenRequest {
	return v.value
}

func (v *NullableCreateSubjectTokenRequest) Set(val *CreateSubjectTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubjectTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubjectTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubjectTokenRequest(val *CreateSubjectTokenRequest) *NullableCreateSubjectTokenRequest {
	return &NullableCreateSubjectTokenRequest{value: val, isSet: true}
}

func (v NullableCreateSubjectTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubjectTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


