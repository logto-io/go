/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateApplicationSecretRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateApplicationSecretRequest{}

// UpdateApplicationSecretRequest struct for UpdateApplicationSecretRequest
type UpdateApplicationSecretRequest struct {
	// The secret name to update. Must be unique within the application.
	Name string `json:"name"`
}

type _UpdateApplicationSecretRequest UpdateApplicationSecretRequest

// NewUpdateApplicationSecretRequest instantiates a new UpdateApplicationSecretRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateApplicationSecretRequest(name string) *UpdateApplicationSecretRequest {
	this := UpdateApplicationSecretRequest{}
	this.Name = name
	return &this
}

// NewUpdateApplicationSecretRequestWithDefaults instantiates a new UpdateApplicationSecretRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateApplicationSecretRequestWithDefaults() *UpdateApplicationSecretRequest {
	this := UpdateApplicationSecretRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateApplicationSecretRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateApplicationSecretRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateApplicationSecretRequest) SetName(v string) {
	o.Name = v
}

func (o UpdateApplicationSecretRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateApplicationSecretRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *UpdateApplicationSecretRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateApplicationSecretRequest := _UpdateApplicationSecretRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateApplicationSecretRequest)

	if err != nil {
		return err
	}

	*o = UpdateApplicationSecretRequest(varUpdateApplicationSecretRequest)

	return err
}

type NullableUpdateApplicationSecretRequest struct {
	value *UpdateApplicationSecretRequest
	isSet bool
}

func (v NullableUpdateApplicationSecretRequest) Get() *UpdateApplicationSecretRequest {
	return v.value
}

func (v *NullableUpdateApplicationSecretRequest) Set(val *UpdateApplicationSecretRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateApplicationSecretRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateApplicationSecretRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateApplicationSecretRequest(val *UpdateApplicationSecretRequest) *NullableUpdateApplicationSecretRequest {
	return &NullableUpdateApplicationSecretRequest{value: val, isSet: true}
}

func (v NullableUpdateApplicationSecretRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateApplicationSecretRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


