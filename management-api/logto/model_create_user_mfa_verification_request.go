/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateUserMfaVerificationRequest - struct for CreateUserMfaVerificationRequest
type CreateUserMfaVerificationRequest struct {
	CreateUserMfaVerificationRequestOneOf *CreateUserMfaVerificationRequestOneOf
	CreateUserMfaVerificationRequestOneOf1 *CreateUserMfaVerificationRequestOneOf1
	CreateUserMfaVerificationRequestOneOf2 *CreateUserMfaVerificationRequestOneOf2
	CreateUserMfaVerificationRequestOneOf3 *CreateUserMfaVerificationRequestOneOf3
}

// CreateUserMfaVerificationRequestOneOfAsCreateUserMfaVerificationRequest is a convenience function that returns CreateUserMfaVerificationRequestOneOf wrapped in CreateUserMfaVerificationRequest
func CreateUserMfaVerificationRequestOneOfAsCreateUserMfaVerificationRequest(v *CreateUserMfaVerificationRequestOneOf) CreateUserMfaVerificationRequest {
	return CreateUserMfaVerificationRequest{
		CreateUserMfaVerificationRequestOneOf: v,
	}
}

// CreateUserMfaVerificationRequestOneOf1AsCreateUserMfaVerificationRequest is a convenience function that returns CreateUserMfaVerificationRequestOneOf1 wrapped in CreateUserMfaVerificationRequest
func CreateUserMfaVerificationRequestOneOf1AsCreateUserMfaVerificationRequest(v *CreateUserMfaVerificationRequestOneOf1) CreateUserMfaVerificationRequest {
	return CreateUserMfaVerificationRequest{
		CreateUserMfaVerificationRequestOneOf1: v,
	}
}

// CreateUserMfaVerificationRequestOneOf2AsCreateUserMfaVerificationRequest is a convenience function that returns CreateUserMfaVerificationRequestOneOf2 wrapped in CreateUserMfaVerificationRequest
func CreateUserMfaVerificationRequestOneOf2AsCreateUserMfaVerificationRequest(v *CreateUserMfaVerificationRequestOneOf2) CreateUserMfaVerificationRequest {
	return CreateUserMfaVerificationRequest{
		CreateUserMfaVerificationRequestOneOf2: v,
	}
}

// CreateUserMfaVerificationRequestOneOf3AsCreateUserMfaVerificationRequest is a convenience function that returns CreateUserMfaVerificationRequestOneOf3 wrapped in CreateUserMfaVerificationRequest
func CreateUserMfaVerificationRequestOneOf3AsCreateUserMfaVerificationRequest(v *CreateUserMfaVerificationRequestOneOf3) CreateUserMfaVerificationRequest {
	return CreateUserMfaVerificationRequest{
		CreateUserMfaVerificationRequestOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateUserMfaVerificationRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateUserMfaVerificationRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateUserMfaVerificationRequestOneOf)
	if err == nil {
		jsonCreateUserMfaVerificationRequestOneOf, _ := json.Marshal(dst.CreateUserMfaVerificationRequestOneOf)
		if string(jsonCreateUserMfaVerificationRequestOneOf) == "{}" { // empty struct
			dst.CreateUserMfaVerificationRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.CreateUserMfaVerificationRequestOneOf); err != nil {
				dst.CreateUserMfaVerificationRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateUserMfaVerificationRequestOneOf = nil
	}

	// try to unmarshal data into CreateUserMfaVerificationRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.CreateUserMfaVerificationRequestOneOf1)
	if err == nil {
		jsonCreateUserMfaVerificationRequestOneOf1, _ := json.Marshal(dst.CreateUserMfaVerificationRequestOneOf1)
		if string(jsonCreateUserMfaVerificationRequestOneOf1) == "{}" { // empty struct
			dst.CreateUserMfaVerificationRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.CreateUserMfaVerificationRequestOneOf1); err != nil {
				dst.CreateUserMfaVerificationRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateUserMfaVerificationRequestOneOf1 = nil
	}

	// try to unmarshal data into CreateUserMfaVerificationRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.CreateUserMfaVerificationRequestOneOf2)
	if err == nil {
		jsonCreateUserMfaVerificationRequestOneOf2, _ := json.Marshal(dst.CreateUserMfaVerificationRequestOneOf2)
		if string(jsonCreateUserMfaVerificationRequestOneOf2) == "{}" { // empty struct
			dst.CreateUserMfaVerificationRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.CreateUserMfaVerificationRequestOneOf2); err != nil {
				dst.CreateUserMfaVerificationRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateUserMfaVerificationRequestOneOf2 = nil
	}

	// try to unmarshal data into CreateUserMfaVerificationRequestOneOf3
	err = newStrictDecoder(data).Decode(&dst.CreateUserMfaVerificationRequestOneOf3)
	if err == nil {
		jsonCreateUserMfaVerificationRequestOneOf3, _ := json.Marshal(dst.CreateUserMfaVerificationRequestOneOf3)
		if string(jsonCreateUserMfaVerificationRequestOneOf3) == "{}" { // empty struct
			dst.CreateUserMfaVerificationRequestOneOf3 = nil
		} else {
			if err = validator.Validate(dst.CreateUserMfaVerificationRequestOneOf3); err != nil {
				dst.CreateUserMfaVerificationRequestOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateUserMfaVerificationRequestOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateUserMfaVerificationRequestOneOf = nil
		dst.CreateUserMfaVerificationRequestOneOf1 = nil
		dst.CreateUserMfaVerificationRequestOneOf2 = nil
		dst.CreateUserMfaVerificationRequestOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateUserMfaVerificationRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateUserMfaVerificationRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateUserMfaVerificationRequest) MarshalJSON() ([]byte, error) {
	if src.CreateUserMfaVerificationRequestOneOf != nil {
		return json.Marshal(&src.CreateUserMfaVerificationRequestOneOf)
	}

	if src.CreateUserMfaVerificationRequestOneOf1 != nil {
		return json.Marshal(&src.CreateUserMfaVerificationRequestOneOf1)
	}

	if src.CreateUserMfaVerificationRequestOneOf2 != nil {
		return json.Marshal(&src.CreateUserMfaVerificationRequestOneOf2)
	}

	if src.CreateUserMfaVerificationRequestOneOf3 != nil {
		return json.Marshal(&src.CreateUserMfaVerificationRequestOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateUserMfaVerificationRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateUserMfaVerificationRequestOneOf != nil {
		return obj.CreateUserMfaVerificationRequestOneOf
	}

	if obj.CreateUserMfaVerificationRequestOneOf1 != nil {
		return obj.CreateUserMfaVerificationRequestOneOf1
	}

	if obj.CreateUserMfaVerificationRequestOneOf2 != nil {
		return obj.CreateUserMfaVerificationRequestOneOf2
	}

	if obj.CreateUserMfaVerificationRequestOneOf3 != nil {
		return obj.CreateUserMfaVerificationRequestOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableCreateUserMfaVerificationRequest struct {
	value *CreateUserMfaVerificationRequest
	isSet bool
}

func (v NullableCreateUserMfaVerificationRequest) Get() *CreateUserMfaVerificationRequest {
	return v.value
}

func (v *NullableCreateUserMfaVerificationRequest) Set(val *CreateUserMfaVerificationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserMfaVerificationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserMfaVerificationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserMfaVerificationRequest(val *CreateUserMfaVerificationRequest) *NullableCreateUserMfaVerificationRequest {
	return &NullableCreateUserMfaVerificationRequest{value: val, isSet: true}
}

func (v NullableCreateUserMfaVerificationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserMfaVerificationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


