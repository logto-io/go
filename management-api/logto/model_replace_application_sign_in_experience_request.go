/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReplaceApplicationSignInExperienceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplaceApplicationSignInExperienceRequest{}

// ReplaceApplicationSignInExperienceRequest struct for ReplaceApplicationSignInExperienceRequest
type ReplaceApplicationSignInExperienceRequest struct {
	Color *GetApplicationSignInExperience200ResponseColor `json:"color,omitempty"`
	Branding *ListApplicationOrganizations200ResponseInnerBranding `json:"branding,omitempty"`
	DisplayName NullableString `json:"displayName,omitempty"`
	TermsOfUseUrl ReplaceApplicationSignInExperienceRequestTermsOfUseUrl `json:"termsOfUseUrl"`
	PrivacyPolicyUrl ReplaceApplicationSignInExperienceRequestTermsOfUseUrl `json:"privacyPolicyUrl"`
}

type _ReplaceApplicationSignInExperienceRequest ReplaceApplicationSignInExperienceRequest

// NewReplaceApplicationSignInExperienceRequest instantiates a new ReplaceApplicationSignInExperienceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceApplicationSignInExperienceRequest(termsOfUseUrl ReplaceApplicationSignInExperienceRequestTermsOfUseUrl, privacyPolicyUrl ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) *ReplaceApplicationSignInExperienceRequest {
	this := ReplaceApplicationSignInExperienceRequest{}
	this.TermsOfUseUrl = termsOfUseUrl
	this.PrivacyPolicyUrl = privacyPolicyUrl
	return &this
}

// NewReplaceApplicationSignInExperienceRequestWithDefaults instantiates a new ReplaceApplicationSignInExperienceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceApplicationSignInExperienceRequestWithDefaults() *ReplaceApplicationSignInExperienceRequest {
	this := ReplaceApplicationSignInExperienceRequest{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *ReplaceApplicationSignInExperienceRequest) GetColor() GetApplicationSignInExperience200ResponseColor {
	if o == nil || IsNil(o.Color) {
		var ret GetApplicationSignInExperience200ResponseColor
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceApplicationSignInExperienceRequest) GetColorOk() (*GetApplicationSignInExperience200ResponseColor, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *ReplaceApplicationSignInExperienceRequest) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given GetApplicationSignInExperience200ResponseColor and assigns it to the Color field.
func (o *ReplaceApplicationSignInExperienceRequest) SetColor(v GetApplicationSignInExperience200ResponseColor) {
	o.Color = &v
}

// GetBranding returns the Branding field value if set, zero value otherwise.
func (o *ReplaceApplicationSignInExperienceRequest) GetBranding() ListApplicationOrganizations200ResponseInnerBranding {
	if o == nil || IsNil(o.Branding) {
		var ret ListApplicationOrganizations200ResponseInnerBranding
		return ret
	}
	return *o.Branding
}

// GetBrandingOk returns a tuple with the Branding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceApplicationSignInExperienceRequest) GetBrandingOk() (*ListApplicationOrganizations200ResponseInnerBranding, bool) {
	if o == nil || IsNil(o.Branding) {
		return nil, false
	}
	return o.Branding, true
}

// HasBranding returns a boolean if a field has been set.
func (o *ReplaceApplicationSignInExperienceRequest) HasBranding() bool {
	if o != nil && !IsNil(o.Branding) {
		return true
	}

	return false
}

// SetBranding gets a reference to the given ListApplicationOrganizations200ResponseInnerBranding and assigns it to the Branding field.
func (o *ReplaceApplicationSignInExperienceRequest) SetBranding(v ListApplicationOrganizations200ResponseInnerBranding) {
	o.Branding = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplaceApplicationSignInExperienceRequest) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplaceApplicationSignInExperienceRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ReplaceApplicationSignInExperienceRequest) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ReplaceApplicationSignInExperienceRequest) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ReplaceApplicationSignInExperienceRequest) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ReplaceApplicationSignInExperienceRequest) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetTermsOfUseUrl returns the TermsOfUseUrl field value
func (o *ReplaceApplicationSignInExperienceRequest) GetTermsOfUseUrl() ReplaceApplicationSignInExperienceRequestTermsOfUseUrl {
	if o == nil {
		var ret ReplaceApplicationSignInExperienceRequestTermsOfUseUrl
		return ret
	}

	return o.TermsOfUseUrl
}

// GetTermsOfUseUrlOk returns a tuple with the TermsOfUseUrl field value
// and a boolean to check if the value has been set.
func (o *ReplaceApplicationSignInExperienceRequest) GetTermsOfUseUrlOk() (*ReplaceApplicationSignInExperienceRequestTermsOfUseUrl, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TermsOfUseUrl, true
}

// SetTermsOfUseUrl sets field value
func (o *ReplaceApplicationSignInExperienceRequest) SetTermsOfUseUrl(v ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) {
	o.TermsOfUseUrl = v
}

// GetPrivacyPolicyUrl returns the PrivacyPolicyUrl field value
func (o *ReplaceApplicationSignInExperienceRequest) GetPrivacyPolicyUrl() ReplaceApplicationSignInExperienceRequestTermsOfUseUrl {
	if o == nil {
		var ret ReplaceApplicationSignInExperienceRequestTermsOfUseUrl
		return ret
	}

	return o.PrivacyPolicyUrl
}

// GetPrivacyPolicyUrlOk returns a tuple with the PrivacyPolicyUrl field value
// and a boolean to check if the value has been set.
func (o *ReplaceApplicationSignInExperienceRequest) GetPrivacyPolicyUrlOk() (*ReplaceApplicationSignInExperienceRequestTermsOfUseUrl, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivacyPolicyUrl, true
}

// SetPrivacyPolicyUrl sets field value
func (o *ReplaceApplicationSignInExperienceRequest) SetPrivacyPolicyUrl(v ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) {
	o.PrivacyPolicyUrl = v
}

func (o ReplaceApplicationSignInExperienceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplaceApplicationSignInExperienceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Branding) {
		toSerialize["branding"] = o.Branding
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	toSerialize["termsOfUseUrl"] = o.TermsOfUseUrl
	toSerialize["privacyPolicyUrl"] = o.PrivacyPolicyUrl
	return toSerialize, nil
}

func (o *ReplaceApplicationSignInExperienceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"termsOfUseUrl",
		"privacyPolicyUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplaceApplicationSignInExperienceRequest := _ReplaceApplicationSignInExperienceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplaceApplicationSignInExperienceRequest)

	if err != nil {
		return err
	}

	*o = ReplaceApplicationSignInExperienceRequest(varReplaceApplicationSignInExperienceRequest)

	return err
}

type NullableReplaceApplicationSignInExperienceRequest struct {
	value *ReplaceApplicationSignInExperienceRequest
	isSet bool
}

func (v NullableReplaceApplicationSignInExperienceRequest) Get() *ReplaceApplicationSignInExperienceRequest {
	return v.value
}

func (v *NullableReplaceApplicationSignInExperienceRequest) Set(val *ReplaceApplicationSignInExperienceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceApplicationSignInExperienceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceApplicationSignInExperienceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceApplicationSignInExperienceRequest(val *ReplaceApplicationSignInExperienceRequest) *NullableReplaceApplicationSignInExperienceRequest {
	return &NullableReplaceApplicationSignInExperienceRequest{value: val, isSet: true}
}

func (v NullableReplaceApplicationSignInExperienceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceApplicationSignInExperienceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


