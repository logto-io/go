/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateApplicationSecretRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateApplicationSecretRequest{}

// CreateApplicationSecretRequest struct for CreateApplicationSecretRequest
type CreateApplicationSecretRequest struct {
	// The secret name. Must be unique within the application.
	Name string `json:"name"`
	// The epoch time in milliseconds when the secret will expire. If not provided, the secret will never expire.
	ExpiresAt NullableFloat32 `json:"expiresAt,omitempty"`
}

type _CreateApplicationSecretRequest CreateApplicationSecretRequest

// NewCreateApplicationSecretRequest instantiates a new CreateApplicationSecretRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateApplicationSecretRequest(name string) *CreateApplicationSecretRequest {
	this := CreateApplicationSecretRequest{}
	this.Name = name
	return &this
}

// NewCreateApplicationSecretRequestWithDefaults instantiates a new CreateApplicationSecretRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateApplicationSecretRequestWithDefaults() *CreateApplicationSecretRequest {
	this := CreateApplicationSecretRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateApplicationSecretRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateApplicationSecretRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateApplicationSecretRequest) SetName(v string) {
	o.Name = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateApplicationSecretRequest) GetExpiresAt() float32 {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret float32
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateApplicationSecretRequest) GetExpiresAtOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *CreateApplicationSecretRequest) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableFloat32 and assigns it to the ExpiresAt field.
func (o *CreateApplicationSecretRequest) SetExpiresAt(v float32) {
	o.ExpiresAt.Set(&v)
}
// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *CreateApplicationSecretRequest) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *CreateApplicationSecretRequest) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

func (o CreateApplicationSecretRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateApplicationSecretRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.ExpiresAt.IsSet() {
		toSerialize["expiresAt"] = o.ExpiresAt.Get()
	}
	return toSerialize, nil
}

func (o *CreateApplicationSecretRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateApplicationSecretRequest := _CreateApplicationSecretRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateApplicationSecretRequest)

	if err != nil {
		return err
	}

	*o = CreateApplicationSecretRequest(varCreateApplicationSecretRequest)

	return err
}

type NullableCreateApplicationSecretRequest struct {
	value *CreateApplicationSecretRequest
	isSet bool
}

func (v NullableCreateApplicationSecretRequest) Get() *CreateApplicationSecretRequest {
	return v.value
}

func (v *NullableCreateApplicationSecretRequest) Set(val *CreateApplicationSecretRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApplicationSecretRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApplicationSecretRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApplicationSecretRequest(val *CreateApplicationSecretRequest) *NullableCreateApplicationSecretRequest {
	return &NullableCreateApplicationSecretRequest{value: val, isSet: true}
}

func (v NullableCreateApplicationSecretRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApplicationSecretRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


