/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
)

// checks if the UpdateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserRequest{}

// UpdateUserRequest struct for UpdateUserRequest
type UpdateUserRequest struct {
	Username NullableUpdateUserRequestUsername `json:"username,omitempty"`
	PrimaryEmail NullableUpdateUserRequestPrimaryEmail `json:"primaryEmail,omitempty"`
	PrimaryPhone NullableUpdateUserRequestPrimaryPhone `json:"primaryPhone,omitempty"`
	Name NullableUpdateUserRequestName `json:"name,omitempty"`
	Avatar NullableUpdateUserRequestAvatar `json:"avatar,omitempty"`
	// Custom data object to update for the given user ID. Note this will replace the entire custom data object.  If you want to perform a partial update, use the `PATCH /api/users/{userId}/custom-data` endpoint instead.
	CustomData map[string]interface{} `json:"customData,omitempty"`
	Profile *GetJwtCustomizer200ResponseOneOfContextSampleUserProfile `json:"profile,omitempty"`
}

// NewUpdateUserRequest instantiates a new UpdateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequest() *UpdateUserRequest {
	this := UpdateUserRequest{}
	return &this
}

// NewUpdateUserRequestWithDefaults instantiates a new UpdateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestWithDefaults() *UpdateUserRequest {
	this := UpdateUserRequest{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetUsername() UpdateUserRequestUsername {
	if o == nil || IsNil(o.Username.Get()) {
		var ret UpdateUserRequestUsername
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetUsernameOk() (*UpdateUserRequestUsername, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableUpdateUserRequestUsername and assigns it to the Username field.
func (o *UpdateUserRequest) SetUsername(v UpdateUserRequestUsername) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *UpdateUserRequest) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *UpdateUserRequest) UnsetUsername() {
	o.Username.Unset()
}

// GetPrimaryEmail returns the PrimaryEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetPrimaryEmail() UpdateUserRequestPrimaryEmail {
	if o == nil || IsNil(o.PrimaryEmail.Get()) {
		var ret UpdateUserRequestPrimaryEmail
		return ret
	}
	return *o.PrimaryEmail.Get()
}

// GetPrimaryEmailOk returns a tuple with the PrimaryEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetPrimaryEmailOk() (*UpdateUserRequestPrimaryEmail, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryEmail.Get(), o.PrimaryEmail.IsSet()
}

// HasPrimaryEmail returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasPrimaryEmail() bool {
	if o != nil && o.PrimaryEmail.IsSet() {
		return true
	}

	return false
}

// SetPrimaryEmail gets a reference to the given NullableUpdateUserRequestPrimaryEmail and assigns it to the PrimaryEmail field.
func (o *UpdateUserRequest) SetPrimaryEmail(v UpdateUserRequestPrimaryEmail) {
	o.PrimaryEmail.Set(&v)
}
// SetPrimaryEmailNil sets the value for PrimaryEmail to be an explicit nil
func (o *UpdateUserRequest) SetPrimaryEmailNil() {
	o.PrimaryEmail.Set(nil)
}

// UnsetPrimaryEmail ensures that no value is present for PrimaryEmail, not even an explicit nil
func (o *UpdateUserRequest) UnsetPrimaryEmail() {
	o.PrimaryEmail.Unset()
}

// GetPrimaryPhone returns the PrimaryPhone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetPrimaryPhone() UpdateUserRequestPrimaryPhone {
	if o == nil || IsNil(o.PrimaryPhone.Get()) {
		var ret UpdateUserRequestPrimaryPhone
		return ret
	}
	return *o.PrimaryPhone.Get()
}

// GetPrimaryPhoneOk returns a tuple with the PrimaryPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetPrimaryPhoneOk() (*UpdateUserRequestPrimaryPhone, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryPhone.Get(), o.PrimaryPhone.IsSet()
}

// HasPrimaryPhone returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasPrimaryPhone() bool {
	if o != nil && o.PrimaryPhone.IsSet() {
		return true
	}

	return false
}

// SetPrimaryPhone gets a reference to the given NullableUpdateUserRequestPrimaryPhone and assigns it to the PrimaryPhone field.
func (o *UpdateUserRequest) SetPrimaryPhone(v UpdateUserRequestPrimaryPhone) {
	o.PrimaryPhone.Set(&v)
}
// SetPrimaryPhoneNil sets the value for PrimaryPhone to be an explicit nil
func (o *UpdateUserRequest) SetPrimaryPhoneNil() {
	o.PrimaryPhone.Set(nil)
}

// UnsetPrimaryPhone ensures that no value is present for PrimaryPhone, not even an explicit nil
func (o *UpdateUserRequest) UnsetPrimaryPhone() {
	o.PrimaryPhone.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetName() UpdateUserRequestName {
	if o == nil || IsNil(o.Name.Get()) {
		var ret UpdateUserRequestName
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetNameOk() (*UpdateUserRequestName, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableUpdateUserRequestName and assigns it to the Name field.
func (o *UpdateUserRequest) SetName(v UpdateUserRequestName) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateUserRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateUserRequest) UnsetName() {
	o.Name.Unset()
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetAvatar() UpdateUserRequestAvatar {
	if o == nil || IsNil(o.Avatar.Get()) {
		var ret UpdateUserRequestAvatar
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetAvatarOk() (*UpdateUserRequestAvatar, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableUpdateUserRequestAvatar and assigns it to the Avatar field.
func (o *UpdateUserRequest) SetAvatar(v UpdateUserRequestAvatar) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *UpdateUserRequest) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *UpdateUserRequest) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetCustomData returns the CustomData field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetCustomData() map[string]interface{} {
	if o == nil || IsNil(o.CustomData) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomData
}

// GetCustomDataOk returns a tuple with the CustomData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetCustomDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomData) {
		return map[string]interface{}{}, false
	}
	return o.CustomData, true
}

// HasCustomData returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasCustomData() bool {
	if o != nil && !IsNil(o.CustomData) {
		return true
	}

	return false
}

// SetCustomData gets a reference to the given map[string]interface{} and assigns it to the CustomData field.
func (o *UpdateUserRequest) SetCustomData(v map[string]interface{}) {
	o.CustomData = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetProfile() GetJwtCustomizer200ResponseOneOfContextSampleUserProfile {
	if o == nil || IsNil(o.Profile) {
		var ret GetJwtCustomizer200ResponseOneOfContextSampleUserProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetProfileOk() (*GetJwtCustomizer200ResponseOneOfContextSampleUserProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given GetJwtCustomizer200ResponseOneOfContextSampleUserProfile and assigns it to the Profile field.
func (o *UpdateUserRequest) SetProfile(v GetJwtCustomizer200ResponseOneOfContextSampleUserProfile) {
	o.Profile = &v
}

func (o UpdateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.PrimaryEmail.IsSet() {
		toSerialize["primaryEmail"] = o.PrimaryEmail.Get()
	}
	if o.PrimaryPhone.IsSet() {
		toSerialize["primaryPhone"] = o.PrimaryPhone.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	if !IsNil(o.CustomData) {
		toSerialize["customData"] = o.CustomData
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	return toSerialize, nil
}

type NullableUpdateUserRequest struct {
	value *UpdateUserRequest
	isSet bool
}

func (v NullableUpdateUserRequest) Get() *UpdateUserRequest {
	return v.value
}

func (v *NullableUpdateUserRequest) Set(val *UpdateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequest(val *UpdateUserRequest) *NullableUpdateUserRequest {
	return &NullableUpdateUserRequest{value: val, isSet: true}
}

func (v NullableUpdateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


