/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// TestJwtCustomizerRequest - struct for TestJwtCustomizerRequest
type TestJwtCustomizerRequest struct {
	TestJwtCustomizerRequestOneOf *TestJwtCustomizerRequestOneOf
	TestJwtCustomizerRequestOneOf1 *TestJwtCustomizerRequestOneOf1
}

// TestJwtCustomizerRequestOneOfAsTestJwtCustomizerRequest is a convenience function that returns TestJwtCustomizerRequestOneOf wrapped in TestJwtCustomizerRequest
func TestJwtCustomizerRequestOneOfAsTestJwtCustomizerRequest(v *TestJwtCustomizerRequestOneOf) TestJwtCustomizerRequest {
	return TestJwtCustomizerRequest{
		TestJwtCustomizerRequestOneOf: v,
	}
}

// TestJwtCustomizerRequestOneOf1AsTestJwtCustomizerRequest is a convenience function that returns TestJwtCustomizerRequestOneOf1 wrapped in TestJwtCustomizerRequest
func TestJwtCustomizerRequestOneOf1AsTestJwtCustomizerRequest(v *TestJwtCustomizerRequestOneOf1) TestJwtCustomizerRequest {
	return TestJwtCustomizerRequest{
		TestJwtCustomizerRequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestJwtCustomizerRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TestJwtCustomizerRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.TestJwtCustomizerRequestOneOf)
	if err == nil {
		jsonTestJwtCustomizerRequestOneOf, _ := json.Marshal(dst.TestJwtCustomizerRequestOneOf)
		if string(jsonTestJwtCustomizerRequestOneOf) == "{}" { // empty struct
			dst.TestJwtCustomizerRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.TestJwtCustomizerRequestOneOf); err != nil {
				dst.TestJwtCustomizerRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestJwtCustomizerRequestOneOf = nil
	}

	// try to unmarshal data into TestJwtCustomizerRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.TestJwtCustomizerRequestOneOf1)
	if err == nil {
		jsonTestJwtCustomizerRequestOneOf1, _ := json.Marshal(dst.TestJwtCustomizerRequestOneOf1)
		if string(jsonTestJwtCustomizerRequestOneOf1) == "{}" { // empty struct
			dst.TestJwtCustomizerRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.TestJwtCustomizerRequestOneOf1); err != nil {
				dst.TestJwtCustomizerRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TestJwtCustomizerRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TestJwtCustomizerRequestOneOf = nil
		dst.TestJwtCustomizerRequestOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TestJwtCustomizerRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TestJwtCustomizerRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestJwtCustomizerRequest) MarshalJSON() ([]byte, error) {
	if src.TestJwtCustomizerRequestOneOf != nil {
		return json.Marshal(&src.TestJwtCustomizerRequestOneOf)
	}

	if src.TestJwtCustomizerRequestOneOf1 != nil {
		return json.Marshal(&src.TestJwtCustomizerRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestJwtCustomizerRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TestJwtCustomizerRequestOneOf != nil {
		return obj.TestJwtCustomizerRequestOneOf
	}

	if obj.TestJwtCustomizerRequestOneOf1 != nil {
		return obj.TestJwtCustomizerRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableTestJwtCustomizerRequest struct {
	value *TestJwtCustomizerRequest
	isSet bool
}

func (v NullableTestJwtCustomizerRequest) Get() *TestJwtCustomizerRequest {
	return v.value
}

func (v *NullableTestJwtCustomizerRequest) Set(val *TestJwtCustomizerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestJwtCustomizerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestJwtCustomizerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestJwtCustomizerRequest(val *TestJwtCustomizerRequest) *NullableTestJwtCustomizerRequest {
	return &NullableTestJwtCustomizerRequest{value: val, isSet: true}
}

func (v NullableTestJwtCustomizerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestJwtCustomizerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


