/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// VerifyVerificationCodeRequest - struct for VerifyVerificationCodeRequest
type VerifyVerificationCodeRequest struct {
	VerifyVerificationCodeRequestOneOf *VerifyVerificationCodeRequestOneOf
	VerifyVerificationCodeRequestOneOf1 *VerifyVerificationCodeRequestOneOf1
}

// VerifyVerificationCodeRequestOneOfAsVerifyVerificationCodeRequest is a convenience function that returns VerifyVerificationCodeRequestOneOf wrapped in VerifyVerificationCodeRequest
func VerifyVerificationCodeRequestOneOfAsVerifyVerificationCodeRequest(v *VerifyVerificationCodeRequestOneOf) VerifyVerificationCodeRequest {
	return VerifyVerificationCodeRequest{
		VerifyVerificationCodeRequestOneOf: v,
	}
}

// VerifyVerificationCodeRequestOneOf1AsVerifyVerificationCodeRequest is a convenience function that returns VerifyVerificationCodeRequestOneOf1 wrapped in VerifyVerificationCodeRequest
func VerifyVerificationCodeRequestOneOf1AsVerifyVerificationCodeRequest(v *VerifyVerificationCodeRequestOneOf1) VerifyVerificationCodeRequest {
	return VerifyVerificationCodeRequest{
		VerifyVerificationCodeRequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VerifyVerificationCodeRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VerifyVerificationCodeRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.VerifyVerificationCodeRequestOneOf)
	if err == nil {
		jsonVerifyVerificationCodeRequestOneOf, _ := json.Marshal(dst.VerifyVerificationCodeRequestOneOf)
		if string(jsonVerifyVerificationCodeRequestOneOf) == "{}" { // empty struct
			dst.VerifyVerificationCodeRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.VerifyVerificationCodeRequestOneOf); err != nil {
				dst.VerifyVerificationCodeRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.VerifyVerificationCodeRequestOneOf = nil
	}

	// try to unmarshal data into VerifyVerificationCodeRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.VerifyVerificationCodeRequestOneOf1)
	if err == nil {
		jsonVerifyVerificationCodeRequestOneOf1, _ := json.Marshal(dst.VerifyVerificationCodeRequestOneOf1)
		if string(jsonVerifyVerificationCodeRequestOneOf1) == "{}" { // empty struct
			dst.VerifyVerificationCodeRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.VerifyVerificationCodeRequestOneOf1); err != nil {
				dst.VerifyVerificationCodeRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.VerifyVerificationCodeRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VerifyVerificationCodeRequestOneOf = nil
		dst.VerifyVerificationCodeRequestOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VerifyVerificationCodeRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VerifyVerificationCodeRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VerifyVerificationCodeRequest) MarshalJSON() ([]byte, error) {
	if src.VerifyVerificationCodeRequestOneOf != nil {
		return json.Marshal(&src.VerifyVerificationCodeRequestOneOf)
	}

	if src.VerifyVerificationCodeRequestOneOf1 != nil {
		return json.Marshal(&src.VerifyVerificationCodeRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VerifyVerificationCodeRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VerifyVerificationCodeRequestOneOf != nil {
		return obj.VerifyVerificationCodeRequestOneOf
	}

	if obj.VerifyVerificationCodeRequestOneOf1 != nil {
		return obj.VerifyVerificationCodeRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableVerifyVerificationCodeRequest struct {
	value *VerifyVerificationCodeRequest
	isSet bool
}

func (v NullableVerifyVerificationCodeRequest) Get() *VerifyVerificationCodeRequest {
	return v.value
}

func (v *NullableVerifyVerificationCodeRequest) Set(val *VerifyVerificationCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyVerificationCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyVerificationCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyVerificationCodeRequest(val *VerifyVerificationCodeRequest) *NullableVerifyVerificationCodeRequest {
	return &NullableVerifyVerificationCodeRequest{value: val, isSet: true}
}

func (v NullableVerifyVerificationCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyVerificationCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


