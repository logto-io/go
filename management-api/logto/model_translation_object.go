/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
)

// checks if the TranslationObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslationObject{}

// TranslationObject struct for TranslationObject
type TranslationObject struct {
	TranslationKey *Translation `json:"[translationKey],omitempty"`
}

// NewTranslationObject instantiates a new TranslationObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslationObject() *TranslationObject {
	this := TranslationObject{}
	return &this
}

// NewTranslationObjectWithDefaults instantiates a new TranslationObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslationObjectWithDefaults() *TranslationObject {
	this := TranslationObject{}
	return &this
}

// GetTranslationKey returns the TranslationKey field value if set, zero value otherwise.
func (o *TranslationObject) GetTranslationKey() Translation {
	if o == nil || IsNil(o.TranslationKey) {
		var ret Translation
		return ret
	}
	return *o.TranslationKey
}

// GetTranslationKeyOk returns a tuple with the TranslationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslationObject) GetTranslationKeyOk() (*Translation, bool) {
	if o == nil || IsNil(o.TranslationKey) {
		return nil, false
	}
	return o.TranslationKey, true
}

// HasTranslationKey returns a boolean if a field has been set.
func (o *TranslationObject) HasTranslationKey() bool {
	if o != nil && !IsNil(o.TranslationKey) {
		return true
	}

	return false
}

// SetTranslationKey gets a reference to the given Translation and assigns it to the TranslationKey field.
func (o *TranslationObject) SetTranslationKey(v Translation) {
	o.TranslationKey = &v
}

func (o TranslationObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslationObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TranslationKey) {
		toSerialize["[translationKey]"] = o.TranslationKey
	}
	return toSerialize, nil
}

type NullableTranslationObject struct {
	value *TranslationObject
	isSet bool
}

func (v NullableTranslationObject) Get() *TranslationObject {
	return v.value
}

func (v *NullableTranslationObject) Set(val *TranslationObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslationObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslationObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslationObject(val *TranslationObject) *NullableTranslationObject {
	return &NullableTranslationObject{value: val, isSet: true}
}

func (v NullableTranslationObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslationObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


