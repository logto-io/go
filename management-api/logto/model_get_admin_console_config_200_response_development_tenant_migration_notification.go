/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification{}

// GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification struct for GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification
type GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification struct {
	IsPaidTenant bool `json:"isPaidTenant"`
	Tag string `json:"tag"`
	ReadAt *float32 `json:"readAt,omitempty"`
}

type _GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification

// NewGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification instantiates a new GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification(isPaidTenant bool, tag string) *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification {
	this := GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification{}
	this.IsPaidTenant = isPaidTenant
	this.Tag = tag
	return &this
}

// NewGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotificationWithDefaults instantiates a new GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotificationWithDefaults() *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification {
	this := GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification{}
	return &this
}

// GetIsPaidTenant returns the IsPaidTenant field value
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) GetIsPaidTenant() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPaidTenant
}

// GetIsPaidTenantOk returns a tuple with the IsPaidTenant field value
// and a boolean to check if the value has been set.
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) GetIsPaidTenantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPaidTenant, true
}

// SetIsPaidTenant sets field value
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) SetIsPaidTenant(v bool) {
	o.IsPaidTenant = v
}

// GetTag returns the Tag field value
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) SetTag(v string) {
	o.Tag = v
}

// GetReadAt returns the ReadAt field value if set, zero value otherwise.
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) GetReadAt() float32 {
	if o == nil || IsNil(o.ReadAt) {
		var ret float32
		return ret
	}
	return *o.ReadAt
}

// GetReadAtOk returns a tuple with the ReadAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) GetReadAtOk() (*float32, bool) {
	if o == nil || IsNil(o.ReadAt) {
		return nil, false
	}
	return o.ReadAt, true
}

// HasReadAt returns a boolean if a field has been set.
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) HasReadAt() bool {
	if o != nil && !IsNil(o.ReadAt) {
		return true
	}

	return false
}

// SetReadAt gets a reference to the given float32 and assigns it to the ReadAt field.
func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) SetReadAt(v float32) {
	o.ReadAt = &v
}

func (o GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isPaidTenant"] = o.IsPaidTenant
	toSerialize["tag"] = o.Tag
	if !IsNil(o.ReadAt) {
		toSerialize["readAt"] = o.ReadAt
	}
	return toSerialize, nil
}

func (o *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isPaidTenant",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification := _GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification)

	if err != nil {
		return err
	}

	*o = GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification(varGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification)

	return err
}

type NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification struct {
	value *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification
	isSet bool
}

func (v NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) Get() *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification {
	return v.value
}

func (v *NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) Set(val *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification(val *GetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) *NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification {
	return &NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification{value: val, isSet: true}
}

func (v NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAdminConsoleConfig200ResponseDevelopmentTenantMigrationNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


