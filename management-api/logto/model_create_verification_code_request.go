/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateVerificationCodeRequest - struct for CreateVerificationCodeRequest
type CreateVerificationCodeRequest struct {
	CreateVerificationCodeRequestOneOf *CreateVerificationCodeRequestOneOf
	CreateVerificationCodeRequestOneOf1 *CreateVerificationCodeRequestOneOf1
}

// CreateVerificationCodeRequestOneOfAsCreateVerificationCodeRequest is a convenience function that returns CreateVerificationCodeRequestOneOf wrapped in CreateVerificationCodeRequest
func CreateVerificationCodeRequestOneOfAsCreateVerificationCodeRequest(v *CreateVerificationCodeRequestOneOf) CreateVerificationCodeRequest {
	return CreateVerificationCodeRequest{
		CreateVerificationCodeRequestOneOf: v,
	}
}

// CreateVerificationCodeRequestOneOf1AsCreateVerificationCodeRequest is a convenience function that returns CreateVerificationCodeRequestOneOf1 wrapped in CreateVerificationCodeRequest
func CreateVerificationCodeRequestOneOf1AsCreateVerificationCodeRequest(v *CreateVerificationCodeRequestOneOf1) CreateVerificationCodeRequest {
	return CreateVerificationCodeRequest{
		CreateVerificationCodeRequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateVerificationCodeRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateVerificationCodeRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateVerificationCodeRequestOneOf)
	if err == nil {
		jsonCreateVerificationCodeRequestOneOf, _ := json.Marshal(dst.CreateVerificationCodeRequestOneOf)
		if string(jsonCreateVerificationCodeRequestOneOf) == "{}" { // empty struct
			dst.CreateVerificationCodeRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.CreateVerificationCodeRequestOneOf); err != nil {
				dst.CreateVerificationCodeRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateVerificationCodeRequestOneOf = nil
	}

	// try to unmarshal data into CreateVerificationCodeRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.CreateVerificationCodeRequestOneOf1)
	if err == nil {
		jsonCreateVerificationCodeRequestOneOf1, _ := json.Marshal(dst.CreateVerificationCodeRequestOneOf1)
		if string(jsonCreateVerificationCodeRequestOneOf1) == "{}" { // empty struct
			dst.CreateVerificationCodeRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.CreateVerificationCodeRequestOneOf1); err != nil {
				dst.CreateVerificationCodeRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateVerificationCodeRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateVerificationCodeRequestOneOf = nil
		dst.CreateVerificationCodeRequestOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateVerificationCodeRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateVerificationCodeRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateVerificationCodeRequest) MarshalJSON() ([]byte, error) {
	if src.CreateVerificationCodeRequestOneOf != nil {
		return json.Marshal(&src.CreateVerificationCodeRequestOneOf)
	}

	if src.CreateVerificationCodeRequestOneOf1 != nil {
		return json.Marshal(&src.CreateVerificationCodeRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateVerificationCodeRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateVerificationCodeRequestOneOf != nil {
		return obj.CreateVerificationCodeRequestOneOf
	}

	if obj.CreateVerificationCodeRequestOneOf1 != nil {
		return obj.CreateVerificationCodeRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableCreateVerificationCodeRequest struct {
	value *CreateVerificationCodeRequest
	isSet bool
}

func (v NullableCreateVerificationCodeRequest) Get() *CreateVerificationCodeRequest {
	return v.value
}

func (v *NullableCreateVerificationCodeRequest) Set(val *CreateVerificationCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVerificationCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVerificationCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVerificationCodeRequest(val *CreateVerificationCodeRequest) *NullableCreateVerificationCodeRequest {
	return &NullableCreateVerificationCodeRequest{value: val, isSet: true}
}

func (v NullableCreateVerificationCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVerificationCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


