/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ReplaceApplicationSignInExperienceRequestTermsOfUseUrl - struct for ReplaceApplicationSignInExperienceRequestTermsOfUseUrl
type ReplaceApplicationSignInExperienceRequestTermsOfUseUrl struct {
	String *string
}

// stringAsReplaceApplicationSignInExperienceRequestTermsOfUseUrl is a convenience function that returns string wrapped in ReplaceApplicationSignInExperienceRequestTermsOfUseUrl
func StringAsReplaceApplicationSignInExperienceRequestTermsOfUseUrl(v *string) ReplaceApplicationSignInExperienceRequestTermsOfUseUrl {
	return ReplaceApplicationSignInExperienceRequestTermsOfUseUrl{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReplaceApplicationSignInExperienceRequestTermsOfUseUrl)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReplaceApplicationSignInExperienceRequestTermsOfUseUrl)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) MarshalJSON() ([]byte, error) {
	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl struct {
	value *ReplaceApplicationSignInExperienceRequestTermsOfUseUrl
	isSet bool
}

func (v NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl) Get() *ReplaceApplicationSignInExperienceRequestTermsOfUseUrl {
	return v.value
}

func (v *NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl) Set(val *ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl(val *ReplaceApplicationSignInExperienceRequestTermsOfUseUrl) *NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl {
	return &NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl{value: val, isSet: true}
}

func (v NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceApplicationSignInExperienceRequestTermsOfUseUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


