/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateSubjectToken201Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubjectToken201Response{}

// CreateSubjectToken201Response struct for CreateSubjectToken201Response
type CreateSubjectToken201Response struct {
	SubjectToken string `json:"subjectToken"`
	ExpiresIn float32 `json:"expiresIn"`
}

type _CreateSubjectToken201Response CreateSubjectToken201Response

// NewCreateSubjectToken201Response instantiates a new CreateSubjectToken201Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubjectToken201Response(subjectToken string, expiresIn float32) *CreateSubjectToken201Response {
	this := CreateSubjectToken201Response{}
	this.SubjectToken = subjectToken
	this.ExpiresIn = expiresIn
	return &this
}

// NewCreateSubjectToken201ResponseWithDefaults instantiates a new CreateSubjectToken201Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubjectToken201ResponseWithDefaults() *CreateSubjectToken201Response {
	this := CreateSubjectToken201Response{}
	return &this
}

// GetSubjectToken returns the SubjectToken field value
func (o *CreateSubjectToken201Response) GetSubjectToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectToken
}

// GetSubjectTokenOk returns a tuple with the SubjectToken field value
// and a boolean to check if the value has been set.
func (o *CreateSubjectToken201Response) GetSubjectTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectToken, true
}

// SetSubjectToken sets field value
func (o *CreateSubjectToken201Response) SetSubjectToken(v string) {
	o.SubjectToken = v
}

// GetExpiresIn returns the ExpiresIn field value
func (o *CreateSubjectToken201Response) GetExpiresIn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value
// and a boolean to check if the value has been set.
func (o *CreateSubjectToken201Response) GetExpiresInOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresIn, true
}

// SetExpiresIn sets field value
func (o *CreateSubjectToken201Response) SetExpiresIn(v float32) {
	o.ExpiresIn = v
}

func (o CreateSubjectToken201Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubjectToken201Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subjectToken"] = o.SubjectToken
	toSerialize["expiresIn"] = o.ExpiresIn
	return toSerialize, nil
}

func (o *CreateSubjectToken201Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subjectToken",
		"expiresIn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSubjectToken201Response := _CreateSubjectToken201Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateSubjectToken201Response)

	if err != nil {
		return err
	}

	*o = CreateSubjectToken201Response(varCreateSubjectToken201Response)

	return err
}

type NullableCreateSubjectToken201Response struct {
	value *CreateSubjectToken201Response
	isSet bool
}

func (v NullableCreateSubjectToken201Response) Get() *CreateSubjectToken201Response {
	return v.value
}

func (v *NullableCreateSubjectToken201Response) Set(val *CreateSubjectToken201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubjectToken201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubjectToken201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubjectToken201Response(val *CreateSubjectToken201Response) *NullableCreateSubjectToken201Response {
	return &NullableCreateSubjectToken201Response{value: val, isSet: true}
}

func (v NullableCreateSubjectToken201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubjectToken201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


