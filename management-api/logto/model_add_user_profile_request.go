/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// AddUserProfileRequest - struct for AddUserProfileRequest
type AddUserProfileRequest struct {
	AddUserProfileRequestOneOf *AddUserProfileRequestOneOf
	AddUserProfileRequestOneOf1 *AddUserProfileRequestOneOf1
	AddUserProfileRequestOneOf2 *AddUserProfileRequestOneOf2
	AddUserProfileRequestOneOf3 *AddUserProfileRequestOneOf3
	AddUserProfileRequestOneOf4 *AddUserProfileRequestOneOf4
}

// AddUserProfileRequestOneOfAsAddUserProfileRequest is a convenience function that returns AddUserProfileRequestOneOf wrapped in AddUserProfileRequest
func AddUserProfileRequestOneOfAsAddUserProfileRequest(v *AddUserProfileRequestOneOf) AddUserProfileRequest {
	return AddUserProfileRequest{
		AddUserProfileRequestOneOf: v,
	}
}

// AddUserProfileRequestOneOf1AsAddUserProfileRequest is a convenience function that returns AddUserProfileRequestOneOf1 wrapped in AddUserProfileRequest
func AddUserProfileRequestOneOf1AsAddUserProfileRequest(v *AddUserProfileRequestOneOf1) AddUserProfileRequest {
	return AddUserProfileRequest{
		AddUserProfileRequestOneOf1: v,
	}
}

// AddUserProfileRequestOneOf2AsAddUserProfileRequest is a convenience function that returns AddUserProfileRequestOneOf2 wrapped in AddUserProfileRequest
func AddUserProfileRequestOneOf2AsAddUserProfileRequest(v *AddUserProfileRequestOneOf2) AddUserProfileRequest {
	return AddUserProfileRequest{
		AddUserProfileRequestOneOf2: v,
	}
}

// AddUserProfileRequestOneOf3AsAddUserProfileRequest is a convenience function that returns AddUserProfileRequestOneOf3 wrapped in AddUserProfileRequest
func AddUserProfileRequestOneOf3AsAddUserProfileRequest(v *AddUserProfileRequestOneOf3) AddUserProfileRequest {
	return AddUserProfileRequest{
		AddUserProfileRequestOneOf3: v,
	}
}

// AddUserProfileRequestOneOf4AsAddUserProfileRequest is a convenience function that returns AddUserProfileRequestOneOf4 wrapped in AddUserProfileRequest
func AddUserProfileRequestOneOf4AsAddUserProfileRequest(v *AddUserProfileRequestOneOf4) AddUserProfileRequest {
	return AddUserProfileRequest{
		AddUserProfileRequestOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddUserProfileRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddUserProfileRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.AddUserProfileRequestOneOf)
	if err == nil {
		jsonAddUserProfileRequestOneOf, _ := json.Marshal(dst.AddUserProfileRequestOneOf)
		if string(jsonAddUserProfileRequestOneOf) == "{}" { // empty struct
			dst.AddUserProfileRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.AddUserProfileRequestOneOf); err != nil {
				dst.AddUserProfileRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddUserProfileRequestOneOf = nil
	}

	// try to unmarshal data into AddUserProfileRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.AddUserProfileRequestOneOf1)
	if err == nil {
		jsonAddUserProfileRequestOneOf1, _ := json.Marshal(dst.AddUserProfileRequestOneOf1)
		if string(jsonAddUserProfileRequestOneOf1) == "{}" { // empty struct
			dst.AddUserProfileRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.AddUserProfileRequestOneOf1); err != nil {
				dst.AddUserProfileRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddUserProfileRequestOneOf1 = nil
	}

	// try to unmarshal data into AddUserProfileRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.AddUserProfileRequestOneOf2)
	if err == nil {
		jsonAddUserProfileRequestOneOf2, _ := json.Marshal(dst.AddUserProfileRequestOneOf2)
		if string(jsonAddUserProfileRequestOneOf2) == "{}" { // empty struct
			dst.AddUserProfileRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.AddUserProfileRequestOneOf2); err != nil {
				dst.AddUserProfileRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddUserProfileRequestOneOf2 = nil
	}

	// try to unmarshal data into AddUserProfileRequestOneOf3
	err = newStrictDecoder(data).Decode(&dst.AddUserProfileRequestOneOf3)
	if err == nil {
		jsonAddUserProfileRequestOneOf3, _ := json.Marshal(dst.AddUserProfileRequestOneOf3)
		if string(jsonAddUserProfileRequestOneOf3) == "{}" { // empty struct
			dst.AddUserProfileRequestOneOf3 = nil
		} else {
			if err = validator.Validate(dst.AddUserProfileRequestOneOf3); err != nil {
				dst.AddUserProfileRequestOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddUserProfileRequestOneOf3 = nil
	}

	// try to unmarshal data into AddUserProfileRequestOneOf4
	err = newStrictDecoder(data).Decode(&dst.AddUserProfileRequestOneOf4)
	if err == nil {
		jsonAddUserProfileRequestOneOf4, _ := json.Marshal(dst.AddUserProfileRequestOneOf4)
		if string(jsonAddUserProfileRequestOneOf4) == "{}" { // empty struct
			dst.AddUserProfileRequestOneOf4 = nil
		} else {
			if err = validator.Validate(dst.AddUserProfileRequestOneOf4); err != nil {
				dst.AddUserProfileRequestOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddUserProfileRequestOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddUserProfileRequestOneOf = nil
		dst.AddUserProfileRequestOneOf1 = nil
		dst.AddUserProfileRequestOneOf2 = nil
		dst.AddUserProfileRequestOneOf3 = nil
		dst.AddUserProfileRequestOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddUserProfileRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddUserProfileRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddUserProfileRequest) MarshalJSON() ([]byte, error) {
	if src.AddUserProfileRequestOneOf != nil {
		return json.Marshal(&src.AddUserProfileRequestOneOf)
	}

	if src.AddUserProfileRequestOneOf1 != nil {
		return json.Marshal(&src.AddUserProfileRequestOneOf1)
	}

	if src.AddUserProfileRequestOneOf2 != nil {
		return json.Marshal(&src.AddUserProfileRequestOneOf2)
	}

	if src.AddUserProfileRequestOneOf3 != nil {
		return json.Marshal(&src.AddUserProfileRequestOneOf3)
	}

	if src.AddUserProfileRequestOneOf4 != nil {
		return json.Marshal(&src.AddUserProfileRequestOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddUserProfileRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddUserProfileRequestOneOf != nil {
		return obj.AddUserProfileRequestOneOf
	}

	if obj.AddUserProfileRequestOneOf1 != nil {
		return obj.AddUserProfileRequestOneOf1
	}

	if obj.AddUserProfileRequestOneOf2 != nil {
		return obj.AddUserProfileRequestOneOf2
	}

	if obj.AddUserProfileRequestOneOf3 != nil {
		return obj.AddUserProfileRequestOneOf3
	}

	if obj.AddUserProfileRequestOneOf4 != nil {
		return obj.AddUserProfileRequestOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableAddUserProfileRequest struct {
	value *AddUserProfileRequest
	isSet bool
}

func (v NullableAddUserProfileRequest) Get() *AddUserProfileRequest {
	return v.value
}

func (v *NullableAddUserProfileRequest) Set(val *AddUserProfileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserProfileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserProfileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserProfileRequest(val *AddUserProfileRequest) *NullableAddUserProfileRequest {
	return &NullableAddUserProfileRequest{value: val, isSet: true}
}

func (v NullableAddUserProfileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserProfileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


